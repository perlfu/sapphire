/*
 *  This file is part of the Jikes RVM project (http://jikesrvm.org).
 *
 *  This file is licensed to You under the Eclipse Public License (EPL);
 *  You may not use this file except in compliance with the License. You
 *  may obtain a copy of the License at
 *
 *      http://www.opensource.org/licenses/eclipse-1.0.php
 *
 *  See the COPYRIGHT.txt file distributed with this work for information
 *  regarding copyright ownership.
 */

options {
  JDK_VERSION = "1.5";
  LOOKAHEAD = 2;
  FORCE_LA_CHECK=true;
  STATIC = false;
//  DEBUG_PARSER=true;
}
PARSER_BEGIN(Parser)
package org.mmtk.harness.lang.parser;

// CHECKSTYLE:OFF
import org.mmtk.harness.lang.ast.*;
import org.mmtk.harness.lang.runtime.*;
import org.mmtk.harness.lang.type.*;
import java.util.*;
import java.io.*;

public class Parser {
	private static BufferedInputStream createStream(String filename) {
		try {
		  return new BufferedInputStream(new FileInputStream(filename));
		} catch (Exception e) {
			throw new RuntimeException(e);
		}
	}
	public Parser(String filename) {
		this(createStream(filename));
		AbstractAST.setCurrentSource(new Source(filename));
	}
	
	private static void checkSymbol(SymbolTable symbols, Token tok) throws ParseException {
		String id = tok.toString();
		if (!symbols.isDefined(id)) {
  	  	 throw new ParseException(
  	  	   String.format("%d:%d - Variable %s is undefined",tok.beginLine,tok.beginColumn,id));
  	   }
	}
	
	private static Type createTypeReference(TypeTable types, String name) {
		if (types.isDefined(name)) {
			return types.get(name);
		}
		return new TypeReference(types,name);
	}
}
PARSER_END(Parser)

/* Lexical structure based from Java grammar */

/* White space */

SKIP : {
  " " |
  "\t" |
  "\n" |
  "\r" |
  "\f"
} 

/* Comments */

MORE : {
  "//" : IN_SINGLE_LINE_COMMENT |
  "/*" : IN_MULTI_LINE_COMMENT
}

<IN_SINGLE_LINE_COMMENT>
SPECIAL_TOKEN : {
  <SINGLE_LINE_COMMENT: "\n" | "\r" | "\r\n" > : DEFAULT
}

<IN_MULTI_LINE_COMMENT>
SPECIAL_TOKEN : {
  <MULTI_LINE_COMMENT: "*/" > : DEFAULT
}

<IN_SINGLE_LINE_COMMENT,IN_MULTI_LINE_COMMENT>
MORE : {
  < ~[] >
}

/* Reserved words */

TOKEN : {
    < ALLOC : "alloc" >
  | < ASSERT : "assert" >
  | < CLASS : "class" >
  | < ELIF : "elif" >
  | < ELSE : "else" >
  | < EXPECT : "expect" >
  | < IF : "if" >
  | < INTRINSIC : "intrinsic" >
  | < METHOD : "method" >
  | < NULL : "null" >
  | < PRINT : "print" >
  | < RETURN : "return" >
  | < SIGNATURE : "signature" >
  | < SPAWN : "spawn" >
  | < TYPE : "type" >
  | < WHILE : "while" >
}

/* Literals */

TOKEN : {
  < INTEGER_LITERAL: (["0"-"9"])+ > |
  < BOOLEAN_LITERAL: ("true" | "false") > |
  < STRING_LITERAL: "\"" (~["\""])* "\"" >
}

/* Identifiers */

TOKEN : {
  <IDENTIFIER: ["a"-"z","A"-"Z","_"] (["a"-"z","A"-"Z","0"-"9","_"])* >
}

/* Separators */

TOKEN : {
  < LPAREN: "(" > |
  < RPAREN: ")" > |
  < LBRACE: "{" > |
  < RBRACE: "}" > |
  < LBRACKET: "[" > |
  < RBRACKET: "]" > |
  < SEMICOLON: ";" > |
  < COMMA: "," > |
  < DOT: "." >
}

/* Operators */

TOKEN : {
  < ASSIGN: "=" > |
  < LT: "<" > |
  < GT: ">" > |
  < BANG: "!" > |
  < EQ: "==" > |
  < LE: "<=" > |
  < GE: ">=" > |
  < NE: "!=" > |
  < SC_OR: "||" > |
  < SC_AND: "&&" > |
  < PLUS: "+" > |
  < MINUS: "-" > |
  < STAR: "*" > |
  < SLASH: "/" > |
  < REM: "%" >
}

MethodTable script() : {
  GlobalDefs defs = new GlobalDefs();
  
  final String intrinsics = "org.mmtk.harness.lang.Intrinsics";
  defs.methods.add(new IntrinsicMethod("gc",intrinsics,"gc"));
  defs.methods.add(new IntrinsicMethod("tid",intrinsics,"threadId"));
  defs.methods.add(new IntrinsicMethod("hash",intrinsics,"hash",
    	new Class<?>[] { ObjectValue.class }));
  defs.methods.add(new IntrinsicMethod("random",intrinsics,"random",
  		new Class<?>[] { int.class, int.class }));
  defs.methods.add(new IntrinsicMethod("setSeed",intrinsics,"setRandomSeed",
  		new Class<?>[] { int.class }));
  defs.methods.add(new IntrinsicMethod("heapDump",intrinsics,"heapDump"));
}
{
  ( method(defs) 
  | typeDeclaration(defs) 
  )+ <EOF>
  { return defs.methods; }
}

/**
 * A program method with its own variable scope.
 */
void method(GlobalDefs defs) : {
    SymbolTable symbols = new SymbolTable();
    Statement stmt;
    String name;
    int params = 0;
    Type retType;
    String javaClass, javaMethod, javaParam;
    List<String> signature = new ArrayList<String>();
    Token t;
}
{
  retType=type(defs)
  t=<IDENTIFIER> { name = t.toString(); } <LPAREN>
  ( declaration1(defs, symbols) { params++; } ( <COMMA> declaration1(defs, symbols) { params++; } )* )?
  <RPAREN>
  ( stmt=statements(defs, symbols)
    { defs.methods.add(new NormalMethod(t, name, params, retType, symbols.declarations(), stmt)); }
  | <INTRINSIC>
      <CLASS> javaClass=string()
      <METHOD> javaMethod=string()
      ( <SIGNATURE> <LPAREN>
          (intrinsicParam(signature)
          ( <COMMA> intrinsicParam(signature))*
          )?
        <RPAREN>
      )? <SEMICOLON>
      { defs.methods.add(new IntrinsicMethod(name,javaClass,javaMethod,signature)); }
  )
}

void intrinsicParam(List<String> signature) : {
	String javaParam;
}
{
  javaParam=string()
          { if (javaParam.equals("org.mmtk.harness.lang.Env")) {
          	  throw new ParseException("Env parameter to intrinsic methods is implicit!");
            }
          	signature.add(javaParam); }
}

/**
 * A Type Declaration
 */
void typeDeclaration(GlobalDefs defs) : {
	Token t;
}
{
	<TYPE> t=<IDENTIFIER>
	{ UserType type = new UserTypeImpl(t,t.toString()); 
      defs.types.add(type); 
    }
	<LBRACE>
	( typeField(defs,type) )+
	<RBRACE>
}
	
void typeField(GlobalDefs defs, UserType type) : {
	String fieldType, name;
}
{
	fieldType=ident() name=ident() <SEMICOLON>
	{ type.defineField(name, createTypeReference(defs.types,fieldType)); }
}

/**
 * A sequence of statements in braces, carrying an inner variable scope
 */
Statement statements(GlobalDefs defs, SymbolTable symbols) : {
    Statement stmt;
    List<Statement> stmts = new ArrayList<Statement>();
    Token t;
}
{
  t=<LBRACE>
  { symbols.pushScope(); }
  ( stmt=statement(defs, symbols)
    { stmts.add(stmt); }
  )* 
  { symbols.popScope(); }
  <RBRACE>
  { return new Sequence(t,stmts); }
}

/**
 * A single statement
 */
Statement statement(GlobalDefs defs, SymbolTable symbols) : {
    Statement stmt;
    Token t;
}
{
  ( stmt=conditional(defs, symbols)
  | stmt=expect(defs, symbols) <SEMICOLON>
  | stmt=spawn(defs, symbols) <SEMICOLON>
  | stmt=whileLoop(defs, symbols)
  | stmt=print(defs, symbols) <SEMICOLON>
  | stmt=assertTrue(defs, symbols) <SEMICOLON>
  | t=<IDENTIFIER> 
    ( stmt=assignment(defs, symbols, t) <SEMICOLON>
    | stmt=declaration(defs, symbols, t) <SEMICOLON>
    | stmt=storeField(defs, symbols, t) <SEMICOLON>
    | stmt=callMethod(defs, symbols, t) <SEMICOLON>
    )
  | stmt=returnStmt(defs, symbols) <SEMICOLON> 
  )
  { return stmt; }
}

/**
 * if - then - else
 */
Statement conditional(GlobalDefs defs, SymbolTable symbols) : {
	Expression cond;
    List<Expression> conds = new ArrayList<Expression>();
    Statement stmt;
    List<Statement> stmts = new ArrayList<Statement>();
    Token t;
}
{
  t=<IF> <LPAREN> cond=expression(defs,symbols) { conds.add(cond); } <RPAREN> 
  stmt=statements(defs, symbols) { stmts.add(stmt); }
  ( <ELIF>  <LPAREN> cond=expression(defs,symbols) { conds.add(cond); } <RPAREN> 
  	stmt=statements(defs, symbols) { stmts.add(stmt); })*
  ( <ELSE>  stmt=statements(defs, symbols) { stmts.add(stmt); } )?
  { return new IfStatement(t,conds,stmts); }
}

/**
 * assert the expression in the first parameter,
 * and print the remaining parameters if the assertion fails
 */
Statement assertTrue(GlobalDefs defs, SymbolTable symbols) : {
    Expression cond;
    List<Expression> exprs = new ArrayList<Expression>();
    Expression expr;
    Token t;
}
{
  t=<ASSERT> <LPAREN> cond=expression(defs,symbols)
  ( <COMMA> expr=expression(defs,symbols)
    { exprs.add(expr); } )+
  <RPAREN> 
  { return new Assert(t,cond, exprs); }
}

/**
 * while loop
 */
Statement whileLoop(GlobalDefs defs, SymbolTable symbols) : {
    Expression cond;
    Statement body;
    Token t;
}
{
  t=<WHILE> <LPAREN> cond=expression(defs,symbols) <RPAREN> 
  body=statements(defs, symbols) 
  { return new WhileStatement(t,cond,body); }
}

/**
 * Variable declaration, and optional initializing assignment
 *
 * Adds a symbol to the symbol table, and returns either an
 * assignment statement or an empty sequence.
 */
Statement declaration(GlobalDefs defs, SymbolTable symbols, Token id) : {
    String name;
    Expression expr;
    Statement stmt;
    Token t;
}
{
  name=declaration2(defs, symbols,id)
  ( ( t=<ASSIGN> expr=expression(defs,symbols)
        { return new Assignment(t,symbols.getSymbol(name), expr); } 
    )
  )?
  { return new Empty(); } 
}

/**
 * First part of variable declaration (without initialization).
 *
 * Adds a symbol to the symbol table and returns the name.
 */
String declaration1(GlobalDefs defs, SymbolTable symbols) : {
    String name;
    Type type;
}
{
  type=type(defs) name=ident()
      { symbols.declare(name,type);
       return name; 
      } 
}

/**
 * First part of variable declaration (without initialization),
 * where the parent production has consumed the type identifier token.
 *
 * Adds a symbol to the symbol table and returns the name.
 */
String declaration2(GlobalDefs defs, SymbolTable symbols, Token id) : {
    String name;
    Type type = defs.types.get(id.toString());
}
{
   /* type - consumed by parent */
   name=ident()
      { symbols.declare(name,type);
       return name; 
      } 
}

Type type(GlobalDefs defs) : {
	String type;
}
{
	type=ident()
	{
		return defs.types.get(type);
	}
}

/*
 * Set up an expectation for an exception
 */
Statement expect(GlobalDefs defs, SymbolTable symbols) : {
    String name;
    Token t;
}
{
    t=<EXPECT> <LPAREN> name=ident() <RPAREN>
    { return new Expect(t,name); }
}

/*
 * Assign a value to a variable
 */
Statement assignment(GlobalDefs defs, SymbolTable symbols, Token id) : {
    String name = id.toString();
    Expression expr;
    Token t;
}
{
    t=<ASSIGN> expr=expression(defs,symbols) 
    { return new Assignment(t,symbols.getSymbol(name),expr); }
}

/*
 * Assign a value to a field of an object
 */
Statement storeField(GlobalDefs defs, SymbolTable symbols, Token id) : {
    Symbol objectSym = symbols.getSymbol(id.toString());
    Expression index, rVal;
    Token fieldId;
}
{
  { checkSymbol(symbols,id); }
  <DOT> fieldId = <IDENTIFIER>
  ( <LBRACKET> index=expression(defs,symbols) <RBRACKET> 
    <ASSIGN> rVal=expression(defs,symbols) 
    { 	Type fieldType = defs.types.get(fieldId.toString());
    	return new StoreField(id, objectSym, fieldType, index, rVal); 
    }
  | <ASSIGN> rVal=expression(defs,symbols) 
    { 	String fieldName = fieldId.toString();
    	return new StoreNamedField(id, objectSym, fieldName, rVal); 
    }
  )
}

/**
 * Procedure call, as a statement
 */
Statement callMethod(GlobalDefs defs, SymbolTable symbols, Token id) : {
    String name = id.toString();
    List<Expression> params = new ArrayList<Expression>();
    Expression p;
}
{
  <LPAREN> 
  ( p=expression(defs,symbols)
      { params.add(p); }
    ( <COMMA> p=expression(defs,symbols)
      { params.add(p); }
    )*
  )?
  <RPAREN>
  { return new Call(id, new MethodProxy(defs.methods, name, params.size()), params, false); }
}

/**
 * Return a value from a method
 */
Statement returnStmt(GlobalDefs defs, SymbolTable symbols) : {
	Expression e;
	Token t;
}
{
	t=<RETURN> 
	( e=expression(defs,symbols) 
	  { return new Return(t, e); }
	)?
	{ return new Return(t); }
}

/*
 * Create a new thread
 */
Statement spawn(GlobalDefs defs, SymbolTable symbols) : {
    String name;
    List<Expression> params = new ArrayList<Expression>();
    Expression p;
    Token t;
}
{
  t=<SPAWN> <LPAREN> name=ident() 
  ( <COMMA> p=expression(defs,symbols)
    { params.add(p); }
  )*
  <RPAREN>
  { return new Spawn(t, defs.methods, name, params); }
}

Statement print(GlobalDefs defs, SymbolTable symbols) : {
    List<Expression> exprs = new ArrayList<Expression>();
    Expression expr;
    Token t;
}
{
  t=<PRINT> <LPAREN> expr=expression(defs,symbols)
    { exprs.add(expr); }
  ( <COMMA> expr=expression(defs,symbols)
    { exprs.add(expr); } )*
  <RPAREN>
  { return new PrintStatement(t, exprs); }
}

/*******************************************************************************
 *              Arithmetic expressions
 *
 *  Complicated slightly by the fact that we don't (currently) have a mechanism
 *  for enumerating temporaries at GC time.  Therefore, method calls as expressions
 *  can only occur at the top level of an expression.
 */
Expression expression(GlobalDefs defs, SymbolTable symbols) : {
    Expression e1,e2;
    Token t;
}
{
  e1=expr1(defs,symbols) 
  ( t=<SC_OR> e2=expression(defs,symbols)
      { return new BinaryExpression(t, e1, Operator.OR, e2); } |
    t=<SC_AND> e2=expression(defs,symbols)
      { return new BinaryExpression(t, e1, Operator.AND, e2); }
  )?    
  { return e1; }  
}

Expression expr1(GlobalDefs defs, SymbolTable symbols) : {
    Expression e;
    Token t;
}
{
  t=<BANG> e=expr1(defs,symbols)
  { return new UnaryExpression(t,Operator.NOT,e); } |
  t=<MINUS> e=expr1(defs,symbols) 
  { return new UnaryExpression(t,Operator.MINUS,e); } |
  e=expr2(defs,symbols) { return e; }
}

Expression expr2(GlobalDefs defs, SymbolTable symbols) : {
    Expression e1,e2;
    Token t;
}
{
  e1=expr3(defs,symbols) 
  ( t=<LT> e2=expr3(defs,symbols) 
      { return new BinaryExpression(t, e1,Operator.LT,e2); }
  | t=<GT> e2=expr3(defs,symbols) 
      { return new BinaryExpression(t, e1,Operator.GT,e2); }
  | t=<LE> e2=expr3(defs,symbols) 
      { return new BinaryExpression(t, e1,Operator.LE,e2); }
  | t=<GE> e2=expr3(defs,symbols) 
      { return new BinaryExpression(t, e1,Operator.GE,e2); }
  | t=<EQ> e2=expr3(defs,symbols) 
      { return new BinaryExpression(t, e1,Operator.EQ,e2); }
  | t=<NE> e2=expr3(defs,symbols) 
      { return new BinaryExpression(t, e1,Operator.NE,e2); }
  )?
  { return e1; }
}

Expression expr3(GlobalDefs defs, SymbolTable symbols) : {
    Expression e1,e2;
    Token t;
}
{
  e1=expr4(defs,symbols) 
  ( t=<PLUS> e2=expr3(defs,symbols) 
      { return new BinaryExpression(t, e1,Operator.PLUS,e2); }
  | t=<MINUS> e2=expr3(defs,symbols)
      { return new BinaryExpression(t, e1,Operator.MINUS,e2); }
  )?
  { return e1; }
}

Expression expr4(GlobalDefs defs, SymbolTable symbols) : {
    Expression e1,e2;
    Token t;
}
{
  e1=expr5(defs,symbols) 
  ( t=<STAR> e2=expr4(defs,symbols) 
      { return new BinaryExpression(t, e1, Operator.MULT, e2); }
  | t=<SLASH> e2=expr4(defs,symbols) 
      { return new BinaryExpression(t, e1, Operator.DIV, e2); } 
  | t=<REM> e2=expr4(defs,symbols) 
      { return new BinaryExpression(t, e1, Operator.REM, e2); }
  )? 
  { return e1; }
}

Expression expr5(GlobalDefs defs, SymbolTable symbols) : {
    Expression e, index;
    String id;
    Token t, field;
}
{
  /* constants of various types */
  e=constant() { return e; } |
  
  /* intrinsic functions */
  e=alloc(defs,symbols) { return e; } |
    
  /* An expression in parentheses */
  <LPAREN> e=expression(defs,symbols) <RPAREN>
    { return e; } |
    
  /* Field dereference */
  ( t=<IDENTIFIER> { id=t.toString(); }
  		(<DOT> field=<IDENTIFIER>
  		  { checkSymbol(symbols,t); }
  		  ( <LBRACKET> index=expression(defs,symbols) <RBRACKET>
              { 
              	Type type = defs.types.get(field.toString());
              	return new LoadField(t,symbols.getSymbol(id), type, index); 
              }
          | {
          	  String fieldName = field.toString();
          	  return new LoadNamedField(t,symbols.getSymbol(id), fieldName); 
            }
          )
        | e=callExpr(t,id,defs,symbols) { return e; } 
        )?
  
     /* Variable substitution */
     { 
       checkSymbol(symbols,t);
       return new Variable(t,symbols.getSymbol(id)); 
     }
  )
}

Expression constant() : {
    Token t;
} {
  /* Null constant */
  t=<NULL>
    { return new Constant(t, ObjectValue.NULL); }
    
  /* Integer constant */
  | t=<INTEGER_LITERAL>
    { return new Constant(t, IntValue.valueOf(Integer.valueOf(t.toString()))); }
    
  /* boolean constant */
  | t=<BOOLEAN_LITERAL>
    { return new Constant(t, BoolValue.valueOf(Boolean.valueOf(t.toString()))); }
    
  /* String constant */
  | t=<STRING_LITERAL>
    { 
    	String s = t.toString();
    	return new Constant(t, new StringValue(s.substring(1, s.length() - 1))); 
    }
}

/**
 * Procedure call, as an expression.
 *
 * Caller has matched the method name, which gets passed as the 'name' parameter.
 * 't' is the token of the method name (for error location).
 */
Expression callExpr(Token t, String name, GlobalDefs defs, SymbolTable symbols) : {
    List<Expression> params = new ArrayList<Expression>();
    Expression p;
}
{
  <LPAREN> 
  ( p=expression(defs,symbols)
      { params.add(p); }
    ( <COMMA> p=expression(defs,symbols)
      { params.add(p); }
    )*
  )?
  <RPAREN>
  { return new Call(t,new MethodProxy(defs.methods, name, params.size()), params, true); }
}


Expression alloc(GlobalDefs defs, SymbolTable symbols) : {
	Expression e,refCount,dataCount,doubleAlign = new Constant(BoolValue.FALSE);
	AllocationSite site;
	Token t;
	Type type;
}
{
  t=<ALLOC> { site = new AllocationSite(t); } <LPAREN> 
  ( refCount=expression(defs,symbols) <COMMA>
    dataCount=expression(defs,symbols)
    ( <COMMA> doubleAlign=expression(defs,symbols) )?
    <RPAREN>
    { return new Alloc(t, site.getId(), refCount, dataCount, doubleAlign); }
  |
    type=type(defs)
    <RPAREN>
    { return new AllocUserType(t, site.getId(), type); }
  )
}


/***************************************************************************
 *               Utility rules
 */

/*
 * Match an identifier and return it as a string
 */
String ident() : {
    Token t;
}
{
  t=<IDENTIFIER> { return t.toString(); }
}

/*
 * Match an integer literal and return it as an int
 */
int integer() : {
    Token t;
}
{
  t=<INTEGER_LITERAL> { return Integer.parseInt(t.toString()); }
}
/*
 * Match a boolean literal and return it as a boolean
 */
boolean bool() : {
    Token t;
}
{
  t=<BOOLEAN_LITERAL> { return Boolean.parseBoolean(t.toString()); }
}
/*
 * Match a string literal and return the contents as a string
 */
String string() : {
    Token t;
    String s;
}
{
  t=<STRING_LITERAL> { s = t.toString(); return s.substring(1, s.length() - 1); }
}
