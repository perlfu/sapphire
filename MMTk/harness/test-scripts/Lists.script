/*
 *  This file is part of the Jikes RVM project (http://jikesrvm.org).
 *
 *  This file is licensed to You under the Eclipse Public License (EPL);
 *  You may not use this file except in compliance with the License. You
 *  may obtain a copy of the License at
 *
 *      http://www.opensource.org/licenses/eclipse-1.0.php
 *
 *  See the COPYRIGHT.txt file distributed with this work for information
 *  regarding copyright ownership.
 */

option baseHeap "2560k";

/*
 * This script is designed to work-out the write barriers in a generational 
 * collector.
 *
 * Initially we create a series of doubly-linked lists of length 
 * 1,2,4,...,2^15, then iterate adding elements to the front and
 * dropping them off the end.  At steady state we should have the
 * list-heads in the mature space, the shorter lists entirely
 * in the nursery, and longer lists with the head in
 * the nursery and the tail in the mature space.
 */
 
/* A cell in a linked list */
type cell {
  cell next;
  cell prev;
}

/* A list head - points to the head and tail */
type list {
  cell head;
  cell tail;
}

/* A singly-linked list, so we can provide a chain of pointers stack -> nursery -> mature */
type single {
  single next;
}

void main() {
  int nLists = 15;
  int rotations = 10000;
  object lists = alloc(nLists,0,false);
  single s = alloc(single);
  
  // Create the lists
  int i=0;
  int n=1;
  while (i < nLists) {
    print( "Creating list of length ",n);
    lists.object[i] = create(n);
    i = i + 1;
    n = n * 2;
  }
  gc();
  
  // Rotate them
  print ("Rotating lists");
  int j = 0;
  int lastGcCount = gcCount();
  while (j < rotations) {
    i = 0;
    while (i < nLists) {
      rotate(lists.object[i]);
      i = i + 1;
    }
    //if ( (j%1000) == 0 ) {
    //  lengths(lists,nLists);
    //}
    int currentGcCount = gcCount();
    if (currentGcCount > lastGcCount) {
      single tail = s.next;
      // Mutate the singly-linked list so that in a generational collector its
      // head will be in the nursery, and it will finish with the 2nd last entry
      // in the mature space, and the last in the nursery.
      s.next = alloc(single);
      
      // Use the previous tail element to create a (garbage) list with a head in
      // the mature space and another element in the nursery.
      tail.next = alloc(single);
      
      lastGcCount = currentGcCount;
      tail = null;
    }
    s = cons(s);
    j = j + 1;
  }
}

/*
 * Create a list of length n
 */
list create(int n) {
  list result = alloc(list);
  while (n > 0) {
    insert(result);
    n = n - 1;
  }
  return result;
}

/*
 * Insert a cell at the head of a list 
 */
void insert(list l) {
  cell c = alloc(cell);
  if (l.head == null) {
    l.head = c;
    l.tail = c;
    return;
  }
  cell head = l.head;       // Language doesn't (yet) support x.y.z
  c.next = head;
  head.prev = c;
  l.head = c;
}

/*
 * Insert a cell at the head, and remove one from the tail
 * of a list
 */
void rotate(list l) {
  insert(l);
  cell tail = l.tail;
  cell prev = tail.prev;
  l.tail = prev;
  prev.next = null;         // Kill the last element
}

/*
 * Print the lengths of an array of lists
 */
void lengths(object lists, int n) {
  int i=0;
  while (i < n) {
	print("List has length ", length(lists.object[i]));
    i = i + 1;
  }
}

/*
 * Return the length of a list
 */
int length(list l) {
  if (l == null) {
    return 0;
  } elif (l.head == null) {
    return 0;
  }
  cell c = l.head;
  int n = 0;
  while (c != null) {
    c = c.next;
    n = n + 1;
  }
  return n;
}

/*
 * Prepend a singly-linked list cell onto a list 
 */
single cons(single l) {
  single result = alloc(single);
  result.next = l;
  return result;
}

