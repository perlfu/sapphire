/*
 *  This file is part of the Jikes RVM project (http://jikesrvm.org).
 *
 *  This file is licensed to You under the Eclipse Public License (EPL);
 *  You may not use this file except in compliance with the License. You
 *  may obtain a copy of the License at
 *
 *      http://www.opensource.org/licenses/eclipse-1.0.php
 *
 *  See the COPYRIGHT.txt file distributed with this work for information
 *  regarding copyright ownership.
 */
 
 option baseHeap "20m";
 option threads "8";

 /*
  * MMTk test script.  Allocate a large object holding pointers to objects of a wide
  * (random) sizes.  Keep 100 live objects, and keep the newest objects
  * live.
  *
  * Highly non-generational :)  Basic exercise of multi-class allocation.
  *
  * This is one of the few scripts where MS and associated collectors need almost
  * as large a heap as SS, because it maximizes fragmentation across size classes
  * and threads.  
  */
void main() {
  int i=0;
  while (i < 32) {
    spawn(thread);
    i = i + 1;
  }
}

void thread() {
  int n = 500;                  // Number of iterations
  int live = 35;                 // Number of live children
  int small = 5;                  // # scalars in the smallest object
  int large = 2500;               // # scalars in the largest object
  int i=0;
  
  barrierWait("begin",32);
  object parent = alloc(live, 0, false);       // Parent object with 'live' pointers
  while (gcCount() < 30) {             // loop for a while
    parent.object[i%live] = alloc(0, random(small,large), false);
    i = i + 1;                // loop counter
  }
  barrierWait("end",32);
}
