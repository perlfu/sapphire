/*
 *  This file is part of the Jikes RVM project (http://jikesrvm.org).
 *
 *  This file is licensed to You under the Eclipse Public License (EPL);
 *  You may not use this file except in compliance with the License. You
 *  may obtain a copy of the License at
 *
 *      http://www.opensource.org/licenses/eclipse-1.0.php
 *
 *  See the COPYRIGHT.txt file distributed with this work for information
 *  regarding copyright ownership.
 */

/*
 * Allocate a single object and collect.  Allocate a second one and collect.
 * Delete the second one, then the first one.
 *
 * Then do it in the reverse order.
 */
void main() {
  one_first();
  gc();
  one_second();
  gc();
}

void one_first() {
  object o_first = alloc(1,1);
  o_first.int[0] = 10101;
  gc();
  assert (o_first.int[0] == 10101, "Object payload mutated by GC");
  two();
  gc();
  assert (o_first.int[0] == 10101, "Object payload mutated by GC");
}

void one_second() {
  two();
  object o_second = alloc(1,1);
  o_second.int[0] = 20202;
  gc();
  assert (o_second.int[0] == 20202, "Object payload mutated by GC");
}

void two() {
  object o_two = alloc(2,2);
  o_two.int[0] = 30303;
  gc();
  assert (o_two.int[0] == 30303, "Object payload mutated by GC");
}

