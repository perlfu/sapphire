#!/bin/bash
#
#  This file is part of the Jikes RVM project (http://jikesrvm.org).
#
#  This file is licensed to You under the Eclipse Public License (EPL);
#  You may not use this file except in compliance with the License. You
#  may obtain a copy of the License at
#
#      http://www.opensource.org/licenses/eclipse-1.0.php
#
#  See the COPYRIGHT.txt file distributed with this work for information
#  regarding copyright ownership.

# Temporary script

TEST_DIR=MMTk/harness/test-scripts

plans="org.mmtk.plan.copyms.CopyMS org.mmtk.plan.generational.copying.GenCopy org.mmtk.plan.generational.immix.GenImmix org.mmtk.plan.generational.marksweep.GenMS org.mmtk.plan.immix.Immix org.mmtk.plan.markcompact.MC org.mmtk.plan.marksweep.MS org.mmtk.plan.poisoned.Poisoned org.mmtk.plan.refcount.fullheap.RC org.mmtk.plan.refcount.generational.GenRC org.mmtk.plan.semispace.SS org.mmtk.plan.stickyimmix.StickyImmix org.mmtk.plan.stickyms.StickyMS"

opts="variableSizeHeap=false"
#opts="$opts gcEvery=SAFEPOINT"

jvm_opts="-ea"
build=true
buildonly=false
clean=true
results=
stats=true

scripts="*"

while [ $# -gt 0 ]; do
  case "$1" in
    -plan) plans="$2"; shift;;
    -opts) opts="$opts $2"; shift;;
    -script) scripts="$2"; shift;;
    -nobuild) build=false;;
    -build) build=true;;
    -buildonly) buildonly=true;;
    -clean) clean=true;;
    -noclean) clean=false;;
    -results) results="$2/"; shift;;
    -stats) stats="true";;
    -nostats) stats="false";;
    *) echo "Unknown parameter $1"
       echo "Usage: $0 [-plan plan] [-opts harness-options]"
       echo "          [-script script1[,script2...]] "
       echo "          [-[no]build]                   [Don't] build MMTk Harness before running tests"
       echo "          [-[no]clean]                   [Don't] delete old results before running tests"
       echo "          [-buildonly]                   Build only, don't run any tests"
       echo "          [-nostats]                     Suppress listing pass/fail statistics after running tests"
       echo "          [-results]                     Results directory"
       exit 1;;
  esac
  shift
done

RESULTS=results/${results}mmtk

if [ $build = true ]; then
  ant clean compile-mmtk mmtk-harness
  if [ $buildonly = true ]; then
    exit 0;
  fi
fi
if [ $clean = true ]; then
  rm -rf $RESULTS
fi
mkdir -p $RESULTS

for plan in $plans
do
  showplan=`echo $plan | sed -e "s/.*\.//g"`
  mkdir -p ${RESULTS}/$showplan
  for script in `ls -1 $TEST_DIR/${scripts}.script`
  do
    showscript=`echo $script | sed -e "s/.*[\/]//g" | sed -e "s/\.script$//g"`
    if [ -f $TEST_DIR/$showscript.options ]; then
      scriptopts=$(cat  $TEST_DIR/$showscript.options)
    else
      scriptopts=
    fi
    (
      echo /opt/jdk1.6.0/bin/java ${jvm_opts} -jar target/mmtk/mmtk-harness.jar $script plan=$plan $opts $scriptopts;
      /opt/jdk1.6.0/bin/java ${jvm_opts} -jar target/mmtk/mmtk-harness.jar $script plan=$plan $opts $scriptopts
    ) &> ${RESULTS}/temp.out
    if [ $? == 0 ]
    then
      echo "PASSED: ${results%/} $showplan $showscript"
      mv ${RESULTS}/temp.out ${RESULTS}/$showplan/$showscript.out.pass
    else
      echo "FAILED: ${results%/} $showplan $showscript"
      mv ${RESULTS}/temp.out ${RESULTS}/$showplan/$showscript.out.fail
    fi
  done
done

if [ $stats = true ]; then
  passed=`find ${RESULTS} -name "*.pass" | wc -l`
  failed=`find ${RESULTS} -name "*.fail" | wc -l`

  echo
  echo "FAILURES:"
  find ${RESULTS} -name "*.fail" | sed -e "s/results\/mmtk\///g" -e "s/\.out\.fail$//g" -e "s/\// /g"
  echo
  echo "PASSED $passed/$[passed + failed] tests ($[(100 * passed) / (passed + failed)]%)"
fi
