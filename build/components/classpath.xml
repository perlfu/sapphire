<!--
 ~  This file is part of the Jikes RVM project (http://jikesrvm.org).
 ~
 ~  This file is licensed to You under the Common Public License (CPL);
 ~  You may not use this file except in compliance with the License. You
 ~  may obtain a copy of the License at
 ~
 ~      http://www.opensource.org/licenses/cpl1.0.php
 ~
 ~  See the COPYRIGHT.txt file distributed with this work for information
 ~  regarding copyright ownership.
 -->
<project name="classpath" default="build" basedir=".">

  <import file="base.xml"/>
  <property file="${components.file}"/>

  <!-- NOTE: when incrementing classpath version, check the patches -->
  <!-- in target patch-classpath-web                                -->
  <property name="classpath.version" value="97.2"/>
  <!-- Change this whenever you alter the patches. It will let people know classpath has changed. -->
  <property name="classpath.patchlevel" value="7"/>
  <property name="classpath.description" value="GNU Classpath"/>

  <property name="classpath.component.dir" location="${components.dir}/classpath"/>
  <property name="classpath.package.dir" value="${classpath.component.dir}/${classpath.version}p${classpath.patchlevel}"/>
  <property name="classpath.dir" value="${classpath.package.dir}/classpath"/>

  <!-- **************************************************************************** -->
  <!-- *                                                                          * -->
  <!-- *               Downloading and installing Classpath component             * -->
  <!-- *                                                                          * -->
  <!-- **************************************************************************** -->

  <!-- init properties for downloading classpath from cvs or from web -->
  <target name="init-classpath-properties" depends="prepare-ant-tasks">
    <condition property="classpath.from-web" value="true">
      <and>
        <not>
          <isset property="classpath.from-cvs"/>
        </not>
        <not>
          <isset property="classpath.from-web"/>
        </not>
        <or>
          <not>
            <available file="${classpath.package.dir}/classpath/README"/>
          </not>
          <isset property="classpath.force-download"/>
        </or>
      </and>
    </condition>
  </target>

  <!-- download classpath from cvs -->
  <target name="get-classpath-from-cvs" depends="init-classpath-properties" if="classpath.from-cvs">
    <property name="classpath.tag" value="0_${classpath.version}-release"/>
    <test-file name="cvs.exe" location="${host.file}"/>
    <mkdir dir="${classpath.package.dir}"/>
    <delete dir="${classpath.package.dir}/classpath"/>
    <exec executable="${cvs.exe}" failonerror="true" dir="${classpath.package.dir}">
      <arg value="-q"/>
      <arg value="-z3"/>
      <arg value="-d:pserver:anonymous@cvs.savannah.gnu.org:/sources/classpath"/>
      <arg value="co"/>
      <arg value="classpath"/>
    </exec>
    <exec executable="${classpath.dir}/autogen.sh" failonerror="true" dir="${classpath.dir}"/>
  </target>

  <!-- download classpath from web -->
  <target name="get-classpath-from-web" depends="init-classpath-properties" if="classpath.from-web">
    <test-file name="tar.exe" location="${host.file}"/>
    <if>
      <conditions>
        <or>
          <equals arg1="${classpath.version}" arg2="93"/>
        </or>
      </conditions>
      <sequential>
        <property name="generics-extension" value="-generics"/>
      </sequential>
    </if>
    <property name="generics-extension" value=""/>

    <property name="classpath.web-archive" value="classpath-0.${classpath.version}${generics-extension}.tar.gz"/>
    <mkdir dir="${classpath.package.dir}"/>
    <cachedGet key="${classpath.web-archive}"
         src="ftp://ftp.gnu.org/gnu/classpath/${classpath.web-archive}"
         dest="${classpath.package.dir}/${classpath.web-archive}"/>
    <!-- use tar.exe so can maintain executable bits on appropriate files. Could use untar+chmod task for same but it was annoying -->
    <exec executable="${tar.exe}" failonerror="true" dir="${classpath.package.dir}">
      <arg value="xzf"/>
      <arg value="${classpath.web-archive}"/>
    </exec>
    <move file="${classpath.package.dir}/classpath-0.${classpath.version}${generics-extension}"
          tofile="${classpath.package.dir}/classpath"/>
  </target>

  <target name="fetch" depends="get-classpath-from-web,get-classpath-from-cvs"/>

  <!-- *************************************************************************** -->
  <!--                        patch classpath                                      -->
  <!-- In general these are patches to issues reported to classpath but not yet    -->
  <!-- committed (patches against CVS head) or in a stable release (against 'web') -->
  <!-- please maintain separate patches for cvs head and stable versions           -->
  <!-- of classpath, even if the patch is identical                                -->
  <!-- *************************************************************************** -->

  <!-- Patches against CVS head -->
  <target name="patch-classpath-cvs" depends="fetch" if="classpath.from-cvs">
    <patch patchfile="${components.patch.dir}/classpath-cvs.RVM-443.patch"
           dir="${classpath.package.dir}/classpath/" strip="0"/>
    <patch patchfile="${components.patch.dir}/classpath-cvs.RVM-644.patch"
           dir="${classpath.package.dir}/classpath/" strip="0"/>
  </target>

  <!-- Patches against the current stable version -->
  <target name="patch-classpath-web" depends="fetch" if="classpath.from-web">
    <patch patchfile="${components.patch.dir}/classpath-web.RVM-185.patch"
           dir="${classpath.package.dir}/classpath/" strip="0"/>
    <patch patchfile="${components.patch.dir}/classpath-web.RVM-266-01.patch"
           dir="${classpath.package.dir}/classpath/" strip="0"/>
    <patch patchfile="${components.patch.dir}/classpath-web.RVM-266-02.patch"
           dir="${classpath.package.dir}/classpath/" strip="0"/>
    <patch patchfile="${components.patch.dir}/classpath-web.RVM-266-03.patch"
           dir="${classpath.package.dir}/classpath/" strip="0"/>
    <patch patchfile="${components.patch.dir}/classpath-web.RVM-266-04.patch"
           dir="${classpath.package.dir}/classpath/" strip="0"/>
    <patch patchfile="${components.patch.dir}/classpath-web.RVM-266-05.patch"
           dir="${classpath.package.dir}/classpath/" strip="0"/>
    <patch patchfile="${components.patch.dir}/classpath-web.RVM-266-06.patch"
           dir="${classpath.package.dir}/classpath/" strip="0"/>
    <patch patchfile="${components.patch.dir}/classpath-web.RVM-266-07.patch"
           dir="${classpath.package.dir}/classpath/" strip="0"/>
    <patch patchfile="${components.patch.dir}/classpath-web.RVM-266-08.patch"
           dir="${classpath.package.dir}/classpath/" strip="0"/>
    <patch patchfile="${components.patch.dir}/classpath-web.RVM-266-09.patch"
           dir="${classpath.package.dir}/classpath/" strip="0"/>
    <patch patchfile="${components.patch.dir}/classpath-web.RVM-266-10.patch"
           dir="${classpath.package.dir}/classpath/" strip="0"/>
    <patch patchfile="${components.patch.dir}/classpath-web.RVM-385-01.patch"
           dir="${classpath.package.dir}/classpath/" strip="0"/>
    <patch patchfile="${components.patch.dir}/classpath-web.RVM-385-02.patch"
           dir="${classpath.package.dir}/classpath/" strip="0"/>
    <patch patchfile="${components.patch.dir}/classpath-web.RVM-385-03.patch"
           dir="${classpath.package.dir}/classpath/" strip="0"/>
    <patch patchfile="${components.patch.dir}/classpath-web.RVM-385-04.patch"
           dir="${classpath.package.dir}/classpath/" strip="0"/>
    <patch patchfile="${components.patch.dir}/classpath-web.RVM-392.patch"
           dir="${classpath.package.dir}/classpath/" strip="0"/>
    <patch patchfile="${components.patch.dir}/classpath-web.RVM-433.patch"
           dir="${classpath.package.dir}/classpath/" strip="0"/>
    <patch patchfile="${components.patch.dir}/classpath-web.RVM-437.patch"
           dir="${classpath.package.dir}/classpath/" strip="0"/>
    <patch patchfile="${components.patch.dir}/classpath-web.RVM-451.patch"
           dir="${classpath.package.dir}/classpath/" strip="0"/>
    <patch patchfile="${components.patch.dir}/classpath-web.RVM-526.patch"
           dir="${classpath.package.dir}/classpath/" strip="0"/>
    <patch patchfile="${components.patch.dir}/classpath-web.RVM-490-01.patch"
           dir="${classpath.package.dir}/classpath/" strip="0"/>
    <patch patchfile="${components.patch.dir}/classpath-web.RVM-490-02.patch"
           dir="${classpath.package.dir}/classpath/" strip="0"/>
    <patch patchfile="${components.patch.dir}/classpath-web.RVM-490-03.patch"
           dir="${classpath.package.dir}/classpath/" strip="0"/>
    <patch patchfile="${components.patch.dir}/classpath-web.RVM-490-04.patch"
           dir="${classpath.package.dir}/classpath/" strip="0"/>
    <patch patchfile="${components.patch.dir}/classpath-web.RVM-443.patch"
           dir="${classpath.package.dir}/classpath/" strip="0"/>
    <patch patchfile="${components.patch.dir}/classpath-web.RVM-644.patch"
           dir="${classpath.package.dir}/classpath/" strip="0"/>
  </target>
  <target name="patch" depends="patch-classpath-web,patch-classpath-cvs"/>

  <!-- build classpath in classpath.dir -->
  <target name="build" depends="fetch,patch" description="Download Classpath and build.">
    <test-file name="make.exe" location="${host.file}"/>

    <condition property="cp.enable.gtk-peer" value=" --enable-gtk-peer" else=" --disable-gtk-peer">
      <and>
        <not>
          <or>
            <equals arg1="${target.os}" arg2="Solaris"/> 
            <equals arg1="${target.os}" arg2="AIX"/>
            <equals arg1="${target.name}" arg2="ppc64-linux"/>
            <equals arg1="${target.name}" arg2="x86_64-linux"/>
          </or>
        </not>
        <or>
          <available file="/usr/include/gtk-2.0/gtk/gtk.h"/>
          <available file="/opt/gnome/include/gtk-2.0/gtk/gtk.h"/>
        </or>
      </and>
    </condition>

    <condition property="cp.enable.portable-native-sync" value=" --enable-portable-native-sync" else="">
      <equals arg1="${config.portable-native-sync}" arg2="true"/>
    </condition>

    <condition property="cp.disable.alsa" value=" --disable-alsa" else="">
      <equals arg1="${target.name}" arg2="x86_64-linux"/>
    </condition>

    <condition property="cp.cppflags" value=" CPPFLAGS='-D_POSIX_SOURCE -D_ALL_SOURCE -D_LINUX_SOURCE_COMPAT'" else="">
      <equals arg1="${target.os}" arg2="AIX"/>
    </condition>

    <!-- horrible hackery to get assembler object mode set properly on AIX.
         implicit here is the assumption that only AIX as/ld actually look at the
         value of OBJECT_MODE environment variable, so we can set it to 32 by default
         and non-AIX platforms won't care. -->
    <condition property="cp.objectmode" value="32_64" else="32">
        <equals arg1="${target.name}" arg2="ppc64-aix"/>
    </condition>

    <if>
      <conditions>
        <available file="${classpath.dir}/Makefile"/>
      </conditions>
      <sequential>
        <exec executable="${make.exe}" failonerror="true" dir="${classpath.dir}">
           <arg value="distclean"/>
        </exec>
      </sequential>
    </if>

    <property environment="env"/>
    <exec executable="${classpath.dir}/configure" failonerror="true" dir="${classpath.dir}">
      <!-- need to pass thru compiler settings so if we are building on
      64 bit system the libraries are created appropriately -->
      <env key="CXX" value="${c++.exe} ${c++.args}"/>
      <env key="CC" value="${c.exe} ${c.args}"/>
      <env key="OBJECT_MODE" value="${cp.objectmode}" />
      <env key="JAVAC" value="${components.dir}/ecj/3.2/ecj-3.2/ecj" />
      <arg value="--enable-jni"/>
      <arg value="--disable-plugin"/>
      <arg value="--disable-gconf-peer"/>
      <arg line="${cp.enable.gtk-peer}${cp.enable.portable-native-sync}${cp.disable.alsa}${cp.cppflags}"/>
    </exec>
    <exec executable="${make.exe}" failonerror="true" dir="${classpath.dir}">
      <env key="OBJECT_MODE" value="${cp.objectmode}" />
    </exec>

    <mkdir dir="${classpath.package.dir}/${target.name}/lib"/>
    <jar file="${classpath.package.dir}/${target.name}/lib/src.jar" basedir="${classpath.dir}">
      <include name="java/**/*.java"/>
      <include name="javax/**/*.java"/>
      <include name="gnu/**/*.java"/>
    </jar>
    <copy file="${classpath.dir}/lib/glibj.zip" tofile="${classpath.package.dir}/${target.name}/lib/classpath.jar"/>

    <condition property="library.suffix" value=".so">
      <equals arg1="${target.os}" arg2="Linux"/>
    </condition>
    <condition property="library.suffix" value=".so.0">
      <equals arg1="${target.os}" arg2="AIX"/>
    </condition>
    <condition property="library.suffix" value=".dylib">
      <equals arg1="${target.os}" arg2="OSX"/>
    </condition>
    <condition property="library.suffix" value=".so">
      <equals arg1="${target.os}" arg2="Solaris"/>
    </condition>

    <copy todir="${classpath.package.dir}/${target.name}/lib" flatten="true">
      <regexpmapper from="^(.*${file.separator})lib([^${file.separator}]+)${library.suffix}$$"
                    to="${target.dll-prefix}\2${target.jni-suffix}"/>
      <fileset dir="${classpath.dir}">
        <include name="native/jni/**/.libs/*${library.suffix}"/>
        <include name="native/jawt/.libs/*${library.suffix}"/>
      </fileset>
    </copy>
    <writeComponentConstants dir="${classpath.package.dir}/${target.name}/lib"/>
    <setComponentsConfig key="${target.name}.classpath.lib.dir" value="${classpath.package.dir}/${target.name}/lib"/>
  </target>

  <target name="ensure" depends="prepare-ant-tasks">
    <ensureUptodate name="classpath" dir="${classpath.package.dir}/${target.name}/lib"/>
  </target>

</project>
