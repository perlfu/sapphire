# See classpath-web.RVM-1047.patch for detailed information about the patch.
# This patch is almost identical with classpath-web.RVM-1047.patch. The differences are:
# 1. Commented-out lines have been removed.
# 2. The formatting was changed so that the patch applies cleanly against Classpath head.
# 3. All Tabs were replaced with spaces.
show_bug.cgi?id=32809 .
--- java/util/Formatter.java	2011-09-27 14:15:42.092030742 +0200
+++ java/util/Formatter.java	2013-07-18 16:16:42.744562532 +0200
@@ -51,6 +51,8 @@
 import java.io.PrintStream;
 import java.io.UnsupportedEncodingException;
 import java.math.BigInteger;
+import java.math.BigDecimal;
+import java.math.MathContext;
 import java.text.DateFormatSymbols;
 import java.text.DecimalFormatSymbols;
 
@@ -926,6 +928,58 @@
     genericFormat(builder.toString(), flags, width, precision);
   }

+  private void floatingDecimalConversion(Object arg, int flags, int width, 
+    int precision, char conversion) 
+    throws IOException {
+    
+    BigDecimal bd;
+    if (arg instanceof BigDecimal) {
+      bd = (BigDecimal) arg;
+    } else if(arg instanceof Number){
+      bd = new BigDecimal(((Number)arg).doubleValue());
+    } else
+      throw new IllegalFormatConversionException(conversion, arg.getClass());
+
+
+    if (precision < 0) precision = 6;
+    bd = bd.setScale(precision, BigDecimal.ROUND_HALF_UP);
+
+    CPStringBuilder builder = new CPStringBuilder(bd.toString());
+
+    int insertPoint = 0;
+    int resultWidth = builder.length();
+    if (resultWidth < width)
+      {
+        char fill = ((flags & FormattableFlags.ZERO) != 0) ? '0' : ' ';
+        if ((flags & FormattableFlags.LEFT_JUSTIFY) != 0)
+          {
+            // Left justify.  
+            if (fill == ' ')
+              insertPoint = builder.length();
+          }
+        else
+          {
+            // Right justify.  Insert spaces before the radix prefix
+            // and sign.
+            insertPoint = 0;
+          }
+        while (resultWidth++ < width)
+          builder.insert(insertPoint, fill);
+      }
+
+    String result = builder.toString();
+    if ((flags & FormattableFlags.UPPERCASE) != 0)
+      {
+        if (fmtLocale == null)
+          result = result.toUpperCase();
+        else
+          result = result.toUpperCase(fmtLocale);
+      }
+
+    out.append(result);
+  }
+
+
   /**
    * Emit a single date or time conversion to a StringBuilder.
    *
@@ -1408,7 +1462,7 @@
                 // scientificNotationConversion();
                 break;
               case 'f':
-                // floatingDecimalConversion();
+                floatingDecimalConversion(argument, flags, width, precision, origConversion);
                 break;
               case 'g':
                 // smartFloatingConversion();
