<!--
common build component for setting up and checking propertys.
 jikesrvm.dir MUST be set to base directory before importing project.  
-->
<project name="propertys">

  <property name="config.file" location="${jikesrvm.dir}/build/configs/${config.name}.properties"/>
  <property name="target.file" location="${jikesrvm.dir}/build/targets/${target.name}.properties"/>
  <property name="components.file" location="${components.dir}/components.properties"/>

  <!-- configuration data -->
  <property file="${config.file}"/>
  <property file="${components.file}"/>
  <property file="${target.file}"/>

  <!-- default configuration values. May have already been set by above tasks -->
  <property file="${jikesrvm.dir}/build/configs/config.properties.defaults"/>

  <condition property="build.name" value="${config.name}_${target.name}" else="${config.name}_${target.name}_${patch.name}">
    <equals arg1="${patch.name}" arg2=""/>
  </condition>

  <!-- **************************************************************************** -->
  <!-- *                                                                          * -->
  <!-- *             Property initialization section of the build                 * -->
  <!-- *                                                                          * -->
  <!-- **************************************************************************** -->

  <target name="check-config-properties">
    <fail unless="config.name">
      config.name property not specified. Please specify property on commandline or in ${jikesrvm.dir}/.ant.properties.
    </fail>
    <available property="host_config_present" file="${config.file}"/>
    <fail unless="host_config_present">
      Configuration file ${config.file} not present. Please set config.name to the name of file in ${jikesrvm.dir}/build/configs directory without the .properties suffix.
    </fail>
    <test-property name="config.mmtk.plan" location="${config.file}"/>
    <condition property="is.svp" value="true">
      <equals arg1="${config.single.virtual.processor}" arg2="1"/>
    </condition>
  </target>

  <target name="check-target-properties">
    <available property="target_config_present" file="${target.file}"/>
    <fail unless="target_config_present">
      Target file ${target.file} not present. Please set target.name to the name of file in ${jikesrvm.dir}/build/targets directory without the .properties suffix.
    </fail>
    <test-property name="target.arch" location="${target.file}"/>
    <test-property name="target.os" location="${target.file}"/>
    <test-property name="target.bootimage.code.address" location="${target.file}"/>
    <test-property name="target.bootimage.data.address" location="${target.file}"/>
    <test-property name="target.bootimage.rmap.address" location="${target.file}"/>
    <test-property name="target.max-mappable.address" location="${target.file}"/>
    <test-property name="target.address.size" location="${target.file}"/>
    <test-property name="target.dll-prefix" location="${target.file}"/>
    <test-property name="target.dll-ext" location="${target.file}"/>
  </target>

  <target name="check-host-properties"  depends="check-host-name">
    <available property="host_file_present" file="${host.file}"/>
    <fail unless="host_file_present">
      Host file ${host.file} not present. Please set host.name to the name of file in ${jikesrvm.dir}/build/hosts directory without the .properties suffix.
    </fail>
    <test-file name="bison.exe" location="${host.file}"/>
    <test-file name="c++.exe" location="${host.file}"/>
    <test-file name="c.exe" location="${host.file}"/>
    <test-file name="perl.exe" location="${host.file}"/>
    <test-file name="bash.exe" location="${host.file}"/>
    <test-property name="c++.args" location="${host.file}"/>
    <test-property name="c.args" location="${host.file}"/>
    <test-property name="shld.args" location="${host.file}"/>
  </target>

  <target name="check-components-properties">
    <available property="components_file_present" file="${components.file}"/>
    <fail unless="components_file_present">
      Components file ${components.file} not present. Please create ${components.file} and edit.
    </fail>
  </target>

  <target name="check-classpath-properties" depends="check-components-properties">
    <propertycopy name="classpath.lib.dir" from="${target.name}.classpath.lib.dir"/>
    <property name="classpath.error"
              value="The user can invoke build-classpath target to download and build classpath from CVS or from the web."/>
    <test-file name="classpath.lib.dir" location="${components.file}" msg="${classpath.error}"/>
    <property file="${classpath.lib.dir}/constants.properties"/>
  </target>

  <target name="include-gcspy-check" depends="check-components-properties">
    <condition property="include.gcspy" value="1">
      <equals arg1="${config.include.gcspy}" arg2="1"/>
    </condition>
    <condition property="include.gcspy-client" value="1">
      <and>
        <equals arg1="${config.include.gcspy}" arg2="1"/>
        <equals arg1="${config.include.gcspy-client}" arg2="1"/>
      </and>
    </condition>

    <condition property="gcspy-and-svp" value="1">
      <and>
        <isset property="include.gcspy"/>
        <isset property="is.svp"/>
      </and>
    </condition>
    <fail if="gcspy-and-svp">GCSpy can not be combined with a single virtual processor.</fail>
  </target>

  <target name="check-gcspy-client-properties" depends="include-gcspy-check,check-config-properties" if="include.gcspy-client">
    <propertycopy name="gcspy.client.dir" from="${target.name}.gcspy.client.dir"/>
    <property name="gcspy.client.error"
              value="The user can invoke build-gcspy target to download and build gcspy from the web."/>
    <test-file name="gcspy.client.dir" msg="${gcspy.client.error}" location="${components.file}"/>
  </target>

  <target name="check-gcspy-properties" depends="check-gcspy-client-properties" if="include.gcspy">
    <propertycopy name="gcspy.server.dir" from="${target.name}.gcspy.server.dir"/>
    <property name="gcspy.server.error"
              value="The user can invoke build-gcspy target to download and build gcspy from the web."/>
    <test-file name="gcspy.server.dir" msg="${gcspy.server.error}" location="${components.file}"/>
    <property file="${gcspy.server.dir}/constants.properties"/>
  </target>

  <!--
Check to make sure all required properties are specified. This includes properties that define the:
 * host environment
 * target platform
 * configuration settings
 * component properties for classpath, gcspy etc.
  -->
  <target name="check-properties"
          depends="check-host-properties,check-config-properties,check-target-properties,check-classpath-properties,check-gcspy-properties"
          description="Check that all require properties are specified.">

    <!-- setup properties for start of build. -->
    <tstamp prefix="start">
      <format property="time" pattern="DD MMMM yyyy HH:mm"/>
    </tstamp>

    <!-- set include.* properties if corresponding feature is in use. Properties used by if/unless guards. -->
    <condition property="include.all" value="true">
      <equals arg1="${config.include.all-classes}" arg2="1"/>
    </condition>
    <condition property="include.opt" value="true">
      <equals arg1="${config.runtime.compiler}" arg2="opt"/>
    </condition>
    <condition property="include.aos" value="true">
      <and>
        <equals arg1="${config.include.aos}" arg2="1"/>
        <equals arg1="${config.runtime.compiler}" arg2="opt"/>
      </and>
    </condition>
  </target>

</project>