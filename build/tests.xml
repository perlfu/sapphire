<!--
 ~  This file is part of the Jikes RVM project (http://jikesrvm.org).
 ~
 ~  This file is licensed to You under the Common Public License (CPL);
 ~  You may not use this file except in compliance with the License. You
 ~  may obtain a copy of the License at
 ~
 ~      http://www.opensource.org/licenses/cpl1.0.php
 ~
 ~  See the COPYRIGHT.txt file distributed with this work for information
 ~  regarding copyright ownership.
 -->
<project name="tests">

  <property name="jikesrvm.dir" location="${basedir}/../../.."/>
  <!-- configuration data -->
  <property file="${test.rvm.dir}/constants.properties"/>
  <if>
    <conditions>
      <isset property="test-run.file"/>
    </conditions>
    <sequential>
      <property file="${test-run.file}"/>
    </sequential>
  </if>

  <import file="${jikesrvm.dir}/build/base.xml"/>
  <import file="${jikesrvm.dir}/build/tasks.xml"/>

  <property name="rvm.exe" location="${test.rvm.dir}/rvm"/>
  <property name="timedrun.exe" location="${jikesrvm.dir}/bin/timedrun"/>
  <property name="extractmmtkstats.exe" location="${jikesrvm.dir}/bin/extractmmtkstats"/>

  <!-- Default values -->
  <property name="test.mode" value=""/>
  <property name="test.time.limit" value="1000"/>
  <property name="test.rvm.extra.args" value=""/>
  <property name="test.processors" value="all"/>
  <property name="test.max.opt.level" value=""/>
  <property name="test.initial.heapsize" value="${config.default-heapsize.initial}"/>
  <property name="test.max.heapsize" value="${config.default-heapsize.maximum}"/>

  <property name="output.dir" location="${test.results.dir}/${test.group.name}"/>
  <property name="build.tests.dir" location="${test.build.dir}/${test.group.name}"/>

  <property name="results.file" value="${output.dir}/Results.xml"/>

  <!-- **************************************************************************** -->
  <!-- *                                                                          * -->
  <!-- *                         Macros for outputting results                    * -->
  <!-- *                                                                          * -->
  <!-- **************************************************************************** -->

  <presetdef name="res">
    <echo file="${results.file}" append="true"/>
  </presetdef>

  <macrodef name="startResults">
    <sequential>
      <res append="false"><![CDATA[<group>
<name>${test.group.name}</name>]]></res>
    </sequential>
  </macrodef>

  <macrodef name="finishResults">
    <sequential>
      <res><![CDATA[
</group>]]></res>
    </sequential>
  </macrodef>

  <!-- Macro  to output results to results file and echo summary to stdout -->
  <macrodef name="outputResults">
    <attribute name="tag"/>
    <sequential>
      <outputTestStart tag="@{tag}"/>
      <outputTestResults tag="@{tag}"/>
      <outputTestEnd/>
      <displayTestResults tag="@{tag}"/>
    </sequential>
  </macrodef>

  <!-- Macro  to output results with single statistic output -->
  <macrodef name="outputSingleStatisticResults">
    <attribute name="tag"/>
    <attribute name="key"/>
    <attribute name="pattern"/>
    <sequential>
      <outputTestStart tag="@{tag}"/>
      <outputStatisticStart/>
      <extractStatistic tag="@{tag}" key="@{key}" pattern="@{pattern}"/>
      <outputStatisticEnd/>
      <outputTestResults tag="@{tag}"/>
      <outputTestEnd/>
      <displayTestResults tag="@{tag}"/>
    </sequential>
  </macrodef>

  <!-- Macro outputting the start of test. Uses propertys set by rvm macro. See rvm macro for details -->
  <macrodef name="outputTestStart">
    <attribute name="tag"/>
    <sequential>
      <outputMultiExecutionTestStart tag="@{tag}"/>
      <outputExecutionStart tag="@{tag}" execution="default"/>
    </sequential>
  </macrodef>

  <macrodef name="outputMultiExecutionTestStart">
    <attribute name="tag"/>
    <sequential>
      <res><![CDATA[
<test>
<name>@{tag}</name>
<command><![CDATA[cd ${test.@{tag}.dir} &amp;&amp; ${test.@{tag}.command}]]]]><![CDATA[></command>
<parameters>
<parameter key='initial.heapsize' value='${test.@{tag}.initial.heapsize}'/>
<parameter key='max.heapsize' value='${test.@{tag}.max.heapsize}'/>
<parameter key='time.limit' value='${test.@{tag}.time.limit}'/>
<parameter key='extra.args' value='${test.@{tag}.extra.args}'/>
<parameter key='processors' value='${test.@{tag}.processors}'/>
<parameter key='max.opt.level' value='${test.@{tag}.max.opt.level}'/>
</parameters>
]]></res>
    </sequential>
  </macrodef>

  <macrodef name="outputExecutionStart">
    <attribute name="tag"/>
    <attribute name="execution"/>
    <sequential>
      <res><![CDATA[<test-execution><name>@{execution}</name>]]></res>
    </sequential>
  </macrodef>

  <macrodef name="outputStatistic">
    <attribute name="key"/>
    <attribute name="value"/>
    <sequential>
      <res><![CDATA[
<statistic key="@{key}" value="@{value}"/>]]></res>
    </sequential>
  </macrodef>

  <macrodef name="outputStatisticStart">
    <sequential>
      <res><![CDATA[
<statistics>]]></res>
    </sequential>
  </macrodef>

  <macrodef name="outputStatisticEnd">
    <sequential>
      <res><![CDATA[
</statistics>]]></res>
    </sequential>
  </macrodef>

  <!--
      Macro to extract a statist from sanitized output file. If it the pattern does not match then
      result is set to failure and explained. If pattern matches then property test.@{tag}.statistic.@{key}
      is set to value of match. Finally the statistic is output to results.
  -->
  <macrodef name="extractStatistic">
    <attribute name="tag"/>
    <attribute name="execution" default="default"/>
    <attribute name="pattern"/>
    <attribute name="key"/>
    <attribute name="select" default="\1"/>
    <attribute name="file" default=""/>
    <sequential>
      <findStatistic tag="@{tag}" execution="@{execution}" pattern="@{pattern}" key="@{key}" select="@{select}" file="@{file}"/>
      <!-- set property if it has not been set -->
      <property name="test.@{tag}.@{execution}.statistic.@{key}" value=""/>
      <outputStatistic key="@{key}" value="${test.@{tag}.@{execution}.statistic.@{key}}"/>
    </sequential>
  </macrodef>

  <!--
      Macro to extract MMTk statistics from a log file. The statistics to extract is a space delimited string.
  -->
  <macrodef name="extractMMTkStatistics">
    <attribute name="tag"/>
    <attribute name="execution" default="default"/>
    <attribute name="statistics"/>
    <sequential>
      <exec executable="${extractmmtkstats.exe}" failonerror="false" resultproperty="test.@{tag}.@{execution}.mmtkstats.exit.code">
        <arg value="${test.@{tag}.@{execution}.sanitized.output.file}"/>
        <arg value="${results.file}"/>
        <arg line="@{statistics}"/>
      </exec>
      <condition property="test.@{tag}.@{execution}.result" value="FAILURE">
        <not>
          <equals arg1="${test.@{tag}.@{execution}.mmtkstats.exit.code}" arg2="0"/>
        </not>
      </condition>
      <explainResult tag="@{tag}" execution="@{execution}" message="Could not extract MMTk statistics."/>
    </sequential>
  </macrodef>

  <!--
      Macro to look for pattern in file and fail if unable to find pattern.
  -->
  <macrodef name="findStatistic">
    <attribute name="tag"/>
    <attribute name="execution" default="default"/>
    <attribute name="pattern"/>
    <attribute name="key"/>
    <attribute name="select" default="\0"/>
    <attribute name="file" default=""/>
    <sequential>
      <condition property="test.@{tag}.@{execution}.@{key}.input.file"
                 value="${test.@{tag}.@{execution}.sanitized.output.file}"
                 else="@{file}">
        <equals arg1="@{file}" arg2=""/>
      </condition>
      <selectRegex property="test.@{tag}.@{execution}.statistic.@{key}"
                   select="@{select}"
                   file="${test.@{tag}.@{execution}.@{key}.input.file}"
                   pattern="@{pattern}"/>
      <condition property="test.@{tag}.@{execution}.result" value="FAILURE">
        <not>
          <isset property="test.@{tag}.@{execution}.statistic.@{key}"/>
        </not>
      </condition>
      <explainResult tag="@{tag}" execution="@{execution}" message="Failed to extract @{key} using pattern @{pattern}"/>
    </sequential>
  </macrodef>

  <macrodef name="outputTestResults">
    <attribute name="tag"/>
    <sequential>
      <outputExecutionResults tag="@{tag}" execution="default"/>
    </sequential>
  </macrodef>

  <macrodef name="outputExecutionResults">
    <attribute name="tag"/>
    <attribute name="execution"/>
    <sequential>
      <!-- set results to success if not already set fo failure -->
      <property name="test.@{tag}.@{execution}.result" value="SUCCESS"/>
      <property name="test.@{tag}.@{execution}.result.explanation" value=""/>
      <res><![CDATA[
<exit-code>${test.@{tag}.@{execution}.exit.code}</exit-code>
<duration>${test.@{tag}.@{execution}.time.duration}</duration>
<result>${test.@{tag}.@{execution}.result}</result>
<result-explanation>${test.@{tag}.@{execution}.result.explanation}</result-explanation>]]></res>
      <res><![CDATA[
<output><]]>![CDATA[</res>
      <toAscii src="${test.@{tag}.@{execution}.output.file}" dest="${build.tests.dir}/deleteme.txt"/>
      <!-- truncate output to 500K -->
      <truncate file="${build.tests.dir}/deleteme.txt" size="502000"/>
      <replace file="${build.tests.dir}/deleteme.txt" token="]]&gt;" value="]]&gt;]]&lt;![CDATA[&gt;"/>
      <concat destfile="${results.file}" append="true">
        <path path="${build.tests.dir}/deleteme.txt"/>
      </concat>
      <res>]]<![CDATA[></output>]]></res>
    </sequential>
  </macrodef>

  <macrodef name="outputTestEnd">
    <sequential>
      <outputExecutionEnd/>
      <outputMultiExecutionTestEnd/>
    </sequential>
  </macrodef>

  <macrodef name="outputMultiExecutionTestEnd">
    <sequential>
      <res><![CDATA[
</test>]]></res>
    </sequential>
  </macrodef>

  <macrodef name="outputExecutionEnd">
    <sequential>
      <res><![CDATA[
</test-execution>]]></res>
    </sequential>
  </macrodef>

  <macrodef name="displayTestResults">
    <attribute name="tag"/>
    <sequential>
      <displayExecutionResults tag="@{tag}" execution="default"/>
    </sequential>
  </macrodef>

  <macrodef name="displayExecutionResults">
    <attribute name="tag"/>
    <attribute name="execution"/>
    <sequential>
      <echo message="Test Result for [${config.name}|${test.group.name}] @{tag} (@{execution}) : ${test.@{tag}.@{execution}.result} ${test.@{tag}.@{execution}.result.explanation}"/>
    </sequential>
  </macrodef>

  <!-- Macro that sets explanation for result if set and not a success -->
  <macrodef name="explainResult">
    <attribute name="tag"/>
    <attribute name="execution" default="default"/>
    <attribute name="message"/>
    <sequential>
      <condition property="test.@{tag}.@{execution}.result.explanation" value="@{message}">
        <and>
          <isset property="test.@{tag}.@{execution}.result"/>
          <not>
            <equals arg1="test.@{tag}.@{execution}.result" arg2="SUCCESS"/>
          </not>
        </and>
      </condition>
    </sequential>
  </macrodef>

  <!-- **************************************************************************** -->
  <!-- *                                                                          * -->
  <!-- *                         Macros for cleaning test output                  * -->
  <!-- *                                                                          * -->
  <!-- **************************************************************************** -->

  <macrodef name="cleanOutput">
    <attribute name="file"/>
    <attribute name="tofile"/>
    <sequential>
      <toAscii src="@{file}" dest="${build.tests.dir}/deleteme.ascii"/>
      <!-- TODO: can be replaced by line filtering copy in ant 1.7 -->
      <lineFilter src="${build.tests.dir}/deleteme.ascii" dest="@{tofile}">
        <filter pattern="^GCspy.startGCspyServer"/>
        <filter pattern="^GCspy server on port [0-9]*"/>
        <filter pattern="^GCspy safepoint for event [0-9]*"/>
        <filter pattern="^GC Warning:"/>
        <filter pattern="^GC Message:"/>
        <filter pattern="^\[GC [0-9]*"/>
        <filter pattern="^\[Forced GC\]*"/>
        <filter pattern="^\[End [0-9]*.[0-9]* ms\]*"/>
        <filter pattern="^AOS: In non-adaptive mode; controller thread exiting."/>
      </lineFilter>
    </sequential>
  </macrodef>

  <!-- **************************************************************************** -->
  <!-- *                                                                          * -->
  <!-- *                   Macros for extractin proeprty for test                 * -->
  <!-- *                                                                          * -->
  <!-- **************************************************************************** -->

  <macrodef name="setIfPresent">
    <attribute name="name"/>
    <attribute name="key"/>
    <sequential>
      <condition property="@{name}" value="${@{key}}">
        <isset property="@{key}"/>
      </condition>
    </sequential>
  </macrodef>

  <macrodef name="setTestProperty">
    <attribute name="config" default="${config.name}"/>
    <attribute name="group" default="${test.group.name}"/>
    <attribute name="tag"/>
    <attribute name="key"/>
    <attribute name="default"/>
    <sequential>
      <setIfPresent name="test.@{tag}.@{key}" key="test.config.@{config}.@{group}.@{tag}.@{key}"/>
      <setIfPresent name="test.@{tag}.@{key}" key="test.config.@{config}.@{group}.@{key}"/>
      <setIfPresent name="test.@{tag}.@{key}" key="test.config.@{config}.@{key}"/>
      <setIfPresent name="test.@{tag}.@{key}" key="test.config.@{group}.@{tag}.@{key}"/>
      <setIfPresent name="test.@{tag}.@{key}" key="test.config.@{group}.@{key}"/>
      <setIfPresent name="test.@{tag}.@{key}" key="test.config.@{key}"/>
      <property name="test.@{tag}.@{key}" value="@{default}"/>
    </sequential>
  </macrodef>

  <!-- **************************************************************************** -->
  <!-- *                                                                          * -->
  <!-- *                         Macros for executing tests                       * -->
  <!-- *                                                                          * -->
  <!-- **************************************************************************** -->

  <!--
    This macro is responsible for running the RVM. See the top of this build file for
    properties this task defines and uses.
  -->
  <macrodef name="rvm">
    <attribute name="tag" default=""/>
    <attribute name="class"/>
    <attribute name="args" default=""/>
    <attribute name="classpath" default=""/>
    <attribute name="processors" default=""/>
    <attribute name="initialHeapSize" default=""/>
    <attribute name="maxHeapSize" default=""/>
    <attribute name="rvmArgs" default=""/>
    <attribute name="timeLimit" default=""/>
    <attribute name="maxOptLevel" default=""/>
    <attribute name="exitCode" default="0"/>
    <attribute name="dir" default="${build.tests.dir}"/>
    <attribute name="requires-display" default="false"/>
    <sequential>
      <prepareRvm tag="@{tag}"
                  class="@{class}"
                  args="@{args}"
                  classpath="@{classpath}"
                  processors="@{processors}"
                  initialHeapSize="@{initialHeapSize}"
                  maxHeapSize="@{maxHeapSize}"
                  rvmArgs="@{rvmArgs}"
                  timeLimit="@{timeLimit}"
                  maxOptLevel="@{maxOptLevel}"
                  exitCode="@{exitCode}"
                  dir="@{dir}"
                  requires-display="@{requires-display}"/>
      <invokeRvm tag="@{tag}"/>
    </sequential>
  </macrodef>

  <macrodef name="prepareRvm">
    <attribute name="tag" default=""/>
    <attribute name="class"/>
    <attribute name="args" default=""/>
    <attribute name="classpath" default=""/>
    <attribute name="processors" default=""/>
    <attribute name="initialHeapSize" default=""/>
    <attribute name="maxHeapSize" default=""/>
    <attribute name="rvmArgs" default=""/>
    <attribute name="timeLimit" default=""/>
    <attribute name="maxOptLevel" default=""/>
    <attribute name="exitCode" default="0"/>
    <attribute name="dir" default="${build.tests.dir}"/>
    <attribute name="requires-display" default="false"/>
    <sequential>
      <condition property="default.test.@{tag}.classpath" value="${test.class.path}" else="@{classpath}">
        <equals arg1="@{classpath}" arg2=""/>
      </condition>
      <condition property="default.test.@{tag}.processors" value="${test.processors}" else="@{processors}">
        <equals arg1="@{processors}" arg2=""/>
      </condition>
      <condition property="default.test.@{tag}.initialHeapSize" value="${test.initial.heapsize}"
                 else="@{initialHeapSize}">
        <equals arg1="@{initialHeapSize}" arg2=""/>
      </condition>
      <condition property="default.test.@{tag}.maxHeapSize" value="${test.max.heapsize}" else="@{maxHeapSize}">
        <equals arg1="@{maxHeapSize}" arg2=""/>
      </condition>
      <condition property="default.test.@{tag}.timeLimit" value="${test.time.limit}" else="@{timeLimit}">
        <equals arg1="@{timeLimit}" arg2=""/>
      </condition>
      <condition property="default.test.@{tag}.maxOptLevel" value="${test.max.opt.level}" else="@{maxOptLevel}">
        <equals arg1="@{maxOptLevel}" arg2=""/>
      </condition>

      <setTestProperty tag="@{tag}" key="extra.args" default="@{rvmArgs}"/>
      <setTestProperty tag="@{tag}" key="class.path" default="${default.test.@{tag}.classpath}"/>
      <setTestProperty tag="@{tag}" key="time.limit" default="${default.test.@{tag}.timeLimit}"/>
      <setTestProperty tag="@{tag}" key="initial.heapsize" default="${default.test.@{tag}.initialHeapSize}"/>
      <setTestProperty tag="@{tag}" key="max.heapsize" default="${default.test.@{tag}.maxHeapSize}"/>
      <setTestProperty tag="@{tag}" key="processors" default="${default.test.@{tag}.processors}"/>
      <setTestProperty tag="@{tag}" key="max.opt.level" default="${default.test.@{tag}.maxOptLevel}"/>
      <setTestProperty tag="@{tag}" key="exclude" default="false"/>

      <condition property="test.@{tag}.maxOptLevel-arg" value=""
                 else="-X:aos:max_opt_level=${test.@{tag}.max.opt.level}">
        <equals arg1="${test.@{tag}.max.opt.level}" arg2=""/>
      </condition>

      <property name="test.@{tag}.rvm.args"
                value="-X:vm:errorsFatal=true -X:processors=${test.@{tag}.processors} -Xms${test.@{tag}.initial.heapsize}M -Xmx${test.@{tag}.max.heapsize}M ${test.@{tag}.extra.args} ${test.rvm.extra.args} ${test.@{tag}.maxOptLevel-arg}"/>
      <property name="test.@{tag}.tag" value="@{tag}"/>
      <property name="test.@{tag}.class" value="@{class}"/>
      <property name="test.@{tag}.args" value="@{args}"/>
      <property name="test.@{tag}.dir" value="@{dir}"/>
      <property name="test.@{tag}.expected.exit.code" value="@{exitCode}"/>

      <!-- Do we need a display wrapper ? -->
      <if>
        <conditions>
          <and>
            <equals arg1="@{requires-display}" arg2="true"/>
            <isset property="display-wrapper.exe"/>
          </and>
        </conditions>
        <sequential>
          <property name="test.@{tag}.rvm-wrapper.exe" value="${display-wrapper.exe}"/>
          <property name="test.@{tag}.rvm.wrapper-args" value="-a ${timedrun.exe}"/>
        </sequential>
      </if>
      <!-- Defaults -->
      <property name="test.@{tag}.rvm-wrapper.exe" value="${timedrun.exe}"/>
      <property name="test.@{tag}.rvm.wrapper-args" value=""/>

      <property name="test.@{tag}.command"
                value='${rvm.exe} ${test.@{tag}.rvm.args} -classpath "${test.@{tag}.class.path}" ${test.@{tag}.class} ${test.@{tag}.args}'/>
    </sequential>
  </macrodef>

  <macrodef name="invokeRvm">
    <attribute name="tag" default=""/>
    <attribute name="execution" default="default"/>
    <sequential>
      <property name="test.@{tag}.@{execution}.output.file" value="${output.dir}/@{tag}.@{execution}-output.txt"/>
      <property name="test.@{tag}.@{execution}.sanitized.output.file" value="${output.dir}/@{tag}.@{execution}.txt"/>

      <if>
        <conditions>
          <equals arg1="${test.@{tag}.exclude}" arg2="true"/>
        </conditions>
        <sequential>
          <!-- If excluded then record result -->
          <property name="test.@{tag}.@{execution}.result" value="EXCLUDED"/>
          <explainResult tag="@{tag}" execution="@{execution}" message="Test excluded."/>
          <touch file="${test.@{tag}.@{execution}.output.file}"/>
        </sequential>
      </if>

      <timer property="test.@{tag}.@{execution}.time"/>
      <if>
        <conditions>
          <not>
            <equals arg1="${test.@{tag}.exclude}" arg2="true"/>
          </not>
        </conditions>
        <sequential>
          <exec executable="${test.@{tag}.rvm-wrapper.exe}"
                 failonerror="false"
                 dir="${test.@{tag}.dir}"
                 resultproperty="test.@{tag}.@{execution}.exit.code">

            <!-- Possible arguments for the display wrapper -->
            <arg line="${test.@{tag}.rvm.wrapper-args}"/>

            <!-- Arguments for the timeout script -->
            <arg line="-t ${test.@{tag}.time.limit}"/>
            <arg line="-e 200"/>
            <arg line="-o ${test.@{tag}.@{execution}.output.file}"/>

            <!-- The RVM execution -->
            <arg line="${rvm.exe} ${test.@{tag}.rvm.args}"/>
            <arg value="-classpath"/>
            <arg value="${test.@{tag}.class.path}"/>
            <arg line="${test.@{tag}.class} ${test.@{tag}.args}"/>
          </exec>
        </sequential>
      </if>
      <timer property="test.@{tag}.@{execution}.time" stop="true"/>
      <cleanOutput file="${test.@{tag}.@{execution}.output.file}" tofile="${test.@{tag}.@{execution}.sanitized.output.file}"/>

      <!-- If we run overtime then record result -->
      <condition property="test.@{tag}.@{execution}.result" value="OVERTIME">
        <equals arg1="${test.@{tag}.@{execution}.exit.code}" arg2="200"/>
      </condition>
      <explainResult tag="@{tag}" execution="@{execution}" message="Test exceeded time limit."/>

      <!-- check exit codes is valid. Set exitCode to empty string to disable check -->
      <condition property="test.@{tag}.@{execution}.result" value="FAILURE">
        <and>
          <not>
            <equals arg1="${test.@{tag}.expected.exit.code}" arg2=""/>
          </not>
          <not>
            <equals arg1="${test.@{tag}.expected.exit.code}" arg2="${test.@{tag}.@{execution}.exit.code}"/>
          </not>
        </and>
      </condition>
      <explainResult tag="@{tag}" execution="@{execution}" message="Unexpected exit code."/>
    </sequential>
  </macrodef>

  <!-- test the results of test run against an expected value in file named  @{class}@{name}.expected -->
  <macrodef name="diffCompareFiles">
    <attribute name="tag"/>
    <attribute name="expected"/>
    <attribute name="actual"/>
    <sequential>
      <touch file="@{expected}"/>
      <touch file="@{actual}"/>
      <checksum file="@{expected}" property="test.@{tag}.expected.checksum"/>
      <checksum file="@{actual}" property="test.@{tag}.@{execution}.actual.checksum"/>
      <condition property="test.@{tag}.@{execution}.result" value="FAILURE">
        <not>
          <equals arg1="${test.@{tag}.expected.checksum}" arg2="${test.@{tag}.@{execution}.actual.checksum}"/>
        </not>
      </condition>
      <explainResult tag="@{tag}" execution="@{execution}" message="Expected and actual output have different checksums"/>
    </sequential>
  </macrodef>

  <!-- run test then compare output to expected value in file named @{class}@{name}.expected and output results -->
  <macrodef name="runCompareTest">
    <attribute name="tag"/>
    <attribute name="class"/>
    <attribute name="classpath" default=""/>
    <attribute name="args" default=""/>
    <attribute name="initialHeapSize" default=""/>
    <attribute name="maxHeapSize" default=""/>
    <attribute name="rvmArgs" default=""/>
    <attribute name="timeLimit" default=""/>
    <sequential>
      <rvm tag="@{tag}"
           class="@{class}"
           args="@{args}"
           classpath="@{classpath}"
           initialHeapSize="@{initialHeapSize}"
           maxHeapSize="@{maxHeapSize}"
           rvmArgs="@{rvmArgs}"
           timeLimit="@{timeLimit}"/>

      <echo message="@{class}" file="${build.tests.dir}/deleteme.txt"/>
      <replace file="${build.tests.dir}/deleteme.txt" token="." value="${file.separator}"/>
      <loadfile property="test.@{tag}.expected.output.file" srcFile="${build.tests.dir}/deleteme.txt"/>

      <diffCompareFiles tag="@{tag}"
                        expected="${main.java}/${test.@{tag}.expected.output.file}.expected"
                        actual="${test.@{tag}.default.sanitized.output.file}"/>

      <outputResults tag="@{tag}"/>
    </sequential>
  </macrodef>

  <!-- **************************************************************************** -->
  <!-- *                                                                          * -->
  <!-- *                          Initialize properties                           * -->
  <!-- *                                                                          * -->
  <!-- **************************************************************************** -->

  <target name="init" depends="check-host-name,prepare-ant-tasks">
    <available property="host_file_present" file="${host.file}"/>
    <fail unless="host_file_present">
      Host file ${host.file} not present. Please set host.name to the name of file in ${jikesrvm.dir}/build/hosts
      directory without the .properties suffix.
    </fail>

    <fail unless="test.group.name" message="test.group.name must be set to name of test group."/>

    <fail unless="test.build.dir"
          message="test.build.dir must be set to directory to contain intermediate build artifacts."/>
    <fail unless="test.results.dir" message="test.results.dir must be set to directory to contain results."/>

    <fail unless="test.rvm.dir" message="test.rvm.dir must be set to directory containing rvm image."/>
    <available property="rvm.exe_present" file="${rvm.exe}"/>
    <fail unless="rvm.exe_present" message="${test.rvm.dir} is not a valid rvm image. Missing rvm program."/>

    <fail unless="test.class.path" message="test.class.path needs to be set."/>

    <mkdir dir="${build.tests.dir}"/>
    <mkdir dir="${output.dir}"/>
  </target>

</project>
