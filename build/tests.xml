<!--

  The test infrastructure relies on the definition of properties with well known names when executing,
  analyzing and recording each individual test. It was implemented this way as ants properties can only
  be assigned once and passing all the parameters around in macros is unwieldy.

  Every test has a "tag" that uniquely identifies it. Usually the tag is the name of class file
  optionally appended with a "selector". The tag identifies a particular run of a test.

  The following properties are either derived from input parameters or set from defaults.
   - test.@{tag}.tag                      (Name of the test)
   - test.@{tag}.class                    (Name of class to run)
   - test.@{tag}.args                     (Arguments passed to class)
   - test.@{tag}.class.path               (Classpath test run with)
   - test.@{tag}.initial.heapsize         (Initial heap size)
   - test.@{tag}.max.heapsize             (Maximum heap size)
   - test.@{tag}.time.limit               (Time limit)
   - test.@{tag}.extra,args               (Any extra test-specific args to rvm)
   - test.@{tag}.rvm.args                 (The complete set of args passed to rvm)
   - test.@{tag}.command                  (The complete command line to execute the test)
   - test.@{tag}.dir                      (The working directory for test)
  The following properties contain the output results of running the rvm.
   - test.@{tag}.exit.code                (The exit code from rvm)
   - test.@{tag}.output.file              (The name of the file containing output from execution)
   - test.@{tag}.sanitized.output.file    (The name of the file containing output from execution after it was cleaned)        
  The following properties contain the results of running the analysis.
   - test.@{tag}.result                   (One of SUCCESS, FAILURE, ERROR or NOTRUN)
   - test.@{tag}.result.explanation       (The reason for result if not SUCCESS)
   - test.@{tag}.statistic.@{key}         (For every statistic extracted from output there is one equiv property)

-->
<project name="tests">

  <property name="jikesrvm.dir" location="${basedir}/../../.."/>
  <!-- configuration data -->
  <property file="${test.rvm.dir}/constants.properties"/>

  <import file="${jikesrvm.dir}/build/base.xml"/>
  <import file="${jikesrvm.dir}/build/tasks.xml"/>
  
  <property name="rvm.exe" location="${test.rvm.dir}/rvm"/>

  <!-- Default values -->
  <property name="test.mode" value=""/>
  <property name="test.time.limit" value="1000"/>
  <property name="test.rvm.extra.args" value=""/>
  <property name="test.initial.heapsize" value="${config.default-heapsize.initial}"/>
  <property name="test.max.heapsize" value="${config.default-heapsize.maximum}"/>

  <property name="output.dir" location="${test.results.dir}/${test.group.name}"/>
  <property name="build.tests.dir" location="${test.build.dir}/${test.group.name}"/>

  <property name="results.file" value="${output.dir}/Results.xml"/>

  <!-- **************************************************************************** -->
  <!-- *                                                                          * -->
  <!-- *                         Macros for outputting results                    * -->
  <!-- *                                                                          * -->
  <!-- **************************************************************************** -->

  <presetdef name="res">
    <echo file="${results.file}" append="true"/>
  </presetdef>

  <macrodef name="startResults">
    <sequential>
      <tstamp prefix="test.start">
        <format property="time" pattern="MM/dd/yyyy hh:mm aa"/>
      </tstamp>
      <res append="false"><![CDATA[
<results version="1.0">
  <time>${test.start.time}</time>
  <group>${test.group.name}</group>
  <build-parameters>
    <parameter key="patch.name" value="${patch.name}"/>
    <parameter key="config.name" value="${config.name}"/>
    <parameter key="config.runtime.compiler" value="${config.runtime.compiler}"/>
    <parameter key="config.bootimage.compiler" value="${config.bootimage.compiler}"/>
    <parameter key="config.mmtk.plan" value="${config.mmtk.plan}"/>
    <parameter key="config.include.aos" value="${config.include.aos}"/>
    <parameter key="config.include.gcspy" value="${config.include.gcspy}"/>
    <parameter key="config.include.gcspy-stub" value="${config.include.gcspy-stub}"/>
    <parameter key="config.include.gcspy-client" value="${config.include.gcspy-client}"/>
    <parameter key="config.include.all-classes" value="${config.include.all-classes}"/>
    <parameter key="config.assertions" value="${config.assertions}"/>
    <parameter key="config.default-heapsize.initial" value="${config.default-heapsize.initial}"/>
    <parameter key="config.default-heapsize.maximum" value="${config.default-heapsize.maximum}"/>
    <parameter key="config.bootimage.compiler.args" value="${config.bootimage.compiler.args}"/>
    <parameter key="config.stress-gc" value="${config.stress-gc}"/>
    <parameter key="target.name" value="${target.name}"/>
    <parameter key="target.arch" value="${target.arch}"/>
    <parameter key="target.address.size" value="${target.address.size}"/>
    <parameter key="target.os" value="${target.os}"/>
    <parameter key="target.bootimage.code.address" value="${target.bootimage.code.address}"/>
    <parameter key="target.bootimage.data.address" value="${target.bootimage.data.address}"/>
    <parameter key="target.bootimage.rmap.address" value="${target.bootimage.rmap.address}"/>
    <parameter key="target.max-mappable.address" value="${target.max-mappable.address}"/>
  </build-parameters>
  <test-parameters>
    <parameter key="mode" value="${test.mode}"/>
    <parameter key="extra.args" value="${test.rvm.extra.args}"/>
  </test-parameters>
]]></res>
    </sequential>
  </macrodef>

  <macrodef name="finishResults">
    <sequential>
      <res><![CDATA[</results>]]></res>
    </sequential>
  </macrodef>

  <!-- Macro  to output results to results file and echo summary to stdout -->
  <macrodef name="outputResults">
    <attribute name="tag"/>
    <sequential>
      <outputTestStart tag="@{tag}"/>
      <outputTestResults tag="@{tag}"/>
      <outputTestEnd/>
      <displayTestResults tag="@{tag}"/>
    </sequential>
  </macrodef>

  <!-- Macro  to output results with single statistic output -->
  <macrodef name="outputSingleStatisticResults">
    <attribute name="tag"/>
    <attribute name="key"/>
    <attribute name="pattern"/>
    <sequential>
      <outputTestStart tag="@{tag}"/>
      <outputStatisticStart/>
      <extractStatistic tag="@{tag}" key="@{key}" pattern="@{pattern}"/>
      <outputStatisticEnd/>
      <outputTestResults tag="@{tag}"/>
      <outputTestEnd/>
      <displayTestResults tag="@{tag}"/>
    </sequential>
  </macrodef>

  <!-- Macro outputting the start of test. Uses propertys set by rvm macro. See rvm macro for details -->
  <macrodef name="outputTestStart">
    <attribute name="name" default=""/>
    <attribute name="tag"/>
    <sequential>
            <res><![CDATA[
<test>
  <tag>@{tag}</tag>
  <class>${test.@{tag}.class}</class>
  <args><![CDATA[${test.@{tag}.args}]]]]><![CDATA[></args>
  <working-directory>${test.@{tag}.dir}</working-directory>
  <command><![CDATA[${test.@{tag}.command}]]]]><![CDATA[></command>
  <rvm-parameters>
    <parameter key="initial.heapsize" value="${test.@{tag}.initial.heapsize}"/>
    <parameter key="max.heapsize" value="${test.@{tag}.max.heapsize}"/>
    <parameter key="time.limit" value="${test.@{tag}.time.limit}"/>
    <parameter key="extra.args" value='${test.@{tag}.extra.args}'/>
  </rvm-parameters>
  <exit-code>${test.@{tag}.exit.code}</exit-code>
  <time>${test.@{tag}.time.duration}</time>
]]></res>
    </sequential>
  </macrodef>

  <macrodef name="outputStatistic">
    <attribute name="key"/>
    <attribute name="value"/>
    <sequential>
      <res><![CDATA[<statistic key="@{key}" value="@{value}"/>]]></res>
    </sequential>
  </macrodef>

  <macrodef name="outputStatisticStart">
    <sequential>
      <res><![CDATA[<statistics>]]></res>
    </sequential>
  </macrodef>

  <macrodef name="outputStatisticEnd">
    <sequential>
      <res><![CDATA[</statistics>]]></res>
    </sequential>
  </macrodef>

  <!--
      Macro to extract a statist from sanitized output file. If it the pattern does not match then
      result is set to failure and explained. If pattern matches then property test.@{tag}.statistic.@{key}
      is set to value of match. Finally the statistic is output to results.
  -->
  <macrodef name="extractStatistic">
    <attribute name="tag"/>
    <attribute name="pattern"/>
    <attribute name="key"/>
    <attribute name="select" default="\1"/>
    <attribute name="file" default=""/>
    <sequential>
      <findStatistic tag="@{tag}" pattern="@{pattern}" key="@{key}" select="@{select}" file="@{file}"/>
      <!-- set property if it has not been set -->
      <property name="test.@{tag}.statistic.@{key}" value=""/>
      <outputStatistic key="@{key}" value="${test.@{tag}.statistic.@{key}}"/>
    </sequential>
  </macrodef>

  <!--
      Macro to look for pattern in file and fail if unable to find pattern.
  -->
  <macrodef name="findStatistic">
    <attribute name="tag"/>
    <attribute name="pattern"/>
    <attribute name="key"/>
    <attribute name="select" default="\0"/>
    <attribute name="file" default=""/>
    <sequential>
      <condition property="test.@{tag}.@{key}.input.file"
                 value="${test.@{tag}.sanitized.output.file}"
                 else="@{file}">
        <equals arg1="@{file}" arg2=""/>
      </condition>
      <selectRegex property="test.@{tag}.statistic.@{key}"
                   select="@{select}"
                   file="${test.@{tag}.@{key}.input.file}"
                   pattern="@{pattern}"/>
      <condition property="test.@{tag}.result" value="FAILURE">
        <not>
          <isset property="test.@{tag}.statistic.@{key}"/>
        </not>
      </condition>
      <explainResult tag="@{tag}" message="Failed to extract @{key} using pattern @{pattern}"/>
    </sequential>
  </macrodef>

  <macrodef name="outputTestResults">
    <attribute name="tag"/>
    <sequential>
      <!-- set results to success if not already set fo failure -->
      <property name="test.@{tag}.result" value="SUCCESS"/>
      <property name="test.@{tag}.result.explanation" value=""/>
      <res><![CDATA[<result>${test.@{tag}.result}</result>]]></res>
      <res><![CDATA[<result-explanation>${test.@{tag}.result.explanation}</result-explanation>]]></res>
      <res><![CDATA[<output><]]>![CDATA[</res>
      <copy file="${test.@{tag}.output.file}" tofile="${build.tests.dir}/deleteme.txt"/>
      <replace file="${build.tests.dir}/deleteme.txt" token="]]&gt;" value="]]&gt;]]&lt;![CDATA[&gt;"/>
      <!-- may need to set an encoding -->
      <native2ascii src="${build.tests.dir}" dest="${build.tests.dir}" includes="deleteme.txt" ext=".ascii"/>
      <concat destfile="${results.file}" append="true">
        <path path="${build.tests.dir}/deleteme.ascii"/>
      </concat>
      <res>]]<![CDATA[></output>]]></res>
    </sequential>
  </macrodef>

  <macrodef name="outputTestEnd">
    <sequential>
      <res><![CDATA[</test>]]></res>
    </sequential>
  </macrodef>

  <macrodef name="displayTestResults">
    <attribute name="tag"/>
    <sequential>
      <echo message="Test Result for [${config.name}|${test.group.name}] @{tag} : ${test.@{tag}.result} ${test.@{tag}.result.explanation}"/>
    </sequential>
  </macrodef>

  <!-- Macro that sets explanation for result if set and not a success -->
  <macrodef name="explainResult">
    <attribute name="tag"/>
    <attribute name="message"/>
    <sequential>
      <condition property="test.@{tag}.result.explanation" value="@{message}">
        <and>
          <isset property="test.@{tag}.result"/>
          <not>
            <equals arg1="test.@{tag}.result" arg2="SUCCESS"/>
          </not>
        </and>
      </condition>
    </sequential>
  </macrodef>

  <!-- **************************************************************************** -->
  <!-- *                                                                          * -->
  <!-- *                         Macros for cleaning test output                  * -->
  <!-- *                                                                          * -->
  <!-- **************************************************************************** -->

  <macrodef name="cleanOutput">
    <attribute name="file"/>
    <attribute name="tofile"/>
    <sequential>
      <!-- TODO: can be replaced by line filtering copy in ant 1.7 -->
      <exec executable="${awk.exe}" failonerror="true" input="@{file}" output="@{tofile}">
        <arg value="-f"/>
        <arg value="${jikesrvm.dir}/testing/harness/RVMJunkFilter.awk"/>
      </exec>
    </sequential>
  </macrodef>

  <!-- **************************************************************************** -->
  <!-- *                                                                          * -->
  <!-- *                         Macros for executing tests                       * -->
  <!-- *                                                                          * -->
  <!-- **************************************************************************** -->

  <!--
    This macro is responsible for running the RVM. See the top of this build file for
    properties this task defines and uses.
  -->
  <macrodef name="rvm">
    <attribute name="tag" default=""/>
    <attribute name="class"/>
    <attribute name="args" default=""/>
    <attribute name="classpath" default=""/>
    <attribute name="initialHeapSize" default=""/>
    <attribute name="maxHeapSize" default=""/>
    <attribute name="rvmArgs" default=""/>
    <attribute name="timeLimit" default=""/>
    <attribute name="exitCode" default="0"/>
    <attribute name="dir" default="${build.tests.dir}"/>
    <sequential>
      <condition property="test.@{tag}.max.heapsize" value="${test.max.heapsize}" else="@{maxHeapSize}">
        <equals arg1="@{maxHeapSize}" arg2=""/>
      </condition>
      <condition property="test.@{tag}.initial.heapsize" value="${test.initial.heapsize}" else="@{initialHeapSize}">
        <equals arg1="@{initialHeapSize}" arg2=""/>
      </condition>
      <condition property="test.@{tag}.time.limit" value="${test.time.limit}" else="@{timeLimit}">
        <equals arg1="@{timeLimit}" arg2=""/>
      </condition>
      <condition property="test.@{tag}.class.path" value="${test.class.path}" else="@{classpath}">
        <equals arg1="@{classpath}" arg2=""/>
      </condition>
      <property name="test.@{tag}.extra.args" value="@{rvmArgs}"/>
      <property name="test.@{tag}.rvm.args"
                value="-X:vm:errorsFatal=true -Xms${test.@{tag}.initial.heapsize}M -Xmx${test.@{tag}.max.heapsize}M ${test.@{tag}.extra.args} ${test.rvm.extra.args}"/>
      <property name="test.@{tag}.tag" value="@{tag}"/>
      <property name="test.@{tag}.class" value="@{class}"/>
      <property name="test.@{tag}.args" value="@{args}"/>
      <property name="test.@{tag}.dir" value="@{dir}"/>

      <property name="test.@{tag}.output.file" value="${output.dir}/@{tag}-output.txt"/>
      <property name="test.@{tag}.sanitized.output.file" value="${output.dir}/@{tag}.txt"/>

      <condition property="test.@{tag}.exclude" value="true" else="false">
        <or>
          <!-- check whether we have disabled test altogether, in configuration, target or configuration+target -->
          <isset property="exclude.test.${test.group.name}.@{tag}"/>
          <isset property="exclude.test.${config.name}.${test.group.name}.@{tag}"/>
          <isset property="exclude.test.${target.name}.${test.group.name}.@{tag}"/>
          <isset property="exclude.test.${config.name}.${target.name}.${test.group.name}.@{tag}"/>

          <!-- check whether we have disabled suite altogether, in configuration, target or configuration+target -->
          <isset property="exclude.group.${test.group.name}"/>
          <isset property="exclude.group.${config.name}.${test.group.name}"/>
          <isset property="exclude.group.${target.name}.${test.group.name}"/>
          <isset property="exclude.group.${config.name}.${target.name}.${test.group.name}"/>

          <!-- check whether we have disabled testing altogether, in configuration, target or configuration+target -->
          <isset property="exclude.${config.name}"/>
          <isset property="exclude.${target.name}"/>
          <isset property="exclude.${config.name}.${target.name}"/>
        </or>
      </condition>

      <property name="test.@{tag}.command"
                value='${rvm.exe} ${test.@{tag}.rvm.args} -classpath "${test.@{tag}.class.path}" ${test.@{tag}.class} ${test.@{tag}.args}'/>
      <if>
        <conditions>
          <equals arg1="${test.@{tag}.exclude}" arg2="true"/>
        </conditions>
        <sequential>
        <!-- If excluded then record result -->
          <property name="test.@{tag}.result" value="EXCLUDED"/>
          <explainResult tag="@{tag}" message="Test excluded."/>
          <touch file="${test.@{tag}.output.file}"/>
        </sequential>
      </if>
      <timer property="test.@{tag}.time"/>
      <if>
        <conditions>
          <equals arg1="${test.@{tag}.exclude}" arg2="false"/>
        </conditions>
        <sequential>
          <texec executable="${rvm.exe}"
                 failonerror="false"
                 dir="@{dir}"
                 timeout="${test.@{tag}.time.limit}000"
                 timeoutProperty="test.@{tag}.timeout"
                 output="${test.@{tag}.output.file}"
                 resultproperty="test.@{tag}.exit.code">
            <arg line="${test.@{tag}.rvm.args}"/>
            <arg value="-classpath"/>
            <arg value="${test.@{tag}.class.path}"/>
            <arg line="${test.@{tag}.class} ${test.@{tag}.args}"/>
          </texec>
        </sequential>
      </if>
      <timer property="test.@{tag}.time" stop="true"/>
      <cleanOutput file="${test.@{tag}.output.file}" tofile="${test.@{tag}.sanitized.output.file}"/>

      <!-- If we run overtime then record result -->
      <condition property="test.@{tag}.result" value="OVERTIME">
        <isset property="test.@{tag}.timeout"/>
      </condition>
      <explainResult tag="@{tag}" message="Test exceeded time limit."/>

      <!-- check exit codes is valid. Set exitCode to empty string to disable check -->
      <condition property="test.@{tag}.result" value="FAILURE">
        <and>
          <not>
            <equals arg1="@{exitCode}" arg2=""/>
          </not>
          <not>
            <equals arg1="@{exitCode}" arg2="${test.@{tag}.exit.code}"/>
          </not>
        </and>
      </condition>
      <explainResult tag="@{tag}" message="Unexpected exit code."/>
    </sequential>
  </macrodef>

  <!-- test the results of test run against an expected value in file named  @{class}@{name}.expected -->
  <macrodef name="diffCompareFiles">
    <attribute name="tag"/>
    <attribute name="expected"/>
    <attribute name="actual"/>
    <sequential>
      <touch file="@{expected}"/>
      <touch file="@{actual}"/>
      <checksum file="@{expected}" property="test.@{tag}.expected.checksum"/>
      <checksum file="@{actual}" property="test.@{tag}.actual.checksum"/>
      <condition property="test.@{tag}.result" value="FAILURE">
        <not>
          <equals arg1="${test.@{tag}.expected.checksum}" arg2="${test.@{tag}.actual.checksum}"/>
        </not>
      </condition>
      <explainResult tag="@{tag}" message="Expected and actual output have different checksums"/>
    </sequential>
  </macrodef>

  <!-- run test then compare output to expected value in file named @{class}@{name}.expected and output results -->
  <macrodef name="runCompareTest">
    <attribute name="tag"/>
    <attribute name="class"/>
    <attribute name="classpath" default=""/>
    <attribute name="args" default=""/>
    <attribute name="initialHeapSize" default=""/>
    <attribute name="maxHeapSize" default=""/>
    <attribute name="rvmArgs" default=""/>
    <attribute name="timeLimit" default=""/>
    <sequential>
      <rvm tag="@{tag}"
           class="@{class}"
           args="@{args}"
           classpath="@{classpath}"
           initialHeapSize="@{initialHeapSize}"
           maxHeapSize="@{maxHeapSize}"
           rvmArgs="@{rvmArgs}"
           timeLimit="@{timeLimit}"/>

      <echo message="@{class}" file="${build.tests.dir}/deleteme.txt"/>
      <replace file="${build.tests.dir}/deleteme.txt" token="." value="${file.separator}"/>
      <loadfile property="test.@{tag}.expected.output.file" srcFile="${build.tests.dir}/deleteme.txt"/>

      <diffCompareFiles tag="@{tag}"
                        expected="${main.java}/${test.@{tag}.expected.output.file}.expected"
                        actual="${test.@{tag}.sanitized.output.file}"/>

      <outputResults tag="@{tag}"/>
    </sequential>
  </macrodef>

  <!-- **************************************************************************** -->
  <!-- *                                                                          * -->
  <!-- *                          Initialize properties                           * -->
  <!-- *                                                                          * -->
  <!-- **************************************************************************** -->

  <target name="init" depends="check-host-name,prepare-ant-tasks">
    <available property="host_file_present" file="${host.file}"/>
    <fail unless="host_file_present">
      Host file ${host.file} not present. Please set host.name to the name of file in ${jikesrvm.dir}/build/hosts
      directory without the .properties suffix.
    </fail>
    <test-file name="awk.exe" location="${host.file}"/>

    <fail unless="test.group.name" message="test.group.name must be set to name of test group."/>

    <fail unless="test.build.dir"
          message="test.build.dir must be set to directory to contain intermediate build artifacts."/>
    <fail unless="test.results.dir" message="test.results.dir must be set to directory to contain results."/>

    <fail unless="test.rvm.dir" message="test.rvm.dir must be set to directory containing rvm image."/>
    <available property="rvm.exe_present" file="${rvm.exe}"/>
    <fail unless="rvm.exe_present" message="${test.rvm.dir} is not a valid rvm image. Missing rvm program."/>

    <fail unless="test.class.path" message="test.class.path needs to be set."/>

    <mkdir dir="${build.tests.dir}"/>
    <mkdir dir="${output.dir}"/>
  </target>

</project>
