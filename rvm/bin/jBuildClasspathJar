#! /bin/bash
#
# (C) Copyright IBM 2002, 2003, 2004
#
# $Id$
# @author Julian Dolby
# @modified Steven Augart
#   (Bash conversion plus more error checking.)
#

## Progress messages go to stdout; failures to stderr.

## This program is sensitive to the following environment variables.
## (If it can, it will read them in from $RVM_BUILD/environment.host)
## JAL_ROOT  (to determine whether we're running under jbuild)
##
## JIKES
## JAR
## ZIP_CMD
## AR
## CC
## FIND
## AR_FLAGS
## RVM_ROOT
## GNU_MAKE
## GREP
## XARGS

## BUILDING_CLASSPATH_FROM_CVS_HEAD
## CLASSPATH_ROOT		( optional )

## This program should NOT be called if you have CLASSPATH_INSTALLATION set.
## If it is, then we give up.


trap 'echo "$ME: Aborted due to a command exiting with error status ($?)"' ERR 2> /dev/null || :
set -e
ME="${0##*/}"
if [[ ! ${JAL_BUILD-} ]]; then
    if ! [[ ${RVM_BUILD-} ]]; then
	echo >&2 "$ME: RVM_BUILD must be set if you're not running this program
    as a subsidiary of jbuild.  It isn't; aborting."
	exit 1
    fi
    . ${RVM_BUILD}/environment.host
fi


##
## constants
##
TOP_LEVEL_PACKAGES="java javax gnu"

##
## defaults
##
declare -i CHECK=0
export DEST_DIR=${CLASSPATH_ROOT:-$RVM_ROOT/classpath}
export OS_VER=$(uname -v)
OSNAME="$(uname)"

if [[ ${JIKES-:} ]]; then
    JIKES_ARG="--with-jikes=\"$JIKES\""
fi
JAR_TOOL=$JAR

declare -i AIX=0
[[ $OSTYPE == aix* ]] && AIX=1

CLASSPATH_URL=$(cat $RVM_ROOT/rvm/bin/classpath.stamp)

##
## process arguments
##
while [[ $# > 0 ]] ; do
    case $1 in
	--destination)
	    DEST_DIR=$2
	    shift 
	    ;;
	
	--check)
	    CHECK=1 
	    ;;
    esac	
    shift
done

## Where are Classpath's sources?
if [[ ${CLASSPATH_SOURCE_DIR-} ]]; then
    SRC=${CLASSPATH_SOURCE_DIR}
else
    SRC=$DEST_DIR/classpath
fi

## If the user has already unpacked Classpath into SRC, then
## we are OK.

if [[ -e $SRC/config.guess ]] || [[ ${OSNAME} = Darwin ]]; then
    export USE_LOCAL_CLASSPATH="yes"
else
    export USE_LOCAL_CLASSPATH="no"
fi



## What args do we give to classpath's "configure" command?
function classpath_configure_args () {
    if (( AIX )); then
	## AIX does not come with pkg-config or glib by default.  So, if 
	## someone is doing a default AIX build, we'll disable them.
	##
	## The GTk peers won't do any good without select hijacking, 
	## in any case. 
	echo "  --disable-gtk-peer CPPFLAGS='-D_POSIX_SOURCE -D_ALL_SOURCE -D__ppc__'"
	return;
    fi
    echo " --enable-portable-native-sync" # Needed for Classpath 0.09 and 0.08, benign for Classpath 0.10 and onward.
    if ! [[ -e /usr/include/gtk-2.0/gtk/gtk.h ]]; then
	echo "  --disable-gtk-peer"
    else
	# We don't really support AWT yet; there are still some 
	# glitches needing resolution (AWT is still infernally slow for us).  
	# So, we can go ahead and just disable AWT for this default
	# Classpath build.  When this is enabled, as of this writing
	# (26 July 2004), the JMTk regressions fail due to an attempt
	# to contact the X server.  By setting --disable-gtk-peer 
	# in this situation, it should make it impossible for
	# Classpath to try to talk to X.
	# 
	# There is another reason for disabling the GTk peers in this
	# default GNU Classpath build.  As Steve Blackburn writes, the
	# GTk peers depend on GTk devel stuff, which in turn draws in
	# a large chunk of GNOME-related devel stuff that is
	# often/typically not installed by default.
	# 
	# If we were to leave the GTk peers enabled, a lot of people
	# might find that system would no longer build out of the box
	# because they did not have the GTk devel tools installed.
	echo "  --disable-gtk-peer"
    fi
}


##
## Warn if timestamps do not match.
##
mismatch=0
if ! [[ ${BUILDING_CLASSPATH_FROM_CVS_HEAD-} ]] && [[ "$USE_LOCAL_CLASSPATH" = "no" ]]; then
    if [[ -e $DEST_DIR/stamp ]]; then
	declare -i stat=0
	$DIFF $RVM_ROOT/rvm/bin/classpath.stamp $DEST_DIR/stamp > /dev/null || stat=$?
	if (( stat == 1 )); then
	    echo >&2 "${ME}: I think you want me to automatically download and build GNU Classpath.  But, there's already some sort of Classpath download in $DEST_DIR."
	    echo >&2 "The timestamp in $DEST_DIR/stamp is: $(< $DEST_DIR/stamp)"
	    echo >&2 "The timestamp I expect is: $(< $RVM_ROOT/rvm/bin/classpath.stamp)"
	    let ++mismatch;
	elif (( stat != 0 )); then
	    echo >&2 "$ME: $DIFF failed with bad status $stat; aborting"
	    exit $stat
	fi
    elif [[ -e $DEST_DIR ]]; then
	echo >&2 "${ME}: $DEST_DIR contains what might be an unknown GNU Classpath download"
	echo >&2 "${ME}: I expected to find a file named $DEST_DIR/stamp"
	echo >&2 "${ME}: that contains the timestamp: $(<  $RVM_ROOT/rvm/bin/classpath.stamp )"
	let ++mismatch;
    fi
fi

if (( mismatch )); then
    echo >&2 "${ME}: Either (a) set one of the CLASSPATH_ variables in your config file and rerun \"jconfigure\" or (b) delete $DEST_DIR.  Then restart this build.  If you wipe out $DEST_DIR, I will automatically download GNU Classpath and build it for you.  If you set one of the CLASSPATH_ variables, I will use the already built or installed GNU Classpath that I find there."
    exit 1
fi

##
## check if requested
##
declare BUILD=""
BUILD=${CLASSPATH_BUILD_DIR-}	# Potentially unset.
declare system_type=""
if  (( CHECK )) && [[ -e $SRC/config.guess ]]; then
    if [[ ! ${BUILD} ]]; then
	system_type="$($SRC/config.guess)"
	BUILD=$DEST_DIR/$system_type
    fi
    if [[ -e $BUILD/lib/glibj.zip ]]; then
	exit 0
    fi
    ## Didn't find an existing classpath.
fi


##
## download classpath if needed
##
if [[ ! -e $SRC/TODO ]]; then
    if [[ $USE_LOCAL_CLASSPATH != "no" ]]; then
	echo >&2 "Please download GNU Classpath and unpack it in $DEST_DIR"
	echo >&2 "(Classpath 0.10 or newer is required; 0.12 is recommended on all platforms but Darwin/OSX)"
	exit 1
    fi
    echo "Downloading GNU Classpath"
    rm -rf $DEST_DIR
    mkdir -p $DEST_DIR
    cd $DEST_DIR
    
    $WGET --passive-ftp $CLASSPATH_URL -Oclasspath.tar.gz
    $GNU_TAR xzf classpath.tar.gz
    rm classpath.tar.gz
    mv classpath-* classpath
    cp $RVM_ROOT/rvm/bin/classpath.stamp stamp
    # stuff untarred into the dir "classpath", which should be the same as
    # $SRC.
    if [[ ! -e $SRC/TODO ]]; then
	echo >&2 "$ME: Internal error or weird trouble: After retrieving
   Classpath sources under the directory \`$DEST_DIR', 
   we still can not find a file named \`$SRC/TODO'"
	exit 1
    fi
fi
cd $SRC

# Set up the directory for building if it's not already done.
# This will only be needed if you are using a CVS release.
if [[ ! -e $SRC/configure ]]; then
    echo >&2 "Setting up source tree"
    if [[ `uname -m` = i686 ]]; then
      aclocal
    else
      aclocal -I $RVM_ROOT/rvm/config/m4
    fi
    autoheader
    automake
    autoconf
fi

function aix_cleanups() {
    local mkf=native/fdlibm/Makefile
    echo "Cleaning up $mkf for AIX"
    sed -e '/^CPPFLAGS/s/-D_ALL_SOURCE//' $mkf > ${mkf}.tmp
    mv -f ${mkf}.tmp ${mkf}
    
    mkf=native/jni/java-lang/Makefile
    echo "Cleaning up ${mkf} for AIX"
    sed -e '/^LIBS *=/s/$/-lm/' $mkf > $mkf.tmp
    mv -f ${mkf}.tmp ${mkf}
}

# configure and build library
[[ $system_type ]] || system_type=$($SRC/config.guess)
if [[ ! $BUILD ]]; then
    BUILD=$DEST_DIR/$system_type
fi

if [[ ! -e $BUILD/lib/glibj.zip ]]; then
    mkdir -p $BUILD
    echo "Configuring for $system_type"
    cd $BUILD
    FIND=$FIND ZIP=$ZIP_CMD AR=$AR AR_FLAGS=$AR_FLAGS eval ../classpath/configure --enable-jni $JIKES_ARG $(classpath_configure_args)
    if (( AIX )); then
	aix_cleanups
    fi
    echo "Building the library"
    $GNU_MAKE
fi

# build classpath source jar
cp_src_jar_dir=$RVM_ROOT/support/lib
cp_src_jar=${cp_src_jar_dir}/classpathsrc.jar
echo "Building ${cp_src_jar}"
rm -f ${cp_src_jar}
mkdir -p $cp_src_jar_dir
touch ${cp_src_jar}
cd $SRC
$FIND $TOP_LEVEL_PACKAGES -name '*.java' | $GREP -v -f lib/standard.omit | $XARGS $JAR_TOOL uf ${cp_src_jar}
