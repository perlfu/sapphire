#! /bin/ksh
#
# (C) Copyright IBM Corp. 2001
#
#$Id$
#
# check whether your rvmrt.jar is in sync with the RVM
#
# Invocation:  jCheckLibs
#
# @authors: Julian Dolby, Stephen Fink, David Grove, Martin Trapp, Michael Hind

# Stop immediately if any programs we call return errors.
#
set -e

rvm_ids=$RVM_ROOT/rvm/bin/ids
lib_dir=$RVM_ROOT/support/lib
license_name=BinaryLibLicense.txt
license_file=$lib_dir/$license_name
license_cache=$HOME/.rvmrt
jar_file=rvmrt.jar
id_file=rvmrt
ignore_HOST_CONFIG=""

# Who we are.
#
ME=`basename $0`

function usage
{
  echo usage: This script should not be called interactively,
  echo        but is rather invoked by other scripts like jconfigure.
  echo $ME checks whether your rvmrt.jar is in sync with the RVM
  exit $1
}

##
## Main part of script starts here
##

while [[ $# > 0 ]] ; do
  case $1 in
    --help) usage 0;;
    -h) usage 0;;
    -f) ignore_HOST_CONFIG="yes";;
    *) usage 1;;
  esac
  shift
done

if [ $RVM_FORCE_LIB_DOWNLOAD ] ; then
  automatic="y"
fi

# Place where the RVM resides.
#
if [[ x$RVM_ROOT = x ]]; then
   echo "$ME: please set your RVM_ROOT environment variable"
   echo "(eg. $HOME/jikesRVM-2.1.0)"
   exit 1
fi

# What configuration will host the build process
#
if [[ x$ignore_HOST_CONFIG = x ]] ; then
  if [[ $RVM_HOST_CONFIG = "" ]]; then
    echo "$ME: please set your RVM_HOST_CONFIG environment variable"
    echo " eg. $RVM_ROOT/rvm/config/powerpc-ibm-aix4.3.3.0"
    exit 1
  fi
  . $RVM_HOST_CONFIG
fi


if [[ x$WGET != x && ! -x $WGET ]] ; then
    WGET=""
fi


#
# make sure we have the classpath jar file
#
if [[ ! -e $RVM_ROOT/support/lib/classpath.jar ]]; then
cat <<EOF

The GNU Classpath jar file is required to build JikesRVM

You can build this file yourself, or have it generated automatically.
If you build it yourself, place it in $RVM_ROOT/support/lib/classpath.jar

NOTE: the only currently-supported way of running Jikes RVM with solely
the GNU Classpath libraries involves building the jar and corresponding
native code yourself.

The license for this library is available at 
http://www.gnu.org/software/classpath

EOF

if [[ x$automatic = x ]] ; then 
  echo "Do you want to generate and install this file now? \c"
  if ! read automatic ; then 
    automatic="y"
  fi
fi
  if [[ x$automatic = xy || x$automatic = xyes ]] ; then
    echo "Generating and installing classpath.jar"
    mkdir -p $RVM_ROOT/support/lib
    $RVM_ROOT/rvm/bin/jBuildClasspathJar
  fi
fi


#
# make sure we have the GNU Classpath security properties file
#
if [[ ! -e $RVM_ROOT/lib/security/JikesRVM.security ]]; then
  # install security properties file for classpath
  print "$ME: Installing security properties file in $RVM_ROOT/lib/security"
  mkdir -p $RVM_ROOT/lib/security
  echo "security.provider.1=gnu.java.security.provider.Gnu" > $RVM_ROOT/lib/security/JikesRVM.security
fi


#
# get rvmrt.jar
#
cd $rvm_ids

license=""
# update global license cache
if [[ -r $license_file && x$MD5SUM != x && -x $MD5SUM ]] ; then
  md5=`$MD5SUM $license_file | awk '{print $1}'`
  if [[ -f $license_cache ]] ; then
    license=`grep $license_name $license_cache | awk '{print $2}'`
  fi
  if [[ $license != $md5 ]] ; then
    if [[ -f $license_cache ]] ; then
      grep -v $license_name $license_cache > $license_cache.$$ || true
    fi
    echo "$license_name $md5" >> $license_cache.$$
    mv -f $license_cache.$$ $license_cache
    chmod 600 $license_cache
  fi
fi

# is there a cached license?
if [[ -f $license_cache ]] ; then
  license=`grep $license_name $license_cache | awk '{print $2}'`
fi

# let's see what the rvm originally wanted
if [[ -f ${id_file}.stamp ]] ; then
  stamp_jar=`cat ${id_file}.stamp`
fi

# let's see what should be installed
if [[ -f ${id_file}.installed ]] ; then
  installed_jar=`cat ${id_file}.installed`
fi

# let's see what we got
if [[ -f ${lib_dir}/${jar_file} ]] ; then
  rm -f ${id_file}.id
  # make an attempt for speed:
  $UNZIP_CMD -x ${lib_dir}/${jar_file} ${id_file}.id >/dev/null 2>&1 || true
  if [ ! -f ${id_file}.id ] ; then
    # fall back
    $HOST_JAR xf ${lib_dir}/${jar_file} ${id_file}.id
  fi
  local_jar=`cat ${id_file}.id 2>/dev/null`
  rm -f ${id_file}.id
fi

if [[ x$stamp_jar = x ]] ; then
cat <<EOF
Fatal: You lost the file $rvm_ids/${id_file}.stamp.
       I can not determine what version of ${jar_file} matches this \$RVM_ROOT.
       If you installed Jikes RVM from a tar file, re-extract rvm/bin/ids.
       If you installed Jikes RVM from the cvs repository, update rvm/bin/ids.
EOF
  exit 2
fi

if [[ x$local_jar != x ]] ; then

# we have something sitting in ${lib_dir}/${jar_file}
# no check, if this is ok.

  # stamped version
  # OK, if the local jar is the stamped one
  if [[ x$stamp_jar = x$local_jar ]] ; then
    rm -f ${id_file}.installed
    exit 0
  fi

  # local version
  # OK, if the local jar is the installed one
  if [[ $installed_jar = $local_jar ]] ; then
  cat <<EOF
Note: You are using a local version of \$RVM_ROOT/support/lib/${jar_file}.
      Your local revision is $local_jar. If you want to switch to
      revision $stamp_jar, which matches your Jikes RVM version, you
      have to remove ${lib_dir}/${jar_file}.
EOF
    exit 0
  fi

fi

revision=$stamp_jar
cat <<EOF

Version [$revision] of rvmrt.jar is required for this build.

You can download this revision from
http://www-124.ibm.com/cgi-bin/jikesrvm/jlibraries?rev=$revision

NOTE: This file has a different license than Jikes RVM.

EOF

if [[ x$license = x || x$WGET = x ]] ; then
  exit 1
fi

#Reset automatic as needed
automatic=""
if [ $RVM_FORCE_LIB_DOWNLOAD ] ; then
  automatic="y"
fi

if [[ x$automatic = x ]] ; then 
  echo "Do you want to automatically download and install the new revision now? \c"
  if ! read automatic ; then # with help from Igor
    automatic="y"
  fi
fi
if [[ x$automatic = xy || x$automatic = xyes ]] ; then
  echo "\nDownloading $RVM_ROOT/jlibraries-$revision.tar.gz"
  options="?rev=$revision&license=$license"
  $WGET -q -O $RVM_ROOT/jlibraries-$revision.tar.gz \
  "http://www-124.ibm.com/cgi-bin/jikesrvm/jlibraries.tar.gz$options"
  length=`cat $RVM_ROOT/jlibraries-$revision.tar.gz | wc -c`
  if [[ $length -lt 10000 ]] ; then
    echo
    echo "A problem occured:"
    cat $RVM_ROOT/jlibraries-$revision.tar.gz
    rm $RVM_ROOT/jlibraries-$revision.tar.gz
    exit 1
  fi
  cd $RVM_ROOT
  echo "Installing $RVM_ROOT/jlibraries-$revision.tar.gz"
  files=`$GNU_TAR ztf $RVM_ROOT/jlibraries-$revision.tar.gz`
  for file in $files ; do
    if [ -f $file ] ; then
      mv -f $file $file.bak
    fi
  done
  $GNU_TAR zxvf $RVM_ROOT/jlibraries-$revision.tar.gz
  echo file jlibraries-$revision.tar.gz left in $RVM_ROOT
  echo "\nThe license for this library is available in"
  echo "  $RVM_ROOT/support/lib/BinaryLibLicense.txt"
  exit 0
fi
exit 1

