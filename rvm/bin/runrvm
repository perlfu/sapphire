#! /bin/bash
#
# (C) Copyright IBM Corp. 2001, 2002, 2003, 2004, 2005
#
# $Id$
#
# Invoke the Jikes RVM virtual machine that "jbuild" created.
# See also: $RVM_ROOT/rvm/bin/jconfigure -help

# This file, 'runrvm', is the old (as of Sept. 2002) 'rvm' script,
# except the variables are specified using parameters instead of
# environment variables.  'rvm' passes parameters to 'runrvm', using
# values defined by environment variables.

# 'runrvm' must be an executable program; 
# the Eclipse Jikes RVM Launcher Plugin expects this.

# @author Jeffrey Palm
# @date 25 Jun 2002
#
# @author Derek Lieber
# @date 04 Feb 2000
#
# @modified Peter Sweeney
# @date 15 Jan 2001 
#    eliminate dependence on option order.
#
# @modified Steven Augart
# @date 2003 Jun 01
#    Converted from "ksh" to Bash
#

# Sanity checks
# What is our name?
# Bash internal shorthand that works like the "basename" command.
ME="${0##*/}"

declare -i dbg=0

## Invocation:
## usage [ <exitstatus> [ <message>... ] ]
function usage() {
    local -i exitstatus=${1-"1"};
    shift;
    (( dbg )) && echo "exitstatus=$exitstatus, \$*=$*"
    # If exit status is non-zero, redirect to stderr.
    (( exitstatus == 0 )) || exec >&2
    [ "$*" ] && echo "$@"
    echo "Usage: $ME <home> <rvm_root> <rvm_build> <arguments-for-rvm>... ";
    exit $exitstatus;
}

## croak_usage  <message>... 
function croak_nonusage () {
    # Display the error message.  If it's a multi-line error message, indent
    # the second and subsequent lines by a few spaces.  
    # Try to auto-wrap the message if we have GNU Fold.

    local gnufold="/usr/bin/fold --width=65 --spaces"
    $gnufold < /dev/null &> /dev/null || gnufold=cat

    echo "${ME}: $*" | $gnufold | sed -e '2,$s/^/     /' >&2
    trap '' EXIT
    exit 1
}


# Just to be sure we're being run properly.
(( $# < 3 )) && usage 1 "Too few arguments.  This program is designed to be run indirectly by the 'rvm' command."
    

## These have already been err-checked for us by "rvm".
home="$1";      shift;  # Used to be $HOME
rvm_root="$1";  shift;  # Used to be $RVM_ROOT
rvm_build="$1"; shift;  # Used to be $RVM_BUILD


# TODO: This portion of the runrvm program should be consolidated with
# the originally-identical part of the gdbrvm program.

## If you change anything below this point, you probably want to 
## change gdbrvm as well.

# Load up where the RVM bootimage, booter, and runtime support files reside:
declare -r env="$rvm_build/environment.target"
[[ -f $env ]] || croak_nonusage "There is no file named \"$env\"; have you set RVM_BUILD to a Jikes RVM build directory that was initialized by \"jconfigure\"?"
[[ -r $env ]] || croak_nonusage "The file \"$env\" doesn't allow me to read it; some sort of permissions problem?"
. $env

## Set us up so that we use the Xalan XML parser, if it is available.
## Xalan works better than the limited XML parsing built into GNU Classpath.

## Check that Xalan is sane.  Uses XALAN_J_DIR and xalan_bin

function xalan_is_sane () {
    local jar_file

    for jar_file in bsf.jar xalan.jar xml-apis.jar xercesImpl.jar; do
	local f="${xalan_bin}/${jar_file}"
	if ! [[ -f $f ]]; then
	    echo >&2 "$ME: Your Jikes RVM configuration set XALAN_J_DIR to
    \`$XALAN_J_DIR', but I can not find a file that should be there:
    \`${f}'.  Since your Xalan installation appears broken, I will not use it."
	    return 1		# Failure
	fi
    done
    return 0
}

function setup_xalan () {
    xalan_cp=""	# Xalan's Classpath
    xalan_property=""
    [[ ! ${XALAN_J_DIR-} ]] && return;
    local xalan_bin=${XALAN_J_DIR}/bin
    if xalan_is_sane; then
	xalan_property=-Djavax.xml.transform.TransformerFactory=org.apache.xalan.processor.TransformerFactoryImpl
	xalan_cp="$xalan_bin/xalan.jar:$xalan_bin/xml-apis.jar:$xalan_bin/xercesImpl.jar:$xalan_bin/bsf.jar"
	## The second Xalan binary distribution (the distribution called
	## "xalan-j_2_6_0-bin-2jars.tar.gz") has a separate file named 
	## "xsltc.jar".  Support either the first distribution or the 
	## second distribution.
	[[ -f $xalan_bin/xsltc.jar ]] \
		&& xalan_cp="${xalan_cp}:${xalan_bin}/xsltc.jar"
    fi
}

setup_xalan			# Set xalan_cp and  xalan_property

# The arguments we'll invoke $rvm_build/JikesRVM.  We
# will put these before any user-specified arguments, so that any flags
# that the user may have explicitly specified will override our defaults.

declare -r os_version="$(uname -r)"
declare -r os_name="$(uname -s)"
declare -a sys_args
sys_args=("-X:i=$rvm_build/RVM.image" \
		"-X:vmClasses=$rvm_build/RVM.classes/jksvm.jar:$rvm_build/RVM.classes/rvmrt.jar${RVM_BOOTCLASSPATH_APPEND:+:}${RVM_BOOTCLASSPATH_APPEND-}${xalan_cp:+:}${xalan_cp}" \
		$xalan_property						\
		"-Duser.timezone=$(date +%Z)"				\
		"-Drvm.root=$rvm_root"					\
		"-Drvm.build=$rvm_build"				\
		"-Djava.home=$rvm_root"					\
		"-Dgnu.classpath.home.url=file:${rvm_build}"		\
		"-Dgnu.classpath.vm.shortname=JikesRVM"			\
		"-Duser.home=$home" "-Duser.dir=$(pwd)"			\
		"-Duser.name=$(whoami)"					\
		"-Dos.name=${os_name}" "-Dos.version=${os_version}"	\
		"-Dos.arch=$(uname -m)"					\
 )

## This implementation is dependent upon subsequent uses of -cp and -classpath
## overriding previous uses.  This allows us to maintain the semantics that
## the CLASSPATH envar is overridden by any user-specified arguments.
declare -a classpath_args

if [[ ${CLASSPATH-UNSET} = UNSET ]]; then
    classpath_arg=();
else
    classpath_arg=('-classpath' "${CLASSPATH}");
fi

## The arguments the user specified.  These must come last.   If the
## user explicitly specified a -classpath argument, it will override
## ${classpath_arg[@]}
#
# Note: Writing it like this commented-out line below will break!  Must not
# incorporate the assignment into the declare, due to a bug in Bash 2.05b.
#
#declare -a user_args=("$@")
#
declare -a user_args
user_args=("$@")


## Return 0 if we need to use a single virtual processor, nonzero if we do not.
need_single_virtual_processor () {
    ## This is only for use with Linux; no other systems should need
    ## single-virtual-processor magic.  I hope.

    ## If we are on a 2.2 Linux kernel, then insist on single virt. processor
    if [[ $os_name = *inux* ]] && [[ $os_version == 2.2.* ]]; then
	return 0;
    fi

    ## First, figure out what the setting is for this build.
    ## Search all of the arguments, since later ones override earlier ones.

    # Possible values: true, false, debian, multiboot
    local val="${SINGLE_VIRTUAL_PROCESSOR_DEFAULT-false}" 
    for arg; do
	case "$arg" in
	    -X:singleVirtualProcessor=true)
		val=true;
		;;
	    -X:singleVirtualProcessor=false)
		val=false;
		;;
	    -X:singleVirtualProcessor=debian)
		val=debian;
		;;
	    -X:singleVirtualProcessor=multiboot)
		val=multiboot;
		;;
	    -X:singleVirtualProcessor=*)
		croak_nonusage "I got the bogus argument \"$arg\"
If -X:singleVirtualProcessor is specified, must give: -X:singleVirtualProcessor=<true|false|debian|multiboot>"
		exit 1
		;;
	esac
    done
    (( ! dbg )) || echo $0:$LINENO:val=$val

    if [[ $val = "multiboot" ]]; then
	if [[ -f /etc/debian_version ]]; then
	    val=debian
	else
	    val=false
	fi
    fi

    case "$val" in
	debian)
	    if [[ $os_version = 2.4.* ]]; then
		return 0;
	    else
		return 1;
	    fi
	    ;;
	true)
	    return 0
	    ;;
	false)
	    (( ! dbg )) || echo "Returning 1"
	    return 1
	    ;;
	*)
	    croak_nonusage "Internal error: the config file \"$env\" probably specified SINGLE_VIRTUAL_PROCESSOR_DEFAULT as $val; I don't understand that value"
	    ;;
    esac
}
    

## Set up any preloads for syswrap, which we will use if we need to properly
## intercept the select() call.
## Whether it's compiled at all is determined at build time by
## RVM_WITHOUT_INTERCEPT_BLOCKING_SYSTEM_CALLS.  At run time, we need to
## disable it if we are in single-virtual-processor mode, since it
## requires that a pthread be available.
syswrap_preload=""		# Reset if need to preload for syswrap.
declare -r syswrap_filename="${rvm_build}/libsyswrap.so"
if [[ -f ${syswrap_filename} ]]; then
    syswrap_preload="${syswrap_filename}"
fi

preload=""			# Reset this if we need to preload something
				# for single-virtual-processor mode.
if need_single_virtual_processor "${user_args[@]}"; then
    prog="$rvm_build/JikesRVM.no-pthreads"
else
    preload="${preload} ${syswrap_preload}"
    prog="$rvm_build/JikesRVM"
fi
(( ! dbg )) || echo preload=$preload


# Now execute the VM
if ! [[ -f $prog ]]; then
    if [[ -f "$rvm_build/JikesRVM" ]]; then
	croak_nonusage "Cannot find a file named \"$prog\"; it appears that this Jikes RVM build does not have support for a single virtual processor.  Try setting RVM_WITH_SINGLE_VIRTUAL_PROCESSOR_SUPPORT=1 in the config file, then rerun jconfigure and jbuild."
    else
	croak_nonusage "Cannot find a file named \"$prog\"; have you set RVM_BUILD to a Jikes RVM build directory that contains a successfully-completed build?"
    fi
fi

[[ -x $prog ]] || croak_nonusage "Cannot execute the file named \"$prog\"; some sort of permissions problem.  Something weird is happening.  Maybe somebody with a highly restrictive \"umask\" compiled Jikes RVM?"

## "shopt -s execfail" is needed so that we can print a better error
## message if we fail to execute the JikesRVM executable.  Otherwise,
## in case of a file format incompatibility (trying to exec an AIX
## binary on Linux, for example) we get the potentially misleading message:
##
## /home/augart/JikesRVM/Clean//rvm/bin/runrvm: /home/augart/JikesRVM/Clean//Build.AIX.EABBCM/JikesRVM: cannot execute binary file
## /home/augart/JikesRVM/Clean//rvm/bin/runrvm: /home/augart/JikesRVM/Clean//Build.AIX.EABBCM/JikesRVM: Success
## Now we can at least append a message saying "FAIL" after the
## misleading message.
shopt -s execfail

(( ! dbg )) || echo LD_PRELOAD="${preload}" exec "$prog" "${sys_args[@]}" "${classpath_arg[@]}" "${user_args[@]}"
LD_PRELOAD="${preload}" exec "$prog" "${sys_args[@]}" "${classpath_arg[@]}" "${user_args[@]}"
declare -r -i status=$?
echo >&2  "$ME: Failed to execute $prog (command status $status); can't run Jikes RVM"
exit $status
