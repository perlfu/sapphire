#! /bin/bash
#
# (C) Copyright IBM Corp. 2001, 2003, 2004, 2005
# $Id$
#
# This file defines a set of environment variables needed to build and
# run Jikes RVM.  This file is sourced by the installation scripts; you
# do not need to source this file into your command-prompt shell.
#
# IMPORTANT: You may need to modify this file to reflect your environment!
#
# This file is pre-configured for x86 hosts running GNU/Linux

#########
# PART I: Preprocessor directives that hold for every config on this target
#
# If you're using Debian GNU/Linux with a 2.2 or 2.4 kernel, then 
# you'll want to enable RVM_FOR_SINGLE_VIRTUAL_PROCESSOR.  Otherwise, 
# you should not need to change anything in this section.
#########

# The target architecture is Intel x86 (IA32)
export RVM_FOR_IA32=1
export RVM_FOR_32_ADDR=1

# The target OS kernel is Linux
export RVM_FOR_LINUX=1

# NOTE: the key requirement for setting this to 0 (ie having SMP support)
#       is that you have a 2.4 kernel and that glibc is compiled 
#       to use the GS segment register to access pthread-local storage.  
#	(Another way of saying this is that glibc is compiled to 
#	 handle "floating stacks").
#       See the FAQ in the Jikes RVM User's Guide.
#
#       This is now quite common. For example, in Red Hat 7 and later.  
#       So, the default is 0.  The Big Exception is if you are using Debian
#       GNU/Linux with a 2.4 or 2.2 kernel.  Debian with a 2.6 kernel will 
#	work, but it won't work with a 2.4 or 2.2 kernel.
#
export RVM_FOR_SINGLE_VIRTUAL_PROCESSOR=0
## Use this for Debian GNU/Linux with a Linux 2.4 kernel, 
## and for any Linux 2.2 kernel:
# export RVM_FOR_SINGLE_VIRTUAL_PROCESSOR=1

export BOOTIMAGE_DATA_ADDRESS=0x60000000
export BOOTIMAGE_CODE_ADDRESS=0x64000000
export BOOTIMAGE_RMAP_ADDRESS=0x67000000
export MAXIMUM_MAPPABLE_ADDRESS=0xb0000000

##########
# PART II: Where to find tools and resources on this target
#
# The configuration process can make use of auto-guessing features in
# the RVM_ROOT/rvm/bin/jconfigure program.  You can see the results of
# its guesses in "RVM_BUILD/environment.host".  (This particular file
# doesn't use those features, though, since they won't work if
# you're doing a cross-build.)
#
# Useful command to specify Jikes RVM compiler options in a file:
# ./jconfigure -DOPT_ARGS="\\\`cat \$RVM_ROOT/rvm/bin/bc-opts\\\`" <build>
########## 

# Selection of GNU Classpath version is platform independent and fairly
# involved; therefore it has been factored out into a separate file.
. $RVM_ROOT/rvm/config/classpath-version

# Set HOST_VM_TYPE to reflect the JVM the Jikes RVM will be built upon.
# Choose Sun for Sun, IBM and jrockit JVMs.
# Choose Kaffe for the Kaffe JVM.
# Choose JikesRVM for the Jikes RVM
#  NB The Jikes RVM building itself does not work yet, due to trouble
#  separating the namespaces of the Builder Jikes RVM and the Jikes
#  RVM being built.
HOST_VM_TYPE=Sun

# Root of JDK installation.
[[ ${HOST_JAVA_HOME-} ]] || HOST_JAVA_HOME="/usr/lib/jvm/java-1.4.2"

# the JDK java executable
# useful arguments:
# For Sun JVMs: extra compilation speed: -server
# For IBM JVMs: Better exception information: -Djava.compiler=NONE
export HOST_VM_RT="$HOST_JAVA_HOME/jre/bin/java"

# 1.4.x JDKs on Linux seem to require that LD_LIBRARY_PATH be set to include
# the JRE's various library paths (otherwise they don't find their .so files 
# when invoked from shell scripts and make).
# Here's how to do it to use HotSpot server with Blackdown 1.4.1
export HOST_JAVA_LD_LIBRARY_PATH="$HOST_JAVA_HOME/jre/lib/i386/:$HOST_JAVA_HOME/jre/lib/i386/server"
# Here's how to do it to using the IBM 1.4.1 DK 
#export HOST_JAVA_LD_LIBRARY_PATH="$HOST_JAVA_HOME/jre/bin/classic:$HOST_JAVA_HOME/jre/bin/"

# the JDK Javadoc executable
export HOST_JAVADOC="${HOST_JAVA_HOME}/bin/javadoc"

# the JDK javac executable
export HOST_JAVAC="${HOST_JAVA_HOME}/bin/javac -source 1.4 -target 1.4"

# the JDK jar executable
export JAR="$HOST_JAVA_HOME/bin/jar"

# the JDK standard library jar files
export HOST_REPOSITORIES="$HOST_JAVA_HOME/jre/lib/rt.jar"

# the JDK tools jar
export HOST_TOOLS="${HOST_JAVA_HOME}/lib/tools.jar"

# Path for GNU make
export GNU_MAKE="/usr/bin/make"

# Path for the Jikes java-to-byte-code compiler.
# We recommend version 1.22
export JIKES=/usr/bin/jikes

## What C compiler should be used?  We only use the GNU C compiler on
## the project, although we have tried to conditionalize any
## GCC-specific constructs to give other compilers a chance of
## working.  Please treat any unconditionalized GCC-specific construct
## as a bug and report it.
## 
## Some of the Jikes RVM code we build is in the form of shared
## libraries.  These require position-independent code (PIC).  Rather
## than invoke the C compiler in two different ways (one for PIC, one
## not), thereby adding Yet Another Configuration Variable, we take a
## slight performance hit and always generate position-independent
## code.

## GCC Warnings:
## The definitions with the (commented-out) long list of warning flags 
## are the warnings that one of the  project developers (Steve Augart) always
## uses when building Jikes RVM.   Some of these warnings are not present 
## in all versions of GCC.  That is why this particular setting of CC is 
## not the default.
##
## We don't usually set -Wundef since Bison's "bison.simple" file refers to
## preprocessor macros that are not defined.

# export CC="/usr/bin/gcc -pipe -ggdb3 -O -fPIC -W -Wall -Wbad-function-cast -Wcast-align -Wpointer-arith -Wcast-qual -Wshadow -Wstrict-prototypes -Wmissing-prototypes -Wmissing-declarations -fkeep-static-consts -fkeep-inline-functions -Wwrite-strings -Wno-aggregate-return -Wmissing-noreturn -Wnested-externs -Wtrigraphs -Wconversion -Wsign-compare -Wno-float-equal -Wmissing-format-attribute -Wno-unreachable-code -Wdisabled-optimization -m32"
export CC="gcc -w -pipe -ggdb3 -O -fPIC -m32"

## What C++ compiler should be used?
# export CPLUS='/usr/bin/g++ -pipe -ggdb3 -fPIC -W -Wall  -Wcast-align -Wpointer-arith -Wcast-qual -Wshadow -Wstrict-prototypes -Wmissing-prototypes  -fkeep-static-consts -fkeep-inline-functions -Wwrite-strings -Wno-aggregate-return -Wmissing-noreturn  -Wtrigraphs -Wconversion -Wsign-compare -Wno-float-equal -Wmissing-format-attribute -Wno-unreachable-code -Wdisabled-optimization -fcheck-new -fpermissive -Wctor-dtor-privacy -Wnon-virtual-dtor -Wreorder -Woverloaded-virtual -Wsign-promo -O -m32'
export CPLUS="g++ -w -pipe -ggdb3 -O -fPIC -m32"


# how to link a shared C++ library (possibly also recompile one 
# or more source files in it)
export LDSHARED="${CPLUS} -shared"

# The configuration for building the user guide.
# You may have to edit this file.
export USER_GUIDE_CONFIG="${RVM_ROOT}/rvm/doc/userguide/config.mk"

# AWK: For some Unix commands used in the regression test rules.
export AWK="/usr/bin/awk"

export BASH="/bin/bash"
# You need one of Yacc or Bison (one will usually be installed)
# If you're using Bison, uncomment the line below:
# BISON="bison"
export CVS="/usr/bin/cvs"
export DIFF="/usr/bin/diff"
export FGREP="/bin/fgrep"
export FIND="/usr/bin/find"
export GNU_TAR=/bin/tar
export GREP="/bin/grep"
export MD5SUM="/usr/bin/md5sum"
export PS="/bin/ps"
export SED="/bin/sed"
export XARGS="/usr/bin/xargs"
export UNZIP_CMD="/usr/bin/unzip"

##########
# PART III: Additional variables for running Eclipse on Jikes RVM
########## 

## Uncomment this and set it to the directory created when you extracted
## eclipse-SDK-3.0-linux-gtk.zip  or eclipse-platform-3.0-linux-gtk.zip 

## (Eclipse extracts itself into a directory named "eclipse",
##  without a version number.)
# export ECLIPSE_INSTALL_DIR="$HOME/Eclipse-3.0/eclipse"

## To run Eclipse on Jikes RVM, you will need to use the Xalan XML parser.
## Setting up to use Xalan may also help you run other programs
## under Jikes RVM.
##
## We tested using XALAN 2.6.0; visit http://xml.apache.org/xalan-j/
## and download the "Xalan Java binary distribution", since that
## distribution has Xerces packaged with it.  The file is
## xalan-j_2_6_0-bin.tar.gz.

## Unlike how we treat the Classpath .jar file and .so files, we don't
## copy Xalan into $RVM_BUILD.  (We could easily modify the build system to do
## so, though.)
# export XALAN_J_DIR="/usr/local/xalan-j_2_6_0"

## ANT is only used by the jbuild.plugin build script.
## Uncomment this if you have Ant installed, and edit it appropriately.
# export ANT_CMD=$ANT_HOME/bin/ant

##########
# PART IV: Miscellaneous variables.
#
# If you add any variables to this section, please document them.  Please.
##########

# BENCHMARK_ROOT is used in running some of the Jikes RVM regression
# tests.  It doesn't need to be set unless you are running those tests.
export BENCHMARK_ROOT=""

# Used for the Emacs spell-checker
#  LocalWords:  JDK JDKs LD JRE's HotSpot Blackdown DK CPLUS LDSHARED JNI ld bM
#  LocalWords:  bnoentry SRE lc bE
