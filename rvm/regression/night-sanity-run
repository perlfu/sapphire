#!/bin/ksh
#
# (C) Copyright IBM Corp. 2001
#
# $Id$
#
# @author Julian Dolby

# This script will run sanity and performance tests.  
# It assumes the boot images have 
# already been built.  (See night-sanity-build.)
# The output of this script is the results from the sanity test
# (The results of the fullshadow are stored in the file defined in
#  the VERBOSE_LOG variable.)

# Pick up defs of platform tools
. $RVM_HOST_CONFIG

# How often to look to see if the builds are done
SLEEP_DURATION="120"

export PATH=$PATH:.

# the resulting message
MSG=$RVM_ROOT/MSG

# Note: The following comment assumes that NightSanityDriver will continue to 
# look in rvm/regression/config for config files.  If this ever changes, 
# update this statement.
CONFIG_DIR=rvm/regression/config

# The directory where the archive lives
export ARCHIVE=~/archive

mkdir -p $RVM_ROOT/results

# Where the fullshadow and other verbose output are placed, not mailed
export VERBOSE_LOG=$RVM_ROOT/results/verbose.log

# Where the build output is placed, this is mailed when the tests failed
export BUILD_LOG=$RVM_ROOT/results/build.log

# Where the run output is placed, this is mailed when the tests failed
export RUN_LOG=$RVM_ROOT/results/run.log

# Where the performance results are placed
export PERF_LOG=$RVM_ROOT/results/performance.log

umask 022

# Determine architecture and set number of processors accordingly
ARCH=`uname`
if [[ $ARCH = 'Linux' ]] then
  NUM_PROCS=4
else
  NUM_PROCS=2
fi

echo >> $RUN_LOG
#This shouldn't be needed, but just in case
chmod 755 $RUN_LOG

# cd to the SHADOW to get things started
cd $RVM_ROOT

# sanity runs
echo "\n\nRunning the sanity tests as specified in $CONFIG_DIR/$1 \n" >> $RUN_LOG

$RVM_ROOT/rvm/regression/NightSanityDriver -common "-images $RVM_ROOT/images -result $RVM_ROOT/results/sanity -nobuild -numprocs $NUM_PROCS -wait sem" -config $1 >> $RUN_LOG 2>> $RUN_LOG

# performance runs
echo "\n\nRunning the performance tests as specified in $CONFIG_DIR/$2\n" >> $RUN_LOG

$RVM_ROOT/rvm/regression/NightSanityDriver -common "-images $RVM_ROOT/images -result $RVM_ROOT/results/performance -nobuild -numprocs $NUM_PROCS -wait sem -performance $PERF_LOG" -config $2 >> $RUN_LOG 2>> $RUN_LOG

# measure compilation time
echo "\n\nRunning the measure compilation time tests\n" >> $RUN_LOG

export  MEASURE_COMPILATION_DIR=$RVM_ROOT/results/measureCompilation
mkdir -p $MEASURE_COMPILATION_DIR

$RVM_ROOT/rvm/regression/NightSanityDriver -common "-images $RVM_ROOT/images -result $MEASURE_COMPILATION_DIR -nobuild -numprocs $NUM_PROCS -measureCompilation -wait sem -rc-args -X:measureCompilation=true -use-opt-levels 'O0 O1 O2'"  -config night-sanity-measure-compilation-config >> $RUN_LOG 2>> $RUN_LOG

# Fix the permission bits because umask doesn't seem to be working correctly
echo "fixing permission bits" >> $RUN_LOG
chmod -R 755 $RVM_ROOT 2>> $RUN_LOG

# Archive result files and performance results
echo "Archiving results into $ARCHIVE\n" >> $RUN_LOG
tarfile=$ARCHIVE/archive.`date +"%A"`.`uname`.tar.gz
($RVM_ROOT/rvm/regression/copyBuildTraceFiles $RVM_ROOT/images $RVM_ROOT/results; find $RVM_ROOT/results -name cp -exec rm -rf {} \;; cd $RVM_ROOT; $GNU_TAR czvf $tarfile results) >> $VERBOSE_LOG 2>> $VERBOSE_LOG

echo "sending tar to dW" >> $VERBOSE_LOG 2>> $VERBOSE_LOG
cd $RVM_ROOT/sanityResults
TRANSFER_FILE_NAME=`date +"%A"`.`uname`.tar.gz
cp $tarfile $TRANSFER_FILE_NAME
$CVS add $TRANSFER_FILE_NAME >> $VERBOSE_LOG 2>> $VERBOSE_LOG
$CVS commit -m "night sanity" $TRANSFER_FILE_NAME >> $VERBOSE_LOG 2>> $VERBOSE_LOG
rm -f $TRANSFER_FILE_NAME
mv CVS/Entries CVS/tmp
grep -v $TRANSFER_FILE_NAME < CVS/tmp > CVS/Entries
rm -f CVS/tmp
cd $RVM_ROOT


# determine how many ran, failed, and passed, then build a summary line
numran=`grep "sane" $RUN_LOG | wc -l`
numfailed=`grep "You are NOT sane" $RUN_LOG | wc -l`
numpassed=`grep "You are sane" $RUN_LOG | wc -l`
echo "Ran $numran, Passed \t$numpassed, Failed \t$numfailed" >> $RUN_LOG

if [[ $numran -eq 0 ]] then
  echo "*** No tests were run! *** " >> $MSG
  echo "There was probably an error in building the boot images.\n\n" >> $MSG
else
#  Build the summary line
  echo "Ran \t$numran \nPassed \t$numpassed\nFailed \t$numfailed \n\n" >> $MSG
fi

# Also report the number of javadoc errors
numjavadocErrors=`grep warning $RVM_ROOT/doc/api/javadoc.out | sort | uniq | wc -l`
if [[ $numjavadocErrors -eq 0 ]] then 
  echo "There were no javadoc errors." >> $MSG
else 
  echo "There were $numjavadocErrors javadoc errors." >> $MSG
fi

# Print some details on the failures
if [[ $numfailed -gt 0 ]] then
  echo >> $MSG
  echo Failure Details >> $MSG
  echo --------------- >> $MSG
  fgrep "You are NOT sane" $RUN_LOG  \
    | sed -e "s/RunSanityTests://"   \
    | sed -e "s/\/.*tests\///"   \
    | sed -e "s/You are NOT sane/Failed/"   \
    >> $MSG
fi

if [[ $numjavadocErrors -gt 0 && $numjavadocErrors -lt 50 ]] then 
  echo >> $MSG
  echo Javadoc Errors >> $MSG
  echo -------------- >> $MSG
  grep warning $RVM_ROOT/doc/api/javadoc.out | sort | uniq >> $MSG
fi

# Describe where the information can be found
echo "\nOutput of this run is available (for 24 hours) at http://www-124.ibm.com/developerworks/oss/jikesrvm/sanityResults/$TRANSFER_FILE_NAME" >> $MSG
echo "  Sanity tests are specified in $CONFIG_DIR/$1" >> $MSG
echo "  Performance tests are specified in $CONFIG_DIR/$2" >> $MSG

# Grab the bottom line performance and place it in a more visible place
echo >> $MSG
echo >> $MSG
echo Performance Summary >> $MSG
$AWK -f $RVM_ROOT/rvm/regression/PerformanceBottomLine.awk $RVM_ROOT/results/performance.log >> $MSG

# Print verbose performance data for SPECjvm98
echo >> $MSG
echo SPECjvm98 Performance Details >> $MSG
echo ----------------------------- >> $MSG
$AWK -f $RVM_ROOT/rvm/regression/PerformanceVerbose.awk -v targetBench=SPECjvm98 $RVM_ROOT/results/performance.log >> $MSG

# gather measure compilation results
echo "\n\n Opt Level 0 compilation breakdown for SPECjvm98 size 100\n" >> $MSG
$AWK -f $RVM_ROOT/rvm/regression/findMeasureCompilationResults.awk $MEASURE_COMPILATION_DIR/rvm/regression/tests/SPECjvm98/out.SpecApplication.FastSemiSpace.O0.?proc.raw >> $MSG
#
echo "\n\n Opt Level 1 compilation breakdown for SPECjvm98 size 100\n" >> $MSG
$AWK -f $RVM_ROOT/rvm/regression/findMeasureCompilationResults.awk $MEASURE_COMPILATION_DIR/rvm/regression/tests/SPECjvm98/out.SpecApplication.FastSemiSpace.O1.?proc.raw >> $MSG
#
echo "\n\n Opt Level 2 compilation breakdown for SPECjvm98 size 100\n" >> $MSG
$AWK -f $RVM_ROOT/rvm/regression/findMeasureCompilationResults.awk $MEASURE_COMPILATION_DIR/rvm/regression/tests/SPECjvm98/out.SpecApplication.FastSemiSpace.O2.?proc.raw >> $MSG

# Finally!  Send the mail message to those who care
# echo "mailing status to $RESULT_MAILING_LIST"
cat $MSG >> $RUN_LOG

if [[ $numran -gt 0 && $numfailed -eq 0 ]] then
  cat $MSG | mail -s "[$ARCH] regression SUCCEEDED" $RESULT_MAILING_LIST 
else
  cat $MSG | mail -s "[$ARCH] regression FAILED $numfailed tests" $RESULT_MAILING_LIST
fi

#
# Check that files contain an @author tag, a CVS Id tag, and a Copyright notice.
# Only run on one machine: currently AIX
#
if [[ $ARCH = 'AIX' ]] then
  export CHECK_DIR=$RVM_ROOT/results

  # Check files
  $RVM_ROOT/rvm/bin/findDeviantFiles $RVM_ROOT/rvm $CHECK_DIR rvm
 
  # Email results 
  # Only email to volations to $RESULT_MAILING_LIST
  if [[ -s $CHECK_DIR/noAuthor.rvm ]] then
   cat $CHECK_DIR/noAuthor.rvm    | mail -s "files without an @author tag"     $RESULT_MAILING_LIST
#  else
#   echo " " | mail -s "no files without an @author tag"     pfs 
  fi
  if [[ -s $CHECK_DIR/noId.rvm ]] then
    cat $CHECK_DIR/noId.rvm       | mail -s "files without a CVS Id tag"       $RESULT_MAILING_LIST
#  else
#    echo " " | mail -s "no files without a CVS Id tag"       pfs 
  fi
  if [[ -s $CHECK_DIR/noCopyright.rvm ]] then
    cat $CHECK_DIR/noCopyright.rvm| mail -s "files without a Copyright notice" $RESULT_MAILING_LIST
#  else
#    echo " " | mail -s "no files without a Copyright notice" pfs 
  fi
fi

