#!/bin/ksh
#
# (C) Copyright IBM Corp. 2001
#

vmoptions="-h320 -lh50"

# If you want verbose output of command executions...
set -x

DIR="/u/hind/local/logs"
PROCS="2"
OPTS="0 1 2"
AIOPTS="true false"

function say
   {
   print "$ME: $*"
   }

# Run a test.
# We impose a time limit to ensure that additional tests can proceed if this one hangs.
#
function doRun
   {
     # test will be terminated if it doesn't finish in this many seconds
     (( TIME_LIMIT = 60 * 30 ))
   
     # start test running
     say "start $CMD at `date \"+%m/%d/%Y %T\"`"
   ( $CMD )&
     TESTER_PID=$!
  
     # start deadman timer to terminate execution of vm if test runs too long
   ( sleep $TIME_LIMIT; 
     RVM_PID=`/usr/bin/ps -e | /usr/bin/awk '/Jalapeno/{print $1}'`
     if [[ $RVM_PID != "" ]]; then
        say "timeout for process $RVM_PID"
        /bin/kill -TERM $RVM_PID 2>/dev/null
     fi )&
     TIMER_PID=$!
   
     # wait for test to finish (or timeout)
     wait $TESTER_PID
     say "end $CMD at `date \"+%m/%d/%Y %T\"`"
                           
     # stop deadman timer
     /bin/kill -TERM $TIMER_PID 2>/dev/null
     
     # allow process termination messages to finish printing before proceeding to next test
     sleep 1
   }


   export RVM_BUILD=~/rvmBuild.FastOptBasecopyingGC
   print "running Base on $benchmark for size $SIZE" 
   CMD="jalapeno $vmoptions -processors $PROCS  TestDriver -longcommandline self.classes"
   doRun

#JIT configs, 0, 1, 2
   export RVM_BUILD=~/rvmBuild.Fast
   for opt in $OPTS
   do

   CMD="jalapeno $vmoptions -processors $PROCS -X:rc:O$opt TestDriver -longcommandline self.classes"
   doRun

   done

#  Toggle this next line depending on what you want to run

#   export RVM_BUILD=~/rvmBuild.FastAdaptivecopyingGC
   export RVM_BUILD=~/rvmBuild.FastAdaptiveNoLogcopyingGC

# Single level adaptive, one for each level
    for opt in $OPTS
    do
    CMD="jalapeno $vmoptions -processors $PROCS -X:aos:adaptive_recompilation=false -X:aos:default_opt_level=$opt -X:aos:logging_level=1 -X:aos:lf=$DIR/optbench-steady.opt$opt.out -X:aos:adaptive_inlining=false -X:aos:hotness_adjust_rate=999999999 TestDriver -longcommandline self.classes"
   doRun

   done	

# multi level with and without AI
    for ai in $AIOPTS
    do
    CMD="jalapeno $vmoptions -processors $PROCS -X:aos:adaptive_recompilation=true -X:aos:logging_level=1 -X:aos:lf=$DIR/optbench-steady.multi-$ai.out -X:aos:adaptive_inlining=$ai -X:aos:hotness_adjust_rate=999999999 TestDriver -longcommandline self.classes"
   doRun

    done
