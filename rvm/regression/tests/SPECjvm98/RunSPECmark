#!/bin/ksh
#
# (C) Copyright IBM Corp. 2001
#
#
# Usage: RunSPECmark <vmBuildDirectory> numProcessors [RVM_ARGS] [SUFFIX]
#  RVM_ARGS (optional) "-X:....." arguments to opt compiler and/or jalapeno
#
# Run the size 100 tests

trap "killEveryone" 1 2 3 15

export RVM_BUILD=$1
PROCESSORS="$2"
RVM_ARGS="$3"
SUFFIX_STRING="$4"
SUFFIX=`head -1 $RVM_BUILD/RVM.configuration | cut -d" " -f3`

function say
   {
   print "$ME: $*"
   }

# kill all processes involved in this test
function killEveryone
   {
#     RVM_PID=`/usr/bin/ps -e | /usr/bin/awk '/JikesRVM/{print $1}'`
#     RUN_PID=`/usr/bin/ps -Af | /usr/bin/awk '/Run100/{print $2}'`
#     RVM_PID="$RUN_PID $RVM_PID"
#     if [[ $RVM_PID != "" ]]; then
#	for i in `echo $RVM_PID` 
#	do
#          say "timeout for process $i"
#          /bin/kill -9 $i
#        done
#     fi

    $RVM_ROOT/bin/watson/rkill $TIMER_PID
    say "timeout for process $i"
    $RVM_ROOT/bin/watson/rkill $TESTER_PID
   }

# test will be terminated if it doesn't finish in this many seconds
(( TIME_LIMIT = 60 * 45 ))

# pick up environment from build directory
. $RVM_BUILD/environment

# start test running
( $GNU_MAKE SPECmark JBOOT="$RVM_ROOT/bin/jalapeno -X:i=$RVM_BUILD/RVM.image" BOOTNAME=$SUFFIX RVM_ARGS="$RVM_ARGS" SUFFIX_STRING="$SUFFIX_STRING" PROCESSORS=$PROCESSORS )&
TESTER_PID=$!

# start deadman timer to terminate execution of vm if test runs too long
( sleep $TIME_LIMIT; 
  killEveryone
  )&
TIMER_PID=$!
   
# wait for test to finish (or timeout)
wait $TESTER_PID
                           
# kill any leftovers
killEveryone

# stop deadman timer
/bin/kill -TERM $TIMER_PID 2>/dev/null



# check for valid runs using the appropriate result file name
resultFile=specmark.${SUFFIX}.${SUFFIX_STRING}

#check to make sure the results are valid, return non-zero if they aren't
awk '

function check (test) {
  if (!started[test] \
      || roundsStarted[test] < 4 \
      || roundsFinished[test] != roundsStarted[test]) exit 1;
}

$3 ~ /Starting/        {benchmark=$2; started[benchmark]=1}
$3 ~ /start\./         {roundsStarted[benchmark]++}
$3 ~ /Finished/        {roundsFinished[benchmark]++}
/Stack/                {exit 1}
END                    { check("_200_check");
                         check("_201_compress"); 
                         check("_202_jess"); 
                         check("_209_db"); 
                         check("_213_javac"); 
                         check("_222_mpegaudio"); 
                         check("_227_mtrt"); 
                         check("_228_jack");
			 exit 0}' ${resultFile}
