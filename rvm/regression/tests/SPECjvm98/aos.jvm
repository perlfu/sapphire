#! /bin/bash
#
# (C) Copyright IBM Corp. 2001
#
# $Id$
#
# This shell script executes the AOS configuration of an adaptive JikesRVM 
# image without adaptive inlining for a particular SPECjvm98 benchmark.
#
# Parameters:
#   benchmark name    
#   input size      as either 1, 10, or 100    
#   sequence	    sequence number for unique identification.  
#   output          where to put output files
#
# CONSTRAINT:
# Expect RVM_BUILD to be set to an adaptive configuration.
#
# @author: Peter F. Sweeney
# @date: 10/5/2001

if [[ $# = 0 || $1 = -help || $# < 1 ]]; then
  more <<EOF
   
  This shell script executes the AOS configuration of an adaptive JikesRVM 
  image without adaptive inlining for a particular SPECjvm98 benchmark.

  Normally it is invoked as:
    $0 benchmark inputSize|+ sequence|+ outDir

  Where 
    benchmark     SPECjvm98 benchmark name (e.g. _201_compress).
    inputSize     specifies how long to run the benchmark.  
                  inputSize can be either 1 (short), 10 (medium), or 100 (long).
                  The default is 1.
    sequence      sequence number for unique identification.  
                  The default is 0.		 
    outDir        where to put output files.
                  The default is the current directory.
    
EOF
exit 1
fi

# JikesRVM root directory
#
if [[ $RVM_ROOT = "" ]]; then
   echo "$0: please set your RVM_ROOT environment variable (eg. $HOME/jvmShadow)"
   exit 1
fi

# Place where Jikes RVM bootimage, booter, and runtime support files reside.
#
if [[ $RVM_BUILD = "" ]]; then
   echo "$0: please set your RVM_BUILD environment variable (eg. $HOME/jvmBuild)"
   exit 1
fi

case $RVM_BUILD in
  *Adaptive* ) ;;
  * ) echo "Expecting an adaptive configuration"; exit 1;;
esac

if [[ $RVM_SPECJVM98 = "" ]]; then
  echo -e "$0: RVM_SPECJVM98 environment variable not set; \n\tRVM_SPECJVM98=\"/.../watson.ibm.com/fs/users/J/jalapeno/jalapeno2/benchmarks-modified/SPECjvm98\""
  RVM_SPECJVM98="/homes/meriadoc/jalapeno/contrib/benchmarks/SPECjvm98"
fi

echo -e "RVM: BUILD: $RVM_BUILD\n     SPECJVM98: $RVM_SPECJVM98"

##################
# which benchmark?
benchmark=$1

####################################################
# Determine how long the benchmark should be run for
inputSize=1
if [[ $# = 2 || $# > 2 ]]; then
  if [[ $2 != '+' ]]; then
    inputSize=$2
  fi
fi
# Make sure input size is valid
if [[ $inputSize != 1 && $inputSize != 10 && $inputSize != 100 ]]; then
  echo -e "\n"$0": third argument must be 1, 10, or 100!  "$inputSize" is not valid!\n"
  exit 3
fi

###########################
# Determine sequence number
sequence=0
if [[ $# = 3 || $# > 3 ]]; then
  if [[ $3 != '+' ]]; then
    sequence=$3
  fi
fi

#####################################
# Determine where to put output files
outputDir="."
if [[ $# = 4 || $# > 4 ]]; then
  if [[ $4 != '+' ]]; then
    outputDir=$4
  fi
fi

numProcessors=1

   aos_log="$outputDir/aos.$benchmark.$inputSize.$numProcessors.:$k:.log.$sequence"
output_log="$outputDir/aos.$benchmark.$inputSize.$numProcessors.:$k:.output.$sequence"

echo ""
echo "inputSize: $inputSize, numProcessors: $numProcessors, sequence: $sequence"
echo "   aos_log: $aos_log"
echo "output_log: $output_log"
echo ""

logging_level=0
quantum=10
multiplier=1
# filterValue=0
# -X:aos:k_factor=$k  -X:aos:number_of_samples_filter=$filterValue
###############################
# set up command line arguments
# notify_vm_complete and measureCompilation results in compilation statistics
jvm_options="-Xms205 -Xmx250 -X:processors=$numProcessors -X:opt:errors_fatal=true -X:aos:lf=$aos_log -X:aos:adaptive_inlining=false -X:aos:logging_level=$logging_level -verbose:gc -X:vm:interruptQuantum=$quantum -X:vm:schedulingMultiplier=$multiplier"

# don't append ":." because it doesn't work, and don't need ./cp
cp="-classpath $RVM_SPECJVM98"
spec_options="-d3000 -g -m1 -M1 -s$inputSize"

echo "$RVM_ROOT/rvm/bin/rvm $jvm_options $cp SpecApplication  $spec_options -a $benchmark > $output_log"
$RVM_ROOT/rvm/bin/rvm $jvm_options $cp SpecApplication $spec_options -a $benchmark # > $output_log

