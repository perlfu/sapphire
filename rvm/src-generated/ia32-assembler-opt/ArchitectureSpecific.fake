/*
 *  This file is part of the Jikes RVM project (http://jikesrvm.org).
 *
 *  This file is licensed to You under the Common Public License (CPL);
 *  You may not use this file except in compliance with the License. You
 *  may obtain a copy of the License at
 *
 *      http://www.opensource.org/licenses/cpl1.0.php
 *
 *  See the COPYRIGHT.txt file distributed with this work for information
 *  regarding copyright ownership.
 */
package org.jikesrvm;
public class ArchitectureSpecific {
  public static final class VM_Assembler extends org.jikesrvm.compilers.common.assembler.ia32.VM_Assembler {
    public VM_Assembler (int bytecodeSize) {
      super(bytecodeSize, false);
    }
    public VM_Assembler (int bytecodeSize, boolean shouldPrint, VM_Compiler compiler) {
      super(bytecodeSize, shouldPrint, compiler);
    }
    public VM_Assembler (int bytecodeSize, boolean shouldPrint) {
      super(bytecodeSize, shouldPrint);
    }
  }
  public static final class VM_CodeArray extends org.jikesrvm.ia32.VM_CodeArray {}
  public static final class VM_Compiler extends org.jikesrvm.compilers.baseline.ia32.VM_Compiler {}
  public static final class VM_MachineCode extends org.jikesrvm.ia32.VM_MachineCode {
    public VM_MachineCode(ArchitectureSpecific.VM_CodeArray array, int[] bm) {
      super(array, bm);
    }}
  public interface VM_RegisterConstants extends org.jikesrvm.ia32.VM_RegisterConstants {}
}
