/*
 *  This file is part of the Jikes RVM project (http://jikesrvm.org).
 *
 *  This file is licensed to You under the Common Public License (CPL);
 *  You may not use this file except in compliance with the License. You
 *  may obtain a copy of the License at
 *
 *      http://www.opensource.org/licenses/cpl1.0.php
 *
 *  See the COPYRIGHT.txt file distributed with this work for information
 *  regarding copyright ownership.
 */
package org.jikesrvm.compilers.common.assembler.ia32;

import org.vmmagic.unboxed.Offset;
import org.vmmagic.unboxed.Address;
import org.jikesrvm.ia32.RegisterConstants.MachineRegister;


final class Lister {

  Lister (Assembler asm) {

  }

  void lockPrefix() {

  }

  void branchLikelyPrefix() {

  }

  void branchUnlikelyPrefix() {

  }

  void OP (int i, String op) {

  }

  void I (int i, String op, int n) {

  }

  void R (int i, String op, MachineRegister R0) {

  }

  void RD (int i, String op, MachineRegister R0, Offset d) {

  }

  void RI (int i, String op, MachineRegister R0, int n) {

  }

  void RDI (int i, String op, MachineRegister R0, Offset d, int n) {

  }

  void RNI (int i, String op, MachineRegister R0, int n) {

  }

  void RR (int i, String op, MachineRegister R0, MachineRegister R1) {

  }

  void RDR (int i, String op, MachineRegister R0, Offset d, MachineRegister R1) {

  }

  void RDRI (int i, String op, MachineRegister R0, Offset d, MachineRegister R1, int imm) {

  }

  public void RDRR(int i, String op, MachineRegister R0, Offset d, MachineRegister R1, MachineRegister R2) {

  }

  void RRD (int i, String op, MachineRegister R0, MachineRegister R1, Offset d) {

  }

  void RNR (int i, String op, MachineRegister R0, MachineRegister R1) {

  }

  void RN (int i, String op, MachineRegister R0) {

  }

  void RRN (int i, String op, MachineRegister R0, MachineRegister R1) {

  }

  void RA (int i, String op, Address d) {

  }

  void RFD (int i, String op, MachineRegister X, short s, Offset d) {

  }

  void RXD (int i, String op, MachineRegister R0, MachineRegister X, short s, Offset d) {

  }

  void RXDI (int i, String op, MachineRegister R0, MachineRegister X, short s, Offset d, int n) {

  }

  void RFDI (int i, String op, MachineRegister X, short s, Offset d, int n) {

  }

  void RAI (int i, String op, Address d, int n) {

  }

  void RRR (int i, String op, MachineRegister R0, MachineRegister R1, MachineRegister R2) {

  }

  void RNRI (int i, String op, MachineRegister R0, MachineRegister R1, int imm) {

  }

  public void RNRR(int i, String op, MachineRegister R0, MachineRegister R1, MachineRegister R2) {

  }

  void RRI (int i, String op, MachineRegister R0, MachineRegister R1, int imm) {

  }

  void RRXD (int i, String op, MachineRegister R0, MachineRegister R1, MachineRegister X, short s, Offset d) {

  }

  void RRFD (int i, String op, MachineRegister R0, MachineRegister X, short s, Offset d) {

  }

  void RRA (int i, String op, MachineRegister R0, Address d) {

  }

  void RXDR (int i, String op, MachineRegister R0, MachineRegister X, short s, Offset d, MachineRegister R1) {

  }

  void RXDRI (int i, String op, MachineRegister R0, MachineRegister X, short s, Offset d, MachineRegister R1, int imm) {

  }

  void RXDRR (int i, String op, MachineRegister R0, MachineRegister X, short s, Offset d, MachineRegister R1, MachineRegister R2) {

  }

  void RFDR (int i, String op, MachineRegister X, short s, Offset d, MachineRegister R0) {

  }

  void RFDRI (int i, String op, MachineRegister X, short s, Offset d, MachineRegister R0, int imm) {

  }

  void RFDRR (int i, String op, MachineRegister X, short s, Offset d, MachineRegister R1, MachineRegister R2) {

  }

  void RAR (int i, String op, Address d, MachineRegister R0) {

  }

  void RARI (int i, String op, Address d, MachineRegister R0, int imm) {

  }

  void RARR (int i, String op, Address d, MachineRegister R1, MachineRegister R2) {

  }

  void noteBytecode(int num, String str) {

  }

  void comment(int num, String comment) {

  }

  void comefrom(int num, int to) {

  }

  static String hex (byte b) {
      return null;
  }
}
