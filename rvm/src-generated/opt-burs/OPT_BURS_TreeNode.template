/*
 * This file is part of Jikes RVM (http://jikesrvm.sourceforge.net).
 * The Jikes RVM project is distributed under the Common Public License (CPL).
 * A copy of the license is included in the distribution, and is also
 * available at http://www.opensource.org/licenses/cpl1.0.php
 *
 * (C) Copyright IBM Corp. 2001
 */

package org.jikesrvm.opt.@_ARCH_@;

import org.jikesrvm.*;
import org.jikesrvm.opt.ir.*;
import org.jikesrvm.opt.OPT_DepGraphNode;

/**
 * An OPT_BURS_TreeNode is a node in a binary tree that is fed 
 * as input to BURS.
 * Machine-generated, do not edit.
 * 
 * @see org.jikesrvm.opt.OPT_BURS
 * @see OPT_BURS_STATE
 *
 * @author David Grove
 * @author Vivek Sarkar
 */
public class OPT_BURS_TreeNode implements OPT_BURS_Definitions {

  public ArchitectureSpecific.OPT_BURS_TreeNode child1;
  public ArchitectureSpecific.OPT_BURS_TreeNode child2;

  /** 
   * Dependence graph node corresponding to 
   * interior node in BURS tree (set to null for
   * leaf node or for OTHER_OPERAND node).
   */  
  public final OPT_DepGraphNode dg_node; 

  // oooo oooo oooo oooo nnnn nnnn trrr rrrr
  // o == opcode
  // n = non terminal
  // t = tree root
  // r = num of registers used
  private int word; 

  public final char getOpcode() {
    return (char)((word & 0xffff0000) >>> 16);
  }

  public final void setOpcode(char opcode) {
    word = (word & 0x0000ffff) | (opcode << 16);
  }

  // OUTPUT FIELDS FOR BURS:
  // nonterminal > 0 ==> this tree node is the
  // root of a "supernode"; the value of nonterminal
  // identifies the matching non-terminal
  // nonterminal = 0 ==> this tree node is NOT the
  // root of a "supernode".

  public final int getNonTerminal() {
     return ((word & 0xff00) >> 8);
  }

  public final void setNonTerminal(int nonterminal) {
     if (VM.VerifyAssertions) VM._assert(nonterminal <= 0xff);
     word = (word & 0xffff00ff) | (nonterminal << 8);
  }

  public final boolean isTreeRoot() { return (word & 0x80 ) != 0; }
  public final void setTreeRoot() { word |= 0x80; }

  public final void setNumRegisters(int r) {
    word = (word & 0xffffff80) | (r & 0x7f);
  }
  public final int numRegisters() {
    return word & 0x7f;
  }

  public final OPT_Instruction getInstruction() {
     return dg_node._instr;
  }

  /**
   * Constructor for interior node.
   */
  public OPT_BURS_TreeNode(OPT_DepGraphNode n) {
    OPT_Instruction instr = n._instr;
    dg_node = n;
    setOpcode(instr.getOpcode());
  }
 
  /**
   * Constructor for leaf/auxiliary node.
   */
  public OPT_BURS_TreeNode(char Opcode) {
    dg_node = null;
    setOpcode(Opcode);
  }

  public String toString() {
    String node;
    node = OPT_OperatorNames.operatorName[getOpcode()];
    return node;
  }

  public final boolean isSuperNodeRoot() {
    return (getNonTerminal() > 0 );
  }

  public final boolean isREGISTERNode() {
    return getOpcode() == OPT_Operators.REGISTER_opcode;
  }

/**** remainder will be inserted by the BURS generator *********/

