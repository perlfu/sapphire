#
#  This file is part of the Jikes RVM project (http://jikesrvm.org).
#
#  This file is licensed to You under the Common Public License (CPL);
#  You may not use this file except in compliance with the License. You
#  may obtain a copy of the License at
#
#      http://www.opensource.org/licenses/cpl1.0.php
#
#  See the COPYRIGHT.txt file distributed with this work for information
#  regarding copyright ownership.
#
# BURS rules for IA32 SSE2 Mode
#
# The format of PRODUCTION is 'non-terminal:	rule'
PRODUCTION
# COST is a Java expression that evaluates to an integer.
# The following conventions are more or less followed:
#   Each instruction generated has a base cost of 10
#   A basic (r,r) or (r,riv) costs 3 more
#   A (m,riv) costs 7
#   A (r,m) costs 5
#   Better basic opcodes decrease cost by 2
##################################
# Basic Floating-Point ALU operations
##################################
r: REGISTER
0
NOFLAGS
// No code emitted

#####
# ADD/SUB/MUL/DIV
#####
r: FLOAT_ADD(r, r)
p.child1.isREGISTERNode() ? 20 : 30
EMIT_INSTRUCTION
SSE2_COP(IA32_ADDSS, P(p), Binary.getResult(P(p)), Binary.getVal1(P(p)), Binary.getVal2(P(p)));

r: FLOAT_ADD(r, r)
p.child2.isREGISTERNode() ? 20 : 30
EMIT_INSTRUCTION
SSE2_COP(IA32_ADDSS, P(p), Binary.getResult(P(p)), Binary.getVal2(P(p)), Binary.getVal1(P(p)));

r: FLOAT_SUB(r, r)
20
EMIT_INSTRUCTION
SSE2_NCOP(IA32_SUBSS, P(p), Binary.getResult(P(p)), Binary.getVal1(P(p)), Binary.getVal2(P(p)));

r: FLOAT_MUL(r, r)
p.child1.isREGISTERNode() ? 20 : 30
EMIT_INSTRUCTION
SSE2_COP(IA32_MULSS, P(p), Binary.getResult(P(p)), Binary.getVal1(P(p)), Binary.getVal2(P(p)));

r: FLOAT_MUL(r, r)
p.child2.isREGISTERNode() ? 20 : 30
EMIT_INSTRUCTION
SSE2_COP(IA32_MULSS, P(p), Binary.getResult(P(p)), Binary.getVal2(P(p)), Binary.getVal1(P(p)));

r: FLOAT_DIV(r, r)
20
EMIT_INSTRUCTION
SSE2_NCOP(IA32_DIVSS, P(p), Binary.getResult(P(p)), Binary.getVal1(P(p)), Binary.getVal2(P(p)));

r: FLOAT_NEG(r)
20
EMIT_INSTRUCTION
SSE2_NEG(IA32_XORPS, IA32_SUBSS, P(p), Unary.getResult(P(p)), Unary.getVal(P(p)));

r: DOUBLE_ADD(r, r)
p.child1.isREGISTERNode() ? 20 : 30
EMIT_INSTRUCTION
SSE2_COP(IA32_ADDSD, P(p), Binary.getResult(P(p)), Binary.getVal1(P(p)), Binary.getVal2(P(p)));

r: DOUBLE_ADD(r, r)
p.child2.isREGISTERNode() ? 20 : 30
EMIT_INSTRUCTION
SSE2_COP(IA32_ADDSD, P(p), Binary.getResult(P(p)), Binary.getVal2(P(p)), Binary.getVal1(P(p)));

r: DOUBLE_SUB(r, r)
20
EMIT_INSTRUCTION
SSE2_NCOP(IA32_SUBSD, P(p), Binary.getResult(P(p)), Binary.getVal1(P(p)), Binary.getVal2(P(p)));

r: DOUBLE_MUL(r, r)
p.child1.isREGISTERNode() ? 20 : 30
EMIT_INSTRUCTION
SSE2_COP(IA32_MULSD, P(p), Binary.getResult(P(p)), Binary.getVal2(P(p)), Binary.getVal1(P(p)));

r: DOUBLE_DIV(r, r)
20
EMIT_INSTRUCTION
SSE2_NCOP(IA32_DIVSD, P(p), Binary.getResult(P(p)), Binary.getVal1(P(p)), Binary.getVal2(P(p)));

r: DOUBLE_NEG(r)
20
EMIT_INSTRUCTION
SSE2_NEG(IA32_XORPD, IA32_SUBSD, P(p), Unary.getResult(P(p)), Unary.getVal(P(p)));

#####
# OPERATIONS USING X87
#####
r: FLOAT_REM(r, r)
20
EMIT_INSTRUCTION
SSE2_X87_REM(P(p));

r: DOUBLE_REM(r, r)
20
EMIT_INSTRUCTION
SSE2_X87_REM(P(p));

r: LONG_2FLOAT(r)
20
EMIT_INSTRUCTION
SSE2_X87_FROMLONG(P(p));
    
r: LONG_2DOUBLE(r)
20
EMIT_INSTRUCTION
SSE2_X87_FROMLONG(P(p));

#####
# MOVES
#####
r:	FLOAT_MOVE(r)
20
EMIT_INSTRUCTION
EMIT(MIR_Move.mutate(P(p), IA32_MOVSS, Move.getResult(P(p)), Move.getVal(P(p))));

r:	DOUBLE_MOVE(r)
20
EMIT_INSTRUCTION
EMIT(MIR_Move.mutate(P(p), IA32_MOVSD, Move.getResult(P(p)), Move.getVal(P(p))));

#####
# LOADS/STORES
#####
r:	DOUBLE_LOAD(riv, riv)
20
EMIT_INSTRUCTION
EMIT(MIR_Move.mutate(P(p), IA32_MOVSD, Load.getResult(P(p)), MO_L(P(p), QW)));

r:	DOUBLE_ALOAD(r, riv)
20
EMIT_INSTRUCTION
EMIT(MIR_Move.mutate(P(p), IA32_MOVSD, ALoad.getResult(P(p)), MO_AL(P(p), QW_S, QW)));

r:	FLOAT_LOAD(riv, riv)
20
EMIT_INSTRUCTION
EMIT(MIR_Move.mutate(P(p), IA32_MOVSS, Load.getResult(P(p)), MO_L(P(p), DW)));

r:	FLOAT_ALOAD(r, riv)
20
EMIT_INSTRUCTION
EMIT(MIR_Move.mutate(P(p), IA32_MOVSS, ALoad.getResult(P(p)), MO_AL(P(p), DW_S, DW)));

stm:	DOUBLE_STORE(r, OTHER_OPERAND(riv, riv))
20
EMIT_INSTRUCTION
EMIT(MIR_Move.mutate(P(p), IA32_MOVSD, MO_S(P(p), QW), Store.getValue(P(p))));

stm:	DOUBLE_ASTORE(r, OTHER_OPERAND(r, riv))
20
EMIT_INSTRUCTION
EMIT(MIR_Move.mutate(P(p), IA32_MOVSD, MO_AS(P(p), QW_S, QW), AStore.getValue(P(p))));

stm:	FLOAT_STORE(r, OTHER_OPERAND(riv, riv))
20
EMIT_INSTRUCTION
EMIT(MIR_Move.mutate(P(p), IA32_MOVSS, MO_S(P(p), DW), Store.getValue(P(p))));

stm:	FLOAT_ASTORE(r, OTHER_OPERAND(r, riv))
20
EMIT_INSTRUCTION
EMIT(MIR_Move.mutate(P(p), IA32_MOVSS, MO_AS(P(p), DW_S, DW), AStore.getValue(P(p))));

#####
# CONVERSIONS
#####
r: INT_2FLOAT(riv)
20
EMIT_INSTRUCTION
SSE2_CONV(IA32_CVTSI2SS, P(p), Unary.getResult(P(p)), Unary.getVal(P(p)));

r: INT_2DOUBLE(riv)
20
EMIT_INSTRUCTION
SSE2_CONV(IA32_CVTSI2SD, P(p), Unary.getResult(P(p)), Unary.getVal(P(p)));

r:	FLOAT_2DOUBLE(r)
20
EMIT_INSTRUCTION
SSE2_CONV(IA32_CVTSS2SD, P(p), Unary.getResult(P(p)), Unary.getVal(P(p)));

r:	DOUBLE_2FLOAT(r)
20
EMIT_INSTRUCTION
SSE2_CONV(IA32_CVTSD2SS, P(p), Unary.getResult(P(p)), Unary.getVal(P(p)));

#####
# FLOAT_AS_INT_BITS
#####
r:	FLOAT_AS_INT_BITS(r)
20
EMIT_INSTRUCTION
SSE2_FPR2GPR_32(P(p));

#####
# DOUBLE_AS_LONG_BITS
#####
r:	DOUBLE_AS_LONG_BITS(r)
20
EMIT_INSTRUCTION
SSE2_FPR2GPR_64(P(p));

#####
# INT_BITS_AS_FLOAT
#####
r:	INT_BITS_AS_FLOAT(riv)
20
EMIT_INSTRUCTION
SSE2_GPR2FPR_32(P(p));

#####
# LONG_BITS_AS_DOUBLE
#####
r:	LONG_BITS_AS_DOUBLE(rlv)
20
EMIT_INSTRUCTION
SSE2_GPR2FPR_64(P(p));

#####
# OTHER
#####
r:	MATERIALIZE_FP_CONSTANT(INT_CONSTANT)
20
EMIT_INSTRUCTION
SSE2_FPCONSTANT(P(p));

stm:      CLEAR_FLOATING_POINT_STATE
0
EMIT_INSTRUCTION
EMIT(MIR_Empty.mutate(P(p), IA32_FNINIT));

######
# COMPARISONS
#####
stm:   FLOAT_IFCMP(r,r)
20
EMIT_INSTRUCTION
SSE2_IFCMP(IA32_UCOMISS, P(p), IfCmp.getClearVal1(P(p)), IfCmp.getClearVal2(P(p)));

stm:   DOUBLE_IFCMP(r,r)
20
EMIT_INSTRUCTION
SSE2_IFCMP(IA32_UCOMISD, P(p), IfCmp.getClearVal1(P(p)), IfCmp.getClearVal2(P(p)));
