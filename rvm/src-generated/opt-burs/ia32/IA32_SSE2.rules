#
#  This file is part of the Jikes RVM project (http://jikesrvm.org).
#
#  This file is licensed to You under the Eclipse Public License (EPL);
#  You may not use this file except in compliance with the License. You
#  may obtain a copy of the License at
#
#      http://www.opensource.org/licenses/eclipse-1.0.php
#
#  See the COPYRIGHT.txt file distributed with this work for information
#  regarding copyright ownership.
#
# BURS rules for IA32 SSE2 Mode
#
# The format of PRODUCTION is 'non-terminal: rule'
PRODUCTION
# COST is a Java expression that evaluates to an integer.
# The following conventions are more or less followed:
#   Each instruction generated has a base cost of 10
#   A basic (r,r) or (r,riv) costs 3 more
#   A (m,riv) costs 7
#   A (r,m) costs 5
#   Better basic opcodes decrease cost by 2
##################################
# Basic Floating-Point ALU operations
##################################
#####
# ADD
#####
r: FLOAT_ADD(r, r)
13
EMIT_INSTRUCTION
SSE2_COP(IA32_ADDSS, P(p), Binary.getResult(P(p)), Binary.getVal1(P(p)), Binary.getVal2(P(p)));

r: FLOAT_ADD(r, float_load)
15
EMIT_INSTRUCTION
SSE2_COP(IA32_ADDSS, P(p), Binary.getResult(P(p)), Binary.getVal1(P(p)), consumeMO());

r: FLOAT_ADD(float_load,r)
15
EMIT_INSTRUCTION
SSE2_COP(IA32_ADDSS, P(p), Binary.getResult(P(p)), Binary.getVal2(P(p)), consumeMO());

r: DOUBLE_ADD(r, r)
13
EMIT_INSTRUCTION
SSE2_COP(IA32_ADDSD, P(p), Binary.getResult(P(p)), Binary.getVal2(P(p)), Binary.getVal1(P(p)));

r: DOUBLE_ADD(r, double_load)
15
EMIT_INSTRUCTION
SSE2_COP(IA32_ADDSD, P(p), Binary.getResult(P(p)), Binary.getVal1(P(p)), consumeMO());

r: DOUBLE_ADD(double_load,r)
15
EMIT_INSTRUCTION
SSE2_COP(IA32_ADDSD, P(p), Binary.getResult(P(p)), Binary.getVal2(P(p)), consumeMO());

#####
# SUB
#####
r: FLOAT_SUB(r, r)
13
EMIT_INSTRUCTION
SSE2_NCOP(IA32_SUBSS, P(p), Binary.getResult(P(p)), Binary.getVal1(P(p)), Binary.getVal2(P(p)));

r: FLOAT_SUB(r, float_load)
15
EMIT_INSTRUCTION
SSE2_NCOP(IA32_SUBSS, P(p), Binary.getResult(P(p)), Binary.getVal1(P(p)), consumeMO());

r: DOUBLE_SUB(r, r)
13
EMIT_INSTRUCTION
SSE2_NCOP(IA32_SUBSD, P(p), Binary.getResult(P(p)), Binary.getVal1(P(p)), Binary.getVal2(P(p)));

r: DOUBLE_SUB(r, double_load)
15
EMIT_INSTRUCTION
SSE2_NCOP(IA32_SUBSD, P(p), Binary.getResult(P(p)), Binary.getVal1(P(p)), consumeMO());

#####
# MUL
#####
r: FLOAT_MUL(r, r)
13
EMIT_INSTRUCTION
SSE2_COP(IA32_MULSS, P(p), Binary.getResult(P(p)), Binary.getVal1(P(p)), Binary.getVal2(P(p)));

r: FLOAT_MUL(r, float_load)
15
EMIT_INSTRUCTION
SSE2_COP(IA32_MULSS, P(p), Binary.getResult(P(p)), Binary.getVal1(P(p)), consumeMO());

r: FLOAT_MUL(float_load, r)
15
EMIT_INSTRUCTION
SSE2_COP(IA32_MULSS, P(p), Binary.getResult(P(p)), Binary.getVal2(P(p)), consumeMO());

r: DOUBLE_MUL(r, r)
13
EMIT_INSTRUCTION
SSE2_COP(IA32_MULSD, P(p), Binary.getResult(P(p)), Binary.getVal1(P(p)), Binary.getVal2(P(p)));

r: DOUBLE_MUL(r, double_load)
15
EMIT_INSTRUCTION
SSE2_COP(IA32_MULSD, P(p), Binary.getResult(P(p)), Binary.getVal1(P(p)), consumeMO());

r: DOUBLE_MUL(double_load, r)
15
EMIT_INSTRUCTION
SSE2_COP(IA32_MULSD, P(p), Binary.getResult(P(p)), Binary.getVal2(P(p)), consumeMO());

#####
# DIV
#####
r: FLOAT_DIV(r, r)
13
EMIT_INSTRUCTION
SSE2_NCOP(IA32_DIVSS, P(p), Binary.getResult(P(p)), Binary.getVal1(P(p)), Binary.getVal2(P(p)));

r: FLOAT_DIV(r, float_load)
15
EMIT_INSTRUCTION
SSE2_NCOP(IA32_DIVSS, P(p), Binary.getResult(P(p)), Binary.getVal1(P(p)), consumeMO());

r: DOUBLE_DIV(r, r)
13
EMIT_INSTRUCTION
SSE2_NCOP(IA32_DIVSD, P(p), Binary.getResult(P(p)), Binary.getVal1(P(p)), Binary.getVal2(P(p)));

r: DOUBLE_DIV(r, double_load)
15
EMIT_INSTRUCTION
SSE2_NCOP(IA32_DIVSD, P(p), Binary.getResult(P(p)), Binary.getVal1(P(p)), consumeMO());

#####
# NEG
#####
r: FLOAT_NEG(r)
26
EMIT_INSTRUCTION
SSE2_NEG(true, P(p), Unary.getResult(P(p)), Unary.getVal(P(p)));

r: DOUBLE_NEG(r)
26
EMIT_INSTRUCTION
SSE2_NEG(false, P(p), Unary.getResult(P(p)), Unary.getVal(P(p)));

#####
# SQRT
#####
r: FLOAT_SQRT(r)
13
EMIT_INSTRUCTION
EMIT(MIR_Unary.mutate(P(p), IA32_SQRTSS, Unary.getResult(P(p)), Unary.getVal(P(p))));

r: DOUBLE_SQRT(r)
13
EMIT_INSTRUCTION
EMIT(MIR_Unary.mutate(P(p), IA32_SQRTSD, Unary.getResult(P(p)), Unary.getVal(P(p))));

#####
# OPERATIONS USING X87
#####
r: FLOAT_REM(r, r)
13
EMIT_INSTRUCTION
SSE2_X87_REM(P(p));

r: DOUBLE_REM(r, r)
13
EMIT_INSTRUCTION
SSE2_X87_REM(P(p));

r: LONG_2FLOAT(r)
13
EMIT_INSTRUCTION
SSE2_X87_FROMLONG(P(p));

r: LONG_2DOUBLE(r)
13
EMIT_INSTRUCTION
SSE2_X87_FROMLONG(P(p));

#####
# MOVES
#####
r: FLOAT_MOVE(r)
13
EMIT_INSTRUCTION
EMIT(MIR_Move.mutate(P(p), IA32_MOVSS, Move.getResult(P(p)), Move.getVal(P(p))));

r: DOUBLE_MOVE(r)
13
EMIT_INSTRUCTION
EMIT(MIR_Move.mutate(P(p), IA32_MOVSD, Move.getResult(P(p)), Move.getVal(P(p))));

#####
# LOADS
#####
r: DOUBLE_LOAD(riv, riv)
15
EMIT_INSTRUCTION
EMIT(MIR_Move.mutate(P(p), IA32_MOVLPD, Load.getResult(P(p)), MO_L(P(p), QW)));

double_load: DOUBLE_LOAD(riv, riv)
0
EMIT_INSTRUCTION
pushMO(MO_L(P(p), QW));

r: DOUBLE_ALOAD(riv, riv)
15
EMIT_INSTRUCTION
EMIT(MIR_Move.mutate(P(p), IA32_MOVLPD, ALoad.getResult(P(p)), MO_AL(P(p), QW_S, QW)));

double_load: DOUBLE_ALOAD(riv, riv)
0
EMIT_INSTRUCTION
pushMO(MO_AL(P(p), QW_S, QW));

r: FLOAT_LOAD(riv, riv)
15
EMIT_INSTRUCTION
EMIT(MIR_Move.mutate(P(p), IA32_MOVSS, Load.getResult(P(p)), MO_L(P(p), DW)));

float_load: FLOAT_LOAD(riv, riv)
0
EMIT_INSTRUCTION
pushMO(MO_L(P(p), DW));

r: FLOAT_ALOAD(riv, riv)
15
EMIT_INSTRUCTION
EMIT(MIR_Move.mutate(P(p), IA32_MOVSS, ALoad.getResult(P(p)), MO_AL(P(p), DW_S, DW)));

float_load: FLOAT_ALOAD(riv, riv)
0
EMIT_INSTRUCTION
pushMO(MO_AL(P(p), DW_S, DW));

#####
# STORES
#####
stm: DOUBLE_STORE(r, OTHER_OPERAND(riv, riv))
17
EMIT_INSTRUCTION
EMIT(MIR_Move.mutate(P(p), IA32_MOVLPD, MO_S(P(p), QW), Store.getValue(P(p))));

stm: DOUBLE_ASTORE(r, OTHER_OPERAND(riv, riv))
17
EMIT_INSTRUCTION
EMIT(MIR_Move.mutate(P(p), IA32_MOVLPD, MO_AS(P(p), QW_S, QW), AStore.getValue(P(p))));

stm: FLOAT_STORE(r, OTHER_OPERAND(riv, riv))
17
EMIT_INSTRUCTION
EMIT(MIR_Move.mutate(P(p), IA32_MOVSS, MO_S(P(p), DW), Store.getValue(P(p))));

stm: FLOAT_ASTORE(r, OTHER_OPERAND(riv, riv))
17
EMIT_INSTRUCTION
EMIT(MIR_Move.mutate(P(p), IA32_MOVSS, MO_AS(P(p), DW_S, DW), AStore.getValue(P(p))));

#####
# CONVERSIONS
#####
r: INT_2FLOAT(riv)
13
EMIT_INSTRUCTION
SSE2_CONV(IA32_CVTSI2SS, P(p), Unary.getResult(P(p)), Unary.getVal(P(p)));

r: INT_2FLOAT(load32)
15
EMIT_INSTRUCTION
SSE2_CONV(IA32_CVTSI2SS, P(p), Unary.getResult(P(p)), consumeMO());

r: INT_2DOUBLE(riv)
13
EMIT_INSTRUCTION
SSE2_CONV(IA32_CVTSI2SD, P(p), Unary.getResult(P(p)), Unary.getVal(P(p)));

r: INT_2DOUBLE(load32)
15
EMIT_INSTRUCTION
SSE2_CONV(IA32_CVTSI2SD, P(p), Unary.getResult(P(p)), consumeMO());

r: FLOAT_2DOUBLE(r)
13
EMIT_INSTRUCTION
SSE2_CONV(IA32_CVTSS2SD, P(p), Unary.getResult(P(p)), Unary.getVal(P(p)));

r: FLOAT_2DOUBLE(float_load)
15
EMIT_INSTRUCTION
SSE2_CONV(IA32_CVTSS2SD, P(p), Unary.getResult(P(p)), consumeMO());

r: DOUBLE_2FLOAT(r)
13
EMIT_INSTRUCTION
SSE2_CONV(IA32_CVTSD2SS, P(p), Unary.getResult(P(p)), Unary.getVal(P(p)));

r: DOUBLE_2FLOAT(double_load)
15
EMIT_INSTRUCTION
SSE2_CONV(IA32_CVTSD2SS, P(p), Unary.getResult(P(p)), consumeMO());

r: FLOAT_2INT(r)
13
EMIT_INSTRUCTION
EMIT(P(p)); /* leave for complex operators */

r: FLOAT_2LONG(r)
13
EMIT_INSTRUCTION
EMIT(P(p)); /* leave for complex operators */

r: DOUBLE_2INT(r)
13
EMIT_INSTRUCTION
EMIT(P(p)); /* leave for complex operators */

r: DOUBLE_2LONG(r)
13
EMIT_INSTRUCTION
EMIT(P(p)); /* leave for complex operators */

#####
# FLOAT_AS_INT_BITS
#####
r: FLOAT_AS_INT_BITS(r)
13
EMIT_INSTRUCTION
SSE2_FPR2GPR_32(P(p));

load32: FLOAT_AS_INT_BITS(float_load)
0
NOFLAGS
// No code emitted

#####
# DOUBLE_AS_LONG_BITS
#####
r: DOUBLE_AS_LONG_BITS(r)
13
EMIT_INSTRUCTION
SSE2_FPR2GPR_64(P(p));

load64: DOUBLE_AS_LONG_BITS(double_load)
0
NOFLAGS
// No code emitted

#####
# INT_BITS_AS_FLOAT
#####
r: INT_BITS_AS_FLOAT(riv)
13
EMIT_INSTRUCTION
SSE2_GPR2FPR_32(P(p));

float_load: INT_BITS_AS_FLOAT(load32)
0
NOFLAGS
// No code emitted

#####
# LONG_BITS_AS_DOUBLE
#####
r: LONG_BITS_AS_DOUBLE(rlv)
13
EMIT_INSTRUCTION
SSE2_GPR2FPR_64(P(p));

double_load: LONG_BITS_AS_DOUBLE(load64)
0
NOFLAGS
// No code emitted

#####
# OTHER
#####
r: MATERIALIZE_FP_CONSTANT(INT_CONSTANT)
15
EMIT_INSTRUCTION
SSE2_FPCONSTANT(P(p));

float_load: MATERIALIZE_FP_CONSTANT(INT_CONSTANT)
Binary.getResult(P(p)).isFloat() ? 0 : INFINITE
EMIT_INSTRUCTION
pushMO(MO_MC(P(p)));

double_load: MATERIALIZE_FP_CONSTANT(INT_CONSTANT)
Binary.getResult(P(p)).isDouble() ? 0 : INFINITE
EMIT_INSTRUCTION
pushMO(MO_MC(P(p)));

stm: CLEAR_FLOATING_POINT_STATE
0
EMIT_INSTRUCTION
EMIT(MIR_Empty.mutate(P(p), IA32_FNINIT));

######
# COMPARISONS
#####
stm: FLOAT_IFCMP(r,r)
13
EMIT_INSTRUCTION
SSE2_IFCMP(IA32_UCOMISS, P(p), IfCmp.getClearVal1(P(p)), IfCmp.getClearVal2(P(p)));

stm: FLOAT_IFCMP(r,float_load)
15
EMIT_INSTRUCTION
SSE2_IFCMP(IA32_UCOMISS, P(p), IfCmp.getClearVal1(P(p)), consumeMO());

stm: FLOAT_IFCMP(float_load,r)
15
EMIT_INSTRUCTION
IfCmp.getCond(P(p)).flipOperands(); \
SSE2_IFCMP(IA32_UCOMISS, P(p), IfCmp.getClearVal2(P(p)), consumeMO());

stm: DOUBLE_IFCMP(r,r)
13
EMIT_INSTRUCTION
SSE2_IFCMP(IA32_UCOMISD, P(p), IfCmp.getClearVal1(P(p)), IfCmp.getClearVal2(P(p)));

stm: DOUBLE_IFCMP(r,double_load)
15
EMIT_INSTRUCTION
SSE2_IFCMP(IA32_UCOMISD, P(p), IfCmp.getClearVal1(P(p)), consumeMO());

stm: DOUBLE_IFCMP(double_load,r)
15
EMIT_INSTRUCTION
IfCmp.getCond(P(p)).flipOperands(); \
SSE2_IFCMP(IA32_UCOMISD, P(p), IfCmp.getClearVal2(P(p)), consumeMO());

#####
# FCMP_CMOV
#####
r: FCMP_CMOV(r, OTHER_OPERAND(r, any))
13*2
EMIT_INSTRUCTION
EMIT(CPOS(P(p), MIR_Compare.create(CondMove.getVal1(P(p)).isFloat() ? IA32_UCOMISS : IA32_UCOMISD, \
     CondMove.getVal1(P(p)), CondMove.getVal2(P(p))))); \
CMOV_MOV(P(p), CondMove.getResult(P(p)), CondMove.getCond(P(p)).translateUNSIGNED(), \
         CondMove.getTrueValue(P(p)), CondMove.getFalseValue(P(p)));

r: FCMP_CMOV(r, OTHER_OPERAND(float_load, any))
13+15
EMIT_INSTRUCTION
EMIT(CPOS(P(p), MIR_Compare.create(IA32_UCOMISS, CondMove.getVal1(P(p)), consumeMO()))); \
CMOV_MOV(P(p), CondMove.getResult(P(p)), CondMove.getCond(P(p)).translateUNSIGNED(), \
         CondMove.getTrueValue(P(p)), CondMove.getFalseValue(P(p)));

r: FCMP_CMOV(r, OTHER_OPERAND(double_load, any))
13+15
EMIT_INSTRUCTION
EMIT(CPOS(P(p), MIR_Compare.create(IA32_UCOMISD, CondMove.getVal1(P(p)), consumeMO()))); \
CMOV_MOV(P(p), CondMove.getResult(P(p)), CondMove.getCond(P(p)).translateUNSIGNED(), \
         CondMove.getTrueValue(P(p)), CondMove.getFalseValue(P(p)));

r: FCMP_CMOV(float_load, OTHER_OPERAND(r, any))
13+15
EMIT_INSTRUCTION
CondMove.getCond(P(p)).flipOperands(); \
EMIT(CPOS(P(p), MIR_Compare.create(IA32_UCOMISS, CondMove.getVal1(P(p)), consumeMO()))); \
CMOV_MOV(P(p), CondMove.getResult(P(p)), CondMove.getCond(P(p)).translateUNSIGNED(), \
         CondMove.getTrueValue(P(p)), CondMove.getFalseValue(P(p)));

r: FCMP_CMOV(double_load, OTHER_OPERAND(r, any))
13+15
EMIT_INSTRUCTION
CondMove.getCond(P(p)).flipOperands(); \
EMIT(CPOS(P(p), MIR_Compare.create(IA32_UCOMISD, CondMove.getVal1(P(p)), consumeMO()))); \
CMOV_MOV(P(p), CondMove.getResult(P(p)), CondMove.getCond(P(p)).translateUNSIGNED(), \
         CondMove.getTrueValue(P(p)), CondMove.getFalseValue(P(p)));

#####
# FCMP_FCMOV
#####
r: FCMP_FCMOV(r, OTHER_OPERAND(r, any))
13*4
EMIT_INSTRUCTION
SSE2_FCMP_FCMOV(P(p), CondMove.getResult(P(p)), CondMove.getVal1(P(p)), CondMove.getVal2(P(p)), \
                CondMove.getCond(P(p)), CondMove.getTrueValue(P(p)), CondMove.getFalseValue(P(p)));

r: FCMP_FCMOV(r, OTHER_OPERAND(r, OTHER_OPERAND(r, float_load)))
15+13*3
EMIT_INSTRUCTION
SSE2_FCMP_FCMOV(P(p), CondMove.getResult(P(p)), CondMove.getVal1(P(p)), CondMove.getVal2(P(p)), \
                CondMove.getCond(P(p)), CondMove.getTrueValue(P(p)), consumeMO());

r: FCMP_FCMOV(r, OTHER_OPERAND(r, OTHER_OPERAND(r, double_load)))
15+13*3
EMIT_INSTRUCTION
SSE2_FCMP_FCMOV(P(p), CondMove.getResult(P(p)), CondMove.getVal1(P(p)), CondMove.getVal2(P(p)), \
                CondMove.getCond(P(p)), CondMove.getTrueValue(P(p)), consumeMO());

r: FCMP_FCMOV(r, OTHER_OPERAND(r, OTHER_OPERAND(float_load, r)))
15+13*3
EMIT_INSTRUCTION
SSE2_FCMP_FCMOV(P(p), CondMove.getResult(P(p)), CondMove.getVal1(P(p)), CondMove.getVal2(P(p)), \
                CondMove.getCond(P(p)), consumeMO(), CondMove.getFalseValue(P(p)));

r: FCMP_FCMOV(r, OTHER_OPERAND(r, OTHER_OPERAND(double_load, r)))
15+13*3
EMIT_INSTRUCTION
SSE2_FCMP_FCMOV(P(p), CondMove.getResult(P(p)), CondMove.getVal1(P(p)), CondMove.getVal2(P(p)), \
                CondMove.getCond(P(p)), consumeMO(), CondMove.getFalseValue(P(p)));

r: FCMP_FCMOV(r, OTHER_OPERAND(float_load, any))
SSE2_CMP_OP(CondMove.getCond(P(p)), true) != null ? 15+13*3 : INFINITE
EMIT_INSTRUCTION
SSE2_FCMP_FCMOV(P(p), CondMove.getResult(P(p)), CondMove.getVal1(P(p)), consumeMO(), \
                CondMove.getCond(P(p)), CondMove.getFalseValue(P(p)), CondMove.getTrueValue(P(p)));

r: FCMP_FCMOV(r, OTHER_OPERAND(double_load, any))
SSE2_CMP_OP(CondMove.getCond(P(p)), false) != null ? 15+13*3 : INFINITE
EMIT_INSTRUCTION
SSE2_FCMP_FCMOV(P(p), CondMove.getResult(P(p)), CondMove.getVal1(P(p)), consumeMO(), \
                CondMove.getCond(P(p)), CondMove.getFalseValue(P(p)), CondMove.getTrueValue(P(p)));

#####
# Absolute
#####
# x > 0 ? x : -x
r: FCMP_FCMOV(r, OTHER_OPERAND(MATERIALIZE_FP_CONSTANT(INT_CONSTANT), OTHER_OPERAND(r, FLOAT_NEG(r))))
IS_MATERIALIZE_ZERO(PRL(p)) && SSE2_IS_GT_OR_GE(CondMove.getCond(P(p))) && \
SIMILAR_REGISTERS(CondMove.getVal1(P(p)), CondMove.getTrueValue(P(p)), Unary.getVal(PRRR(p))) ? 11 : INFINITE 
EMIT_INSTRUCTION
SSE2_ABS(true, P(p), CondMove.getResult(P(p)), CondMove.getVal1(P(p)));

# x < 0 ? -x : x
r: FCMP_FCMOV(r, OTHER_OPERAND(MATERIALIZE_FP_CONSTANT(INT_CONSTANT), OTHER_OPERAND(FLOAT_NEG(r), r)))
IS_MATERIALIZE_ZERO(PRL(p)) && SSE2_IS_LT_OR_LE(CondMove.getCond(P(p))) && \
SIMILAR_REGISTERS(CondMove.getVal1(P(p)), CondMove.getFalseValue(P(p)), Unary.getVal(PRRL(p))) ? 11 : INFINITE 
EMIT_INSTRUCTION
SSE2_ABS(true, P(p), CondMove.getResult(P(p)), CondMove.getVal1(P(p)));

# 0 > x ? -x : x
r: FCMP_FCMOV(MATERIALIZE_FP_CONSTANT(INT_CONSTANT), OTHER_OPERAND(r, OTHER_OPERAND(FLOAT_NEG(r), r)))
IS_MATERIALIZE_ZERO(PRL(p)) && SSE2_IS_GT_OR_GE(CondMove.getCond(P(p))) && \
SIMILAR_REGISTERS(CondMove.getVal2(P(p)), CondMove.getFalseValue(P(p)), Unary.getVal(PRRL(p))) ? 11 : INFINITE 
EMIT_INSTRUCTION
SSE2_ABS(true, P(p), CondMove.getResult(P(p)), CondMove.getVal2(P(p)));

# 0 < x ? x : -x
r: FCMP_FCMOV(MATERIALIZE_FP_CONSTANT(INT_CONSTANT), OTHER_OPERAND(r, OTHER_OPERAND(r, FLOAT_NEG(r))))
IS_MATERIALIZE_ZERO(PRL(p)) && SSE2_IS_LT_OR_LE(CondMove.getCond(P(p))) && \
SIMILAR_REGISTERS(CondMove.getVal2(P(p)), CondMove.getTrueValue(P(p)), Unary.getVal(PRRR(p))) ? 11 : INFINITE 
EMIT_INSTRUCTION
SSE2_ABS(true, P(p), CondMove.getResult(P(p)), CondMove.getVal2(P(p)));

# x > 0 ? x : -x
r: FCMP_FCMOV(r, OTHER_OPERAND(MATERIALIZE_FP_CONSTANT(INT_CONSTANT), OTHER_OPERAND(r, DOUBLE_NEG(r))))
IS_MATERIALIZE_ZERO(PRL(p)) && SSE2_IS_GT_OR_GE(CondMove.getCond(P(p))) && \
SIMILAR_REGISTERS(CondMove.getVal1(P(p)), CondMove.getTrueValue(P(p)), Unary.getVal(PRRR(p))) ? 11 : INFINITE 
EMIT_INSTRUCTION
SSE2_ABS(false, P(p), CondMove.getResult(P(p)), CondMove.getVal1(P(p)));

# x < 0 ? -x : x
r: FCMP_FCMOV(r, OTHER_OPERAND(MATERIALIZE_FP_CONSTANT(INT_CONSTANT), OTHER_OPERAND(DOUBLE_NEG(r), r)))
IS_MATERIALIZE_ZERO(PRL(p)) && SSE2_IS_LT_OR_LE(CondMove.getCond(P(p))) && \
SIMILAR_REGISTERS(CondMove.getVal1(P(p)), CondMove.getFalseValue(P(p)), Unary.getVal(PRRL(p))) ? 11 : INFINITE 
EMIT_INSTRUCTION
SSE2_ABS(false, P(p), CondMove.getResult(P(p)), CondMove.getVal1(P(p)));

# 0 > x ? -x : x
r: FCMP_FCMOV(MATERIALIZE_FP_CONSTANT(INT_CONSTANT), OTHER_OPERAND(r, OTHER_OPERAND(DOUBLE_NEG(r), r)))
IS_MATERIALIZE_ZERO(PRL(p)) && SSE2_IS_GT_OR_GE(CondMove.getCond(P(p))) && \
SIMILAR_REGISTERS(CondMove.getVal2(P(p)), CondMove.getFalseValue(P(p)), Unary.getVal(PRRL(p))) ? 11 : INFINITE 
EMIT_INSTRUCTION
SSE2_ABS(false, P(p), CondMove.getResult(P(p)), CondMove.getVal2(P(p)));

# 0 < x ? x : -x
r: FCMP_FCMOV(MATERIALIZE_FP_CONSTANT(INT_CONSTANT), OTHER_OPERAND(r, OTHER_OPERAND(r, DOUBLE_NEG(r))))
IS_MATERIALIZE_ZERO(PRL(p)) && SSE2_IS_LT_OR_LE(CondMove.getCond(P(p))) && \
SIMILAR_REGISTERS(CondMove.getVal2(P(p)), CondMove.getTrueValue(P(p)), Unary.getVal(PRRR(p))) ? 11 : INFINITE 
EMIT_INSTRUCTION
SSE2_ABS(false, P(p), CondMove.getResult(P(p)), CondMove.getVal2(P(p)));

######
# Long operations that can use wider registers
#####
stm: LONG_ASTORE(load64, OTHER_OPERAND(riv, riv))
32
EMIT_INSTRUCTION
RegisterOperand temp = regpool.makeTemp(TypeReference.Double); \
EMIT(MIR_Move.mutate(PL(p), IA32_MOVQ, temp, consumeMO())); \
EMIT(MIR_Move.mutate(P(p), IA32_MOVQ, MO_AS(P(p), QW_S, QW), temp.copyRO()));

stm: LONG_STORE(load64, OTHER_OPERAND(riv, riv))
32
EMIT_INSTRUCTION
RegisterOperand temp = regpool.makeTemp(TypeReference.Double); \
EMIT(MIR_Move.mutate(PL(p), IA32_MOVQ, temp, consumeMO())); \
EMIT(MIR_Move.mutate(P(p), IA32_MOVQ, MO_S(P(p), QW), temp.copyRO()));
