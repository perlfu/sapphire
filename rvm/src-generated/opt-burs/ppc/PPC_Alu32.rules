#
# This file is part of Jikes RVM (http://jikesrvm.sourceforge.net).
# The Jikes RVM project is distributed under the Common Public License (CPL).
# A copy of the license is included in the distribution, and is also
# available at http://www.opensource.org/licenses/cpl1.0.php
#
# (C) Copyright IBM Corp. 2001,2002
#
#
# @author Dave Grove
# @author Mauricio J. Serrano
# @modified Kris Venstermans
#
# BURS rules for long ALU operations 
# that are specific to PPC with 32 bit GPRs
#
# See PPC_Common.rules for the format of this file
#####
# IR_PROLOGUE:
#####
stm:	IR_PROLOGUE
11
EMIT_INSTRUCTION
PROLOGUE(P(p));

##################################
# Basic Long ALU operations 
##################################
#####
# LONG_ADD
#####
r:	LONG_ADD(r,r)
20
EMIT_INSTRUCTION
LONG_ADD(P(p), Binary.getResult(P(p)), R(Binary.getVal1(P(p))), R(Binary.getVal2(P(p))));

#####
# LONG_SUB
#####
r:	LONG_SUB(r,r)
20
EMIT_INSTRUCTION
LONG_SUB(P(p), Binary.getResult(P(p)), R(Binary.getVal1(P(p))), R(Binary.getVal2(P(p))));

#####
# LONG_MUL
#####
r:	LONG_MUL(r,r)
20
EMIT_INSTRUCTION
LONG_MUL(P(p), Binary.getResult(P(p)), R(Binary.getVal1(P(p))), R(Binary.getVal2(P(p))));

#####
# LONG_NEG
#####
r:	LONG_NEG(r)
20
EMIT_INSTRUCTION
LONG_NEG(P(p), Unary.getResult(P(p)), R(Unary.getVal(P(p))));

#####
# LONG_SHL
#####
r:	LONG_SHL(r,r)
20
EMIT_INSTRUCTION
LONG_SHL(P(p), Binary.getResult(P(p)), R(Binary.getVal1(P(p))), R(Binary.getVal2(P(p))));

r:	LONG_SHL(r,INT_CONSTANT)
20
EMIT_INSTRUCTION
LONG_SHL_IMM(P(p), Binary.getResult(P(p)), R(Binary.getVal1(P(p))), IC(Binary.getVal2(P(p))));

#####
# LONG_SHR
#####
r:	LONG_SHR(r,r)
20
EMIT_INSTRUCTION
EMIT(P(p));  // Leave for OPT_ComplexLIR2MIRExpansion

r:	LONG_SHR(r,INT_CONSTANT)
20
EMIT_INSTRUCTION
LONG_SHR_IMM(P(p), Binary.getResult(P(p)), R(Binary.getVal1(P(p))), IC(Binary.getVal2(P(p))));

#####
# LONG_USHR
#####
r:	LONG_USHR(r,r)
20
EMIT_INSTRUCTION
LONG_USHR(P(p), Binary.getResult(P(p)), R(Binary.getVal1(P(p))), R(Binary.getVal2(P(p))));

r:	LONG_USHR(r,INT_CONSTANT)
20
EMIT_INSTRUCTION
LONG_USHR_IMM(P(p), Binary.getResult(P(p)), R(Binary.getVal1(P(p))), IC(Binary.getVal2(P(p))));

#####
# LONG_AND
#####
r:	LONG_AND(r,r)
20
EMIT_INSTRUCTION
LONG_LOG(P(p), PPC_AND, Binary.getResult(P(p)), R(Binary.getVal1(P(p))), R(Binary.getVal2(P(p))));

#####
# LONG_OR
#####
r:	LONG_OR(r,r)
20
EMIT_INSTRUCTION
LONG_LOG(P(p), PPC_OR, Binary.getResult(P(p)), R(Binary.getVal1(P(p))), R(Binary.getVal2(P(p))));

#####
# LONG_XOR
#####
r:	LONG_XOR(r,r)
20
EMIT_INSTRUCTION
LONG_LOG(P(p), PPC_XOR, Binary.getResult(P(p)), R(Binary.getVal1(P(p))), R(Binary.getVal2(P(p))));

#####
# LONG_NOT
#####
r:	LONG_NOT(r)
20
EMIT_INSTRUCTION
LONG_NOT(P(p), Unary.getResult(P(p)), R(Unary.getVal(P(p))));

#####
# INT_2LONG
#####
r:	INT_2LONG(r)
20
EMIT_INSTRUCTION
INT_2LONG(P(p), Unary.getResult(P(p)), R(Unary.getVal(P(p)))); 

#####
# LONG_2INT
#####
r:	LONG_2INT(r)
10
EMIT_INSTRUCTION
LONG_2INT(P(p), Unary.getResult(P(p)), R(Unary.getVal(P(p))));

#####
# DOUBLE_AS_LONG_BITS
#####
r:	DOUBLE_AS_LONG_BITS(r)
40
EMIT_INSTRUCTION
FPR2GPR_64(P(p));

#####
# LONG_BITS_AS_DOUBLE
#####
r:	LONG_BITS_AS_DOUBLE(r)
40
EMIT_INSTRUCTION
GPR2FPR_64(P(p));

#####
# LONG_MOVE
#####
r:	LONG_MOVE(LONG_CONSTANT)
40
EMIT_INSTRUCTION
LONG_CONSTANT(P(p), Move.getResult(P(p)), LC(Move.getVal(P(p))));

r:	LONG_MOVE(r)
22
EMIT_INSTRUCTION
LONG_MOVE(P(p), Move.getResult(P(p)), R(Move.getVal(P(p))));

#####
# LONG_CMP
#####
stm:	LONG_CMP(r,r)
40
EMIT_INSTRUCTION
EMIT (P(p)); //  Leave for OPT_ComplexLIR2MIRExpansion

#####
# LONG_IFCMP
#####
stm:	LONG_IFCMP(r,r)
30
EMIT_INSTRUCTION
EMIT(P(p)); //  Leave for OPT_ComplexLIR2MIRExpansion

#####
# INT_IFCMP
#####
stm:    INT_IFCMP(ATTEMPT_INT(r,r),INT_CONSTANT)
(!IfCmp.getCond(P(p)).isUNSIGNED())&&ZERO(IfCmp.getVal2(P(p)))?20:INFINITE
EMIT_INSTRUCTION
{                                                                             \
   OPT_ConditionOperand c = IfCmp.getCond(P(p)).flipCode();                   \
   EMIT(MIR_Store.create(PPC_STWCXr, R(Attempt.getNewValue(PL(p))), \
                                  R(Attempt.getAddress(PL(p))), Attempt.getOffset(PL(p)),           \
                                  Attempt.getLocation(PL(p)),                \
                                  Attempt.getGuard(PL(p))));                \
   EMIT(MIR_CondBranch.mutate(P(p), PPC_BCOND, CR(0),                         \
                              new OPT_PowerPCConditionOperand(c),             \
                              IfCmp.getTarget(P(p)),                         \
                              IfCmp.getBranchProfile(P(p))));                 \
}

stm:    INT_IFCMP(ATTEMPT_ADDR(r,r),INT_CONSTANT)
(!IfCmp.getCond(P(p)).isUNSIGNED())&&ZERO(IfCmp.getVal2(P(p)))?20:INFINITE
EMIT_INSTRUCTION
{                                                                             \
   OPT_ConditionOperand c = IfCmp.getCond(P(p)).flipCode();                   \
   EMIT(MIR_Store.create(PPC_STWCXr, R(Attempt.getNewValue(PL(p))), \
                                  R(Attempt.getAddress(PL(p))), Attempt.getOffset(PL(p)),           \
                                  Attempt.getLocation(PL(p)),                \
                                  Attempt.getGuard(PL(p))));                \
   EMIT(MIR_CondBranch.mutate(P(p), PPC_BCOND, CR(0),                         \
                              new OPT_PowerPCConditionOperand(c),             \
                              IfCmp.getTarget(P(p)),                         \
                              IfCmp.getBranchProfile(P(p))));                 \
}

#Do not put these in PPC_Common, because the REF_operations are 64-bit operations on 64-bit.
#So the condition flags are set concerning 64-bit values instead of 32-bit value as we'd expect. 
stm:	INT_IFCMP(REF_NEG(r),INT_CONSTANT)
(!IfCmp.getCond(P(p)).isUNSIGNED())&&ZERO(IfCmp.getVal2(P(p)))?20:INFINITE
EMIT_INSTRUCTION
CMP_ZERO(P(p), PPC_NEGr, Unary.getResult(PL(p)),           \
                     Unary.getVal(PL(p)), IfCmp.getCond(P(p)));

stm:	INT_IFCMP(REF_NOT(r),INT_CONSTANT)
(!IfCmp.getCond(P(p)).isUNSIGNED())&&ZERO(IfCmp.getVal2(P(p)))?20:INFINITE
EMIT_INSTRUCTION
CMP_ZERO(P(p), PPC_XORr, Unary.getResult(PL(p)),           \
                     R(Unary.getVal(PL(p))), Unary.getVal(PL(p)), IfCmp.getCond(P(p)));

stm:	INT_IFCMP(REF_ADD(r,r),INT_CONSTANT)
(!IfCmp.getCond(P(p)).isUNSIGNED())&&ZERO(IfCmp.getVal2(P(p)))?20:INFINITE
EMIT_INSTRUCTION
CMP_ZERO(P(p), PPC_ADDr, Binary.getResult(PL(p)),          \
                     R(Binary.getVal1(PL(p))), Binary.getVal2(PL(p)), IfCmp.getCond(P(p)));

stm:	INT_IFCMP(REF_AND(r,r),INT_CONSTANT)
(!IfCmp.getCond(P(p)).isUNSIGNED())&&ZERO(IfCmp.getVal2(P(p)))?20:INFINITE
EMIT_INSTRUCTION
CMP_ZERO(P(p), PPC_ANDr, Binary.getResult(PL(p)),          \
                     R(Binary.getVal1(PL(p))), Binary.getVal2(PL(p)), IfCmp.getCond(P(p)));

stm:	INT_IFCMP(REF_OR(r,r),INT_CONSTANT)
(!IfCmp.getCond(P(p)).isUNSIGNED())&&ZERO(IfCmp.getVal2(P(p)))?20:INFINITE
EMIT_INSTRUCTION
CMP_ZERO(P(p), PPC_ORr, Binary.getResult(PL(p)),           \
                     R(Binary.getVal1(PL(p))), Binary.getVal2(PL(p)), IfCmp.getCond(P(p)));

stm:	INT_IFCMP(REF_XOR(r,r),INT_CONSTANT)
(!IfCmp.getCond(P(p)).isUNSIGNED())&&ZERO(IfCmp.getVal2(P(p)))?20:INFINITE
EMIT_INSTRUCTION
CMP_ZERO(P(p), PPC_XORr, Binary.getResult(PL(p)),          \
                     R(Binary.getVal1(PL(p))), Binary.getVal2(PL(p)), IfCmp.getCond(P(p)));

stm:	INT_IFCMP(REF_AND(r,REF_MOVE(INT_CONSTANT)),INT_CONSTANT)
(!IfCmp.getCond(P(p)).isUNSIGNED())&&ZERO(IfCmp.getVal2(P(p)))&&U16(IV(Move.getVal(PLR(p))))?20:INFINITE
EMIT_INSTRUCTION
CMP_ZERO(P(p), PPC_ANDISr, Binary.getResult(PL(p)),        \
                     R(Binary.getVal1(PL(p))),                               \
                     SRI(IV(Move.getVal(PLR(p))), 16), IfCmp.getCond(P(p)));

stm:	INT_IFCMP(REF_AND(r,REF_MOVE(INT_CONSTANT)),INT_CONSTANT)
(!IfCmp.getCond(P(p)).isUNSIGNED())&&ZERO(IfCmp.getVal2(P(p)))&&MASK(IV(Move.getVal(PLR(p))))?20:INFINITE
EMIT_INSTRUCTION
CMP_ZERO_AND_MASK(P(p), Binary.getResult(PL(p)),           \
                              R(Binary.getVal1(PL(p))),                      \
                              IC(Move.getVal(PLR(p))), IfCmp.getCond(P(p)));

stm:	INT_IFCMP(REF_ADD(r,INT_CONSTANT),INT_CONSTANT)
(!IfCmp.getCond(P(p)).isUNSIGNED())&&ZERO(IfCmp.getVal2(P(p)))?20:INFINITE
EMIT_INSTRUCTION
CMP_ZERO(P(p), PPC_ADDICr, Binary.getResult(PL(p)),        \
                     R(Binary.getVal1(PL(p))), Binary.getVal2(PL(p)), IfCmp.getCond(P(p)));

stm:	INT_IFCMP(REF_AND(r,REF_NOT(r)),INT_CONSTANT)
(!IfCmp.getCond(P(p)).isUNSIGNED())&&ZERO(IfCmp.getVal2(P(p)))?20:INFINITE
EMIT_INSTRUCTION
CMP_ZERO(P(p), PPC_ANDCr, Binary.getResult(PL(p)),         \
                     R(Binary.getVal1(PL(p))), Unary.getVal(PLR(p)), IfCmp.getCond(P(p)));

stm:	INT_IFCMP(REF_OR(r,REF_NOT(r)),INT_CONSTANT)
(!IfCmp.getCond(P(p)).isUNSIGNED())&&ZERO(IfCmp.getVal2(P(p)))?20:INFINITE
EMIT_INSTRUCTION
CMP_ZERO(P(p), PPC_ORCr, Binary.getResult(PL(p)),          \
                     R(Binary.getVal1(PL(p))), Unary.getVal(PLR(p)), IfCmp.getCond(P(p)));

#####
# REF_AND, cases not valid on 64-bit, due to zero extension of ANDIS
#####
czr:	REF_AND(r,REF_MOVE(INT_CONSTANT))
U16(IV(Move.getVal(PR(p))))?11:INFINITE
EMIT_INSTRUCTION
EMIT(MIR_Binary.mutate(P(p), PPC_ANDISr, Binary.getResult(P(p)),              \
                       R(Binary.getVal1(P(p))), IC(OPT_Bits.PPCMaskUpper16(VRL(p)))));

r:	REF_AND(r,REF_MOVE(INT_CONSTANT))
MASK(IV(Move.getVal(PR(p))))?10:INFINITE
EMIT_INSTRUCTION
AND_MASK(P(p), Binary.getResult(P(p)), R(Binary.getVal1(P(p))), IC(Move.getVal(PR(p))));

#####
# REF_OR, cases not valid on 64-bit, due to zero extension of ORIS
#####
r:	REF_OR(r,REF_MOVE(INT_CONSTANT))
U16(IV(Move.getVal(PR(p))))?10:INFINITE
EMIT_INSTRUCTION
EMIT(MIR_Binary.mutate(P(p), PPC_ORIS, Binary.getResult(P(p)), R(Binary.getVal1(P(p))), SRI(IV(Move.getVal(PR(p))), 16)));

r:	REF_OR(r,REF_MOVE(INT_CONSTANT))
20
EMIT_INSTRUCTION
{                                                                             \
   int c = IV(Move.getVal(PR(p)));                                        \
   EMIT(MIR_Binary.create(PPC_ORI, Binary.getResult(P(p)),                    \
                          R(Binary.getVal1(P(p))), ANDI(c, 0xffff)));         \
   EMIT(MIR_Binary.mutate(P(p), PPC_ORIS, Binary.getResult(P(p)).copyRO(),    \
                          Binary.getResult(P(p)).copyRO(), SRI(c, 16)));      \
}

#####
# REF_XOR, cases not valid on 64-bit, due to zero extension of XORIS
#####
r:	REF_XOR(r,REF_MOVE(INT_CONSTANT))
U16(IV(Move.getVal(PR(p))))?10:INFINITE
EMIT_INSTRUCTION
EMIT(MIR_Binary.mutate(P(p), PPC_XORIS, Binary.getResult(P(p)), \
                       R(Binary.getVal1(P(p))), SRI(IV(Move.getVal(PR(p))), 16)));

######
# REF_MOVE
######
r:	REF_MOVE(ADDRESS_CONSTANT)
SI16(AV(Move.getVal(P(p))))?11:INFINITE
EMIT_INSTRUCTION
EMIT(MIR_Unary.mutate(P(p), PPC_LDI, Move.getResult(P(p)), CAL16(AV(Move.getVal(P(p))))));

r:	REF_MOVE(ADDRESS_CONSTANT)
U16(AV(Move.getVal(P(p))))?11:INFINITE
EMIT_INSTRUCTION
EMIT(MIR_Unary.mutate(P(p), PPC_LDIS, Move.getResult(P(p)), CAU16(AV(Move.getVal(P(p))))));

r:	REF_MOVE(ADDRESS_CONSTANT)
22
EMIT_INSTRUCTION
{                                                                             \
   EMIT(MIR_Unary.create(PPC_LDIS, Move.getResult(P(p)), CAU16(AV(Move.getVal(P(p))))));   \
   EMIT(MIR_Binary.mutate(P(p), PPC_ADDI, Move.getResult(P(p)).copyRO(),                   \
                          Move.getResult(P(p)).copyRO(), CAL16(AV(Move.getVal(P(p))))));   \
}

