#
#  This file is part of the Jikes RVM project (http://jikesrvm.org).
#
#  This file is licensed to You under the Common Public License (CPL);
#  You may not use this file except in compliance with the License. You
#  may obtain a copy of the License at
#
#      http://www.opensource.org/licenses/cpl1.0.php
#
#  See the COPYRIGHT.txt file distributed with this work for information
#  regarding copyright ownership.
#
# BURS rules for long ALU operations
# that are specific to PPC with 64 bit GPRs
#
# See PPC_Common.rules for the format of this file
#####
# IR_PROLOGUE:
#####
stm:	IR_PROLOGUE
11
EMIT_INSTRUCTION
EMIT(P(p));

##################################
# Basic Long ALU operations
##################################
#####
# LONG_MUL
#####
r:      LONG_MUL(r,INT_CONSTANT)
11
EMIT_INSTRUCTION
EMIT(MIR_Binary.mutate(P(p), PPC_MULLI, Binary.getResult(P(p)),               \
                       R(Binary.getVal1(P(p))), Binary.getVal2(P(p))));

r:      LONG_MUL(r,r)
11
EMIT_INSTRUCTION
EMIT(MIR_Binary.mutate(P(p), PPC64_MULLD, Binary.getResult(P(p)),               \
                       R(Binary.getVal1(P(p))), Binary.getVal2(P(p))));

#####
# LONG_DIV
#####
r:      LONG_DIV(r,r)
20
EMIT_INSTRUCTION
EMIT(MIR_Binary.mutate(P(p), PPC64_DIVD, GuardedBinary.getResult(P(p)),  \
                       R(GuardedBinary.getVal1(P(p))), GuardedBinary.getVal2(P(p))));

r:      LONG_DIV(r,REF_MOVE(INT_CONSTANT))
20
EMIT_INSTRUCTION
LONG_DIV_IMM(P(p), GuardedBinary.getResult(P(p)), R(GuardedBinary.getVal1(P(p))), \
                   Move.getResult(PR(p)), IC(Move.getVal(PR(p))));

#####
# LONG_REM
#####
r:      LONG_REM(r,r)
20
EMIT_INSTRUCTION
LONG_REM(P(p), GuardedBinary.getResult(P(p)), R(GuardedBinary.getVal1(P(p))), R(GuardedBinary.getVal2(P(p))));

r:      LONG_REM(r,REF_MOVE(INT_CONSTANT))
20
EMIT_INSTRUCTION
LONG_REM_IMM(P(p), GuardedBinary.getResult(P(p)), R(GuardedBinary.getVal1(P(p))), \
                   Move.getResult(PR(p)), IC(Move.getVal(PR(p))));

#####
# LONG_SHL
#####
r:      LONG_SHL(r,INT_CONSTANT)
10
EMIT_INSTRUCTION
EMIT(MIR_Binary.mutate(P(p), PPC64_SLDI, Binary.getResult(P(p)),              \
                       R(Binary.getVal1(P(p))), Binary.getVal2(P(p))));

r:      LONG_SHL(r,r)
20
EMIT_INSTRUCTION
EMIT(MIR_Binary.mutate(P(p), PPC64_SLD, Binary.getResult(P(p)),               \
                       R(Binary.getVal1(P(p))), Binary.getVal2(P(p))));

r:      LONG_SHL(LONG_USHR(r,INT_CONSTANT),INT_CONSTANT)
(VLR(p) <= VR(p)) ? 10 : INFINITE
EMIT_INSTRUCTION
EMIT(MIR_RotateAndMask.mutate(P(p), PPC64_RLDICR, Binary.getResult(P(p)), R(Binary.getVal1(PL(p))), \
                              IC(VR(p) - VLR(p)), IC(0), IC(63 - VR(p))));

r:      LONG_USHR(LONG_SHL(r,INT_CONSTANT),INT_CONSTANT)
(VLR(p) <= VR(p)) ? 10 : INFINITE
EMIT_INSTRUCTION
EMIT(MIR_RotateAndMask.mutate(P(p), PPC64_RLDICL, Binary.getResult(P(p)), R(Binary.getVal1(PL(p))), \
                              IC(64 - (VR(p) - VLR(p))), IC(VR(p)), IC(63)));

#####
# LONG_SHR
#####
r:      LONG_SHR(r,INT_CONSTANT)
10
EMIT_INSTRUCTION
EMIT(MIR_Binary.mutate(P(p), PPC64_SRADI, Binary.getResult(P(p)), R(Binary.getVal1(P(p))), Binary.getVal2(P(p))));

r:      LONG_SHR(r,r)
20
EMIT_INSTRUCTION
EMIT(MIR_Binary.mutate(P(p), PPC64_SRAD, Binary.getResult(P(p)), R(Binary.getVal1(P(p))), Binary.getVal2(P(p))));

#####
# LONG_USHR
#####
r:      LONG_USHR(r,INT_CONSTANT)
10
EMIT_INSTRUCTION
EMIT(MIR_Binary.mutate(P(p), PPC64_SRDI, Binary.getResult(P(p)), R(Binary.getVal1(P(p))), Binary.getVal2(P(p))));

r:      LONG_USHR(r,r)
20
EMIT_INSTRUCTION
EMIT(MIR_Binary.mutate(P(p), PPC64_SRD, Binary.getResult(P(p)),               \
                       R(Binary.getVal1(P(p))), Binary.getVal2(P(p))));

#####
# INT_2LONG
#####
rs:	INT_2LONG(r)
11
EMIT_INSTRUCTION
INT_2LONG(P(p), Unary.getResult(P(p)), R(Unary.getVal(P(p))));

rs:	INT_2LONG(rs)
10
EMIT_INSTRUCTION
EMIT(MIR_Move.mutate(P(p), PPC_MOVE, Unary.getResult(P(p)), R(Unary.getVal(P(p)))));

#####
# LONG_2INT
#####
r:	LONG_2INT(r)
10
EMIT_INSTRUCTION
LONG_2INT(P(p), Unary.getResult(P(p)), R(Unary.getVal(P(p))));

#####
# FLOAT_2LONG
#####
r:	FLOAT_2LONG(r)
10
EMIT_INSTRUCTION
EMIT(P(p));  // Leave for ComplexLIR2MIRExpansion

#####
# DOUBLE_2LONG
#####
r:	DOUBLE_2LONG(r)
10
EMIT_INSTRUCTION
EMIT(P(p));  // Leave for ComplexLIR2MIRExpansionLeave

#####
# DOUBLE_AS_LONG_BITS
#####
r:	DOUBLE_AS_LONG_BITS(r)
40
EMIT_INSTRUCTION
FPR2GPR_64(P(p));

#####
# LONG_BITS_AS_DOUBLE
#####
r:	LONG_BITS_AS_DOUBLE(r)
40
EMIT_INSTRUCTION
GPR2FPR_64(P(p));

#####
# REF_MOVE
#####
r:	REF_MOVE(ADDRESS_CONSTANT)
40
EMIT_INSTRUCTION
LONG_CONSTANT(P(p), Move.getResult(P(p)), AC(Move.getVal(P(p))));

r:	REF_MOVE(LONG_CONSTANT)
40
EMIT_INSTRUCTION
LONG_CONSTANT(P(p), Move.getResult(P(p)), LC(Move.getVal(P(p))));

#####
# LONG_CMP
#####
r:	LONG_CMP(r,r)
40
EMIT_INSTRUCTION
EMIT (P(p)); //  Leave for ComplexLIR2MIRExpansion

#####
# LONG_IFCMP
#####
stm:      LONG_IFCMP(r,r)
20
EMIT_INSTRUCTION
CMP64(P(p), R(IfCmp.getVal1(P(p))), IfCmp.getVal2(P(p)), IfCmp.getCond(P(p)), false);

stm:      LONG_IFCMP(r,INT_CONSTANT)
20
EMIT_INSTRUCTION
CMP64(P(p), R(IfCmp.getVal1(P(p))), IfCmp.getVal2(P(p)), IfCmp.getCond(P(p)), true);

stm:      LONG_IFCMP(r,LONG_CONSTANT)
20
EMIT_INSTRUCTION
CMP64(P(p), R(IfCmp.getVal1(P(p))), IfCmp.getVal2(P(p)), IfCmp.getCond(P(p)), true);

#####
# INT_IFCMP
#####
stm:    INT_IFCMP(ATTEMPT_INT(r,r),INT_CONSTANT)
(!IfCmp.getCond(P(p)).isUNSIGNED())&&ZERO(IfCmp.getVal2(P(p)))?20:INFINITE
EMIT_INSTRUCTION
{                                                                             \
   ConditionOperand c = IfCmp.getCond(P(p)).flipCode();                   \
   EMIT(MIR_Store.create(PPC_STWCXr, R(Attempt.getNewValue(PL(p))), \
                                  R(Attempt.getAddress(PL(p))), Attempt.getOffset(PL(p)),           \
                                  Attempt.getLocation(PL(p)),                \
                                  Attempt.getGuard(PL(p))));                \
   EMIT(MIR_CondBranch.mutate(P(p), PPC_BCOND, CR(0),                         \
                              new PowerPCConditionOperand(c),             \
                              IfCmp.getTarget(P(p)),                         \
                              IfCmp.getBranchProfile(P(p))));                 \
}

stm:    INT_IFCMP(ATTEMPT_ADDR(r,r),INT_CONSTANT)
(!IfCmp.getCond(P(p)).isUNSIGNED())&&ZERO(IfCmp.getVal2(P(p)))?20:INFINITE
EMIT_INSTRUCTION
{                                                                             \
   ConditionOperand c = IfCmp.getCond(P(p)).flipCode();                   \
   EMIT(MIR_Store.create(PPC_STAddrCXr, R(Attempt.getNewValue(PL(p))), \
                                  R(Attempt.getAddress(PL(p))), Attempt.getOffset(PL(p)),           \
                                  Attempt.getLocation(PL(p)),                \
                                  Attempt.getGuard(PL(p))));                \
   EMIT(MIR_CondBranch.mutate(P(p), PPC_BCOND, CR(0),                         \
                              new PowerPCConditionOperand(c),             \
                              IfCmp.getTarget(P(p)),                         \
                              IfCmp.getBranchProfile(P(p))));                 \
}

#####
# INT_2ADDRZerExt
#####
rz:	INT_2ADDRZerExt(rz)
10
EMIT_INSTRUCTION
EMIT(MIR_Move.mutate(P(p), PPC_MOVE, Unary.getResult(P(p)), R(Unary.getVal(P(p)))));

rz:	INT_2ADDRZerExt(r)
11
EMIT_INSTRUCTION
INT_2ADDRZerExt(P(p), Unary.getResult(P(p)), R(Unary.getVal(P(p))));

rz: INT_2ADDRZerExt(INT_LOAD(r,INT_CONSTANT))
11
EMIT_INSTRUCTION
EMIT(MIR_Load.mutate(PL(p), PPC_LWZ, Unary.getResult(P(p)),            \
                     R(Load.getAddress(PL(p))), Load.getOffset(PL(p)), \
                     Load.getLocation(PL(p)), Load.getGuard(PL(p))));

rz: INT_2ADDRZerExt(INT_LOAD(r,r))
11
EMIT_INSTRUCTION
EMIT(MIR_Load.mutate(PL(p), PPC_LWZX, Unary.getResult(P(p)),           \
                     R(Load.getAddress(PL(p))), Load.getOffset(PL(p)), \
                     Load.getLocation(PL(p)), Load.getGuard(PL(p))));

rz: INT_2ADDRZerExt(INT_LOAD(REF_ADD(r,INT_CONSTANT),INT_CONSTANT))
SI16(VLR(p)+VLLR(p)) ? 14 : INFINITE
EMIT_INSTRUCTION
EMIT(MIR_Load.mutate(PL(p), PPC_LWZ, Unary.getResult(P(p)),            \
                              R(Binary.getVal1(PLL(p))), IC(VLR(p)+VLLR(p)), \
                              Load.getLocation(PL(p)), Load.getGuard(PL(p))));

