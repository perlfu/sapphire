#
# This file is part of Jikes RVM (http://jikesrvm.sourceforge.net).
# The Jikes RVM project is distributed under the Common Public License (CPL).
# A copy of the license is included in the distribution, and is also
# available at http://www.opensource.org/licenses/cpl1.0.php
#
# (C) Copyright IBM Corp. 2001,2002
#
#//$Id$
#
# @author Dave Grove
# @author Mauricio J. Serrano
#
# BURS rules for memory access (load/stores) 
# that are specific to a 32 bit platform.
#
# See PPC_Common.rules for the format of this file
#
#####
# LONG_LOAD
#####
r:	LONG_LOAD(r,INT_CONSTANT)
21
EMIT_INSTRUCTION
LONG_LOAD_addi(P(p), Load.getResult(P(p)),                  \
                           R(Load.getAddress(P(p))), IC(Load.getOffset(P(p))), \
			   Load.getLocation(P(p)), Load.getGuard(P(p))); 

r:      LONG_LOAD(r,REF_MOVE(ADDRESS_CONSTANT))
21
EMIT_INSTRUCTION
LONG_LOAD_addis(P(p), Load.getResult(P(p)),                 \
                            R(Load.getAddress(P(p))),                         \
                            R(Load.getOffset(P(p))), AC(Move.getVal(PR(p))),   \
		            Load.getLocation(P(p)), Load.getGuard(P(p)));

r:	LONG_LOAD(r,r)
21
EMIT_INSTRUCTION
LONG_LOAD_addx(P(p), Load.getResult(P(p)),                  \
                           R(Load.getAddress(P(p))), R(Load.getOffset(P(p))), \
			   Load.getLocation(P(p)), Load.getGuard(P(p)));

#####
# LONG_STORE
#####
stm:	LONG_STORE(r,OTHER_OPERAND(r,INT_CONSTANT))
22
EMIT_INSTRUCTION
LONG_STORE_addi(P(p), R(Store.getValue(P(p))),              \
                            R(Store.getAddress(P(p))),                        \
                            IC(Store.getOffset(P(p))),                         \
			    Store.getLocation(P(p)),                          \
                            Store.getGuard(P(p)));

stm:      LONG_STORE(r,OTHER_OPERAND(r,REF_MOVE(ADDRESS_CONSTANT)))
22
EMIT_INSTRUCTION
LONG_STORE_addis(P(p), R(Store.getValue(P(p))),             \
                             R(Store.getAddress(P(p))),                       \
                             R(Store.getOffset(P(p))),                        \
                             AC(Move.getVal(PRR(p))),                          \
			     Store.getLocation(P(p)),                         \
                             Store.getGuard(P(p)));

stm:	LONG_STORE(r,OTHER_OPERAND(r,r))
22
EMIT_INSTRUCTION
LONG_STORE_addx(P(p), R(Store.getValue(P(p))),              \
                            R(Store.getAddress(P(p))),                        \
                            R(Store.getOffset(P(p))),                         \
			    Store.getLocation(P(p)),                          \
                            Store.getGuard(P(p)));

#####
# PREPARE
#####
r:      PREPARE_ADDR(r, r)
11
EMIT_INSTRUCTION
EMIT(MIR_Load.mutate(P(p), PPC_LWARX, Prepare.getResult(P(p)),   \
                              R(Prepare.getAddress(P(p))), Prepare.getOffset(P(p)),           \
                              Prepare.getLocation(P(p)),                  \
                              Prepare.getGuard(P(p))));

##################################
# Stores (register to memory moves)
##################################
#####
# ATTEMPT (atomic compare-exchange)
#####
r:      ATTEMPT_ADDR(r, r)
11
EMIT_INSTRUCTION
EMIT(P(p));  // Leave for OPT_ComplexLIR2MIRExpansion

