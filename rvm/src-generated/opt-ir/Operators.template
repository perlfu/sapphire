/*
 *  This file is part of the Jikes RVM project (http://jikesrvm.org).
 *
 *  This file is licensed to You under the Common Public License (CPL);
 *  You may not use this file except in compliance with the License. You
 *  may obtain a copy of the License at
 *
 *      http://www.opensource.org/licenses/cpl1.0.php
 *
 *  See the COPYRIGHT.txt file distributed with this work for information
 *  regarding copyright ownership.
 */

/*
 * THIS FILE IS MACHINE GENERATED. DO NOT EDIT.
 * The input files are:
 *  Operators.template
 *  OperatorList.dat
 *  ARCH_OP_LIST
 */

package org.jikesrvm.compilers.opt.ir;

$$$$ IF ARCHITECTURE == "ia32"
import org.jikesrvm.compilers.opt.ir.ia32.MachineSpecificIRIA;
$$$$ ELSE
import org.jikesrvm.compilers.opt.ir.ppc.MachineSpecificIRPowerPC;
$$$$ END IF

/**
 * Interface with all operator names and opcodes.
 *
 * @see Operator
 */
public interface Operators {

  MachineSpecificIR helper =
$$$$ IF ARCHITECTURE == "ia32"
$$$$ IF ARCH_BITS == "32"
                                              MachineSpecificIRIA.IA32.singleton;
$$$$ ELSE
                                              MachineSpecificIRIA.EM64T.singleton;
$$$$ END IF
$$$$ END IF
$$$$ IF ARCHITECTURE == "ppc"
$$$$ IF ARCH_BITS == "32"
                                              MachineSpecificIRPowerPC.PPC32.singleton;
$$$$ ELSE
                                              MachineSpecificIRPowerPC.PPC64.singleton;
$$$$ END IF
$$$$ END IF

$$$$ FOREACH OPERATOR OperatorList.dat
  char OPERATOR.SYMBOL_opcode = (char)OPERATOR.INDEX;
$$$$ END FOREACH
$$$$ IF ARCHITECTURE != "NONE"
  //////////////////////////
  // END   Architecture Independent opcodes.
  // BEGIN Architecture Dependent opcodes & MIR.
  //////////////////////////
$$$$ FOREACH OPERATOR ARCH_OP_LIST
  char OPERATOR.SYMBOL_opcode = (char)(OPERATOR.INDEX + ARCH_INDEPENDENT_END_opcode);
$$$$ END FOREACH
$$$$ END IF

$$$$ IF ARCHITECTURE == "NONE"
$$$$ IF USE_EXTRA_OPLIST == "TRUE"
  //////////////////////////
  // END   Architecture Independent opcodes.
  // BEGIN Architecture Dependent opcodes & MIR.
  //////////////////////////
$$$$ FOREACH OPERATOR ExtraOperatorList.dat
  char OPERATOR.SYMBOL_opcode = (char)(OPERATOR.INDEX + ARCH_INDEPENDENT_END_opcode);
$$$$ END FOREACH
$$$$ END IF
$$$$ END IF

$$$$ FOREACH OPERATOR OperatorList.dat
$$$$ IF OPERATOR.SYMBOL != "ARCH_INDEPENDENT_END"
  Operator OPERATOR.SYMBOL = Operator.OperatorArray[OPERATOR.INDEX];
$$$$ END IF
$$$$ END FOREACH
$$$$ IF ARCHITECTURE != "NONE"
  //////////////////////////
  // END   Architecture Independent opcodes.
  // BEGIN Architecture Dependent opcodes & MIR.
  //////////////////////////
$$$$ FOREACH OPERATOR ARCH_OP_LIST
  Operator OPERATOR.SYMBOL = Operator.OperatorArray[OPERATOR.INDEX+ARCH_INDEPENDENT_END_opcode];
$$$$ END FOREACH
$$$$ END IF

$$$$ IF ARCHITECTURE == "NONE"
$$$$ IF USE_EXTRA_OPLIST == "TRUE"
  //////////////////////////
  // END   Architecture Independent opcodes.
  // BEGIN Architecture Dependent opcodes & MIR.
  //////////////////////////
$$$$ FOREACH OPERATOR ExtraOperatorList.dat
  Operator OPERATOR.SYMBOL = Operator.OperatorArray[OPERATOR.INDEX+ARCH_INDEPENDENT_END_opcode];
$$$$ END FOREACH
$$$$ END IF
$$$$ END IF

}
