#
#  This file is part of the Jikes RVM project (http://jikesrvm.org).
#
#  This file is licensed to You under the Eclipse Public License (EPL);
#  You may not use this file except in compliance with the License. You
#  may obtain a copy of the License at
#
#      http://www.opensource.org/licenses/eclipse-1.0.php
#
#  See the COPYRIGHT.txt file distributed with this work for information
#  regarding copyright ownership.
#
DECL
# Structure of DECL FULL_NAME OPT_LEVEL DEFAULT_VALUE {SHORT_NAME}
DESCRIP

##########
# Cross cutting optimization options
##########
FREQ_FOCUS_EFFORT -1 false focus_effort
Focus compilation effort based on frequency profile data

READS_KILL -1 false
Should we constrain optimizations by enforcing reads-kill?

##########
# Analysis of fields to help determine their type options
##########
FIELD_ANALYSIS 0 true
Eagerly compute method summaries for flow-insensitive field analysis

##########
# Inlining optimizations
##########
INLINE 0 true
Inline statically resolvable calls

INLINE_GUARDED 0 true
Guarded inlining of non-final virtual calls

INLINE_GUARDED_INTERFACES 0 true
Speculatively inline non-final interface calls

INLINE_PREEX 0 true
Pre-existence based inlining

##########
# Simplifier, single instruction optimizations
# NB: these operations may create more literal values that may consume space
# in the JTOC.
# NB: The convention is that constant folding is controlled based on the type
# of the result of the operator, not the type of its inputs.
##########
SIMPLIFY_INTEGER_OPS -1 true
Simplify operations on integers

SIMPLIFY_LONG_OPS -1 true
Simplify operations on longs

SIMPLIFY_FLOAT_OPS -1 true
Simplify operations on floats

SIMPLIFY_DOUBLE_OPS -1 true
Simplify operations on floats

SIMPLIFY_REF_OPS -1 true
Simplify operations on references

SIMPLIFY_TIB_OPS -1 true
Simplify operations on TIBs

SIMPLIFY_FIELD_OPS -1 true
Simplify operations on fields

SIMPLIFY_CHASE_FINAL_FIELDS -1 true
Chase final fields avoiding loads at runtime

##########
# Local (within a basic block) optimizations
##########
LOCAL_CONSTANT_PROP 0 true
Perform local constant propagation

LOCAL_COPY_PROP 0 true
Perform local copy propagation

LOCAL_CSE 0 true
Perform local common subexpression elimination

LOCAL_EXPRESSION_FOLDING 3 false
Should we try to fold expressions with constants locally?

##########
# Control-flow optimization options
##########
CONTROL_STATIC_SPLITTING 1 true
CFG splitting to create hot traces based on static heuristics

CONTROL_TURN_WHILES_INTO_UNTILS 3 false control_unwhile
Turn whiles into untils

##########
# Simple escape optimization options
##########
ESCAPE_SIMPLE_IPA -1 false
Eagerly compute method summaries for simple escape analysis

ESCAPE_SCALAR_REPLACE_AGGREGATES 1 true
If possible turn aggregates (objects) into variable definition/uses

ESCAPE_MONITOR_REMOVAL 1 true
Try to remove unnecessary monitor operations

ESCAPE_INVOKEE_THREAD_LOCAL -1 false
Compile the method assuming the invokee is thread-local. Cannot be properly set on command line.

##########
# SSA optimizations
##########
SSA 3 false
Should SSA form be constructed on the HIR?

SSA_EXPRESSION_FOLDING 3 false
Should we try to fold expressions with constants in SSA form?

SSA_REDUNDANT_BRANCH_ELIMINATION 3 true
Eliminate redundant conditional branches

# This options looks unsound, remove?
SSA_LICM_IGNORE_PEI -1 false
Assume PEIs do not throw or state is not observable

SSA_LOAD_ELIMINATION 3 false
Should we perform redundant load elimination during SSA pass?

SSA_COALESCE_AFTER 3 false
Should we coalesce move instructions after leaving SSA?

SSA_LOOP_VERSIONING -1 false
Create copies of loops where runtime exceptions are checked prior to entry

SSA_LIVE_RANGE_SPLITTING -1 false
Split live ranges using LIR SSA pass?

SSA_GCP 3 false
Perform global code placement

SSA_GCSE 3 false
Perform global code placement

# ABCD is currently incomplete; it doesn't check lower bounds
SSA_GLOBAL_BOUNDS_CHECK -1 false ssa_global_bounds
Perform (incomplete/unsafe) global Array Bound Check elimination on Demand

SSA_SPLITBLOCK_TO_AVOID_RENAME -1 false
When leaving SSA create blocks to avoid renaming variables

SSA_SPLITBLOCK_FOR_LOCAL_LIVE -1 true
When leaving SSA create blocks for local liveness

SSA_SPLITBLOCK_INTO_INFREQUENT -1 true
When leaving SSA create blocks to avoid adding code to frequently executed blocks

##########
# Code reordering for icache performance options
##########
REORDER_CODE 0 true
Reorder basic blocks for improved locality and branch prediction

REORDER_CODE_PH 1 true
Reorder basic blocks using Pettis and Hansen Algo2

##########
# Options during conversion from HIR to LIR
##########
H2L_INLINE_NEW 0 true
Inline allocation of scalars and arrays

H2L_INLINE_WRITE_BARRIER 1 true
Inline write barriers for generational collectors

H2L_NO_CALLEE_EXCEPTIONS -1 false
Assert that any callee of this compiled method will not throw exceptions. Cannot be properly set on command line.

H2L_CALL_VIA_JTOC -1 false
Plant virtual calls via the JTOC rather than from the tib of anobject when possible

##########
# Options during conversion from LIR to MIR
##########
L2M_HANDLER_LIVENESS 2 false
Store liveness for handlers to improve dependence graph at PEIs

L2M_SCHEDULE_PREPASS -1 false
Perform prepass instruction scheduling

##########
# Options during register allocation
##########
REGALLOC_COALESCE_MOVES 0 true
Attempt to coalesce to eliminate register moves?

REGALLOC_COALESCE_SPILLS 0 true
Attempt to coalesce stack locations?

##########
# Options for adaptive compilation
##########
ADAPTIVE_INSTRUMENTATION_SAMPLING -1 false
Perform code transformation to sample instrumentation code.

ADAPTIVE_NO_DUPLICATION -1 false
When performing inst. sampling, should it be done without duplicating code?

ADAPTIVE_PROCESSOR_SPECIFIC_COUNTER -1 true
Should there be one CBS counter per processor for SMP performance?

ADAPTIVE_REMOVE_YP_FROM_CHECKING -1 false
Should yieldpoints be removed from the checking code (requires finite sample interval)

###########
# OnStackReplacement options
###########
OSR_GUARDED_INLINING 1 true
Insert OSR point at off branch of guarded inlining?

OSR_INLINE_POLICY 1 true
Use OSR knowledge to drive more aggressive inlining?

##########
# Printing options
##########
PRINT_STATIC_STATS -1 false
Print out compile-time statistics for basic blocks?

PRINT_PHASES -1 false
Print short message for each compilation phase

PRINT_ALL_IR -1 false
Dump the IR after each compiler phase

PRINT_DETAILED_INLINE_REPORT -1 false
Print detailed report of compile-time inlining decisions

PRINT_INLINE_REPORT -1 false
Print detailed report of compile-time inlining decisions

PRINT_DOMINATORS -1 false print_dom
Print dominators

PRINT_POST_DOMINATORS -1 false print_pdom
Print post-dominators

PRINT_SSA -1 false
Print SSA form

PRINT_DG_BURS -1 false
Print dependence graph before burs

PRINT_DG_SCHED_PRE -1 false
Print dependence graph before prepass scheduling

PRINT_DG_SCHED_POST -1 false
Print dependence graph before postpass scheduling

PRINT_COALESCING -1 false print_coal
Print coalescing output

## Options for IR printing at various points in compilation
PRINT_HIGH -1 false
Print IR after initial generation

PRINT_FINAL_HIR -1 false
Print IR just before conversion to LIR

PRINT_LOW -1 false
Print IR after conversion to LIR

PRINT_FINAL_LIR -1 false
Print IR just before conversion to MIR

PRINT_MIR -1 false
Print IR after conversion to MIR

PRINT_FINAL_MIR -1 false
Print IR just before conversion to machine code

PRINT_CFG -1 false
Print control flow graph too when IR is printed

PRINT_SCHEDULE_PRE -1 false
Print IR after prepass scheduling

PRINT_SCHEDULE_POST -1 false
Print IR after postpass scheduling

PRINT_REGALLOC -1 false
Print IR before and after register allocation

PRINT_CALLING_CONVENTIONS -1 false
Print IR after expanding calling conventions

PRINT_GC_MAPS -1 false
Print the garbage collection maps

##########
# Debugging flags
##########
DEBUG_CODEGEN -1 false debug_cgd
Enable debugging support for final assembly

DEBUG_INSTRU_SAMPLING -1 false
Enable debugging statements for instrumentation sampling

DEBUG_INSTRU_SAMPLING_DETAIL -1 false
Enable detailed debugging statements for instrumentation sampling

DEBUG_GCP -1 false
Perform noisy global code placement

