#
#  This file is part of the Jikes RVM project (http://jikesrvm.org).
#
#  This file is licensed to You under the Common Public License (CPL);
#  You may not use this file except in compliance with the License. You
#  may obtain a copy of the License at
#
#      http://www.opensource.org/licenses/cpl1.0.php
#
#  See the COPYRIGHT.txt file distributed with this work for information
#  regarding copyright ownership.
#
DECL
# Structure of DECL FULL_NAME OPT_LEVEL DEFAULT_VALUE {SHORT_NAME}
DESCRIP

##########
# First all the non-printing, non-debugging options
# Should not start with PRINT_ or DEBUG_ prefix
##########
LOCAL_CONSTANT_PROP 0 true
Perform local constant propagation

LOCAL_COPY_PROP 0 true
Perform local copy propagation

LOCAL_CSE 0 true
Perform local common subexpression elimination

# ABCD is currently incomplete; it doesn't check lower bounds
GLOBAL_BOUNDS_CHECK -1 false global_bounds
Perform global Array Bound Check elimination on Demand

MONITOR_REMOVAL 1 true
Try to remove unnecessary monitor operations

INVOKEE_THREAD_LOCAL -1 false
Compile the method assuming the invokee is thread-local

NO_CALLEE_EXCEPTIONS -1 false
Assert that any callee of this compiled method will not throw exceptions?

SIMPLE_ESCAPE_IPA -1 false
Eagerly compute method summaries for simple escape analysis

FIELD_ANALYSIS 0 true
Eagerly compute method summaries for flow-insensitive field analysis

SCALAR_REPLACE_AGGREGATES 1 true
Perform scalar replacement of aggregates

REORDER_CODE 0 true
Reorder basic blocks for improved locality and branch prediction

REORDER_CODE_PH 1 true
Reorder basic blocks using Pettis and Hansen Algo2

INLINE_NEW 0 true
Inline allocation of scalars and arrays

INLINE_WRITE_BARRIER 1 true
Inline write barriers for generational collectors

INLINE 0 true
Inline statically resolvable calls

GUARDED_INLINE 0 true
Guarded inlining of non-final virtual calls

GUARDED_INLINE_INTERFACE 0 true
Speculatively inline non-final interface calls

STATIC_SPLITTING 1 true
CFG splitting to create hot traces based on static heuristics

REDUNDANT_BRANCH_ELIMINATION 3 true
Eliminate redundant conditional branches

PREEX_INLINE 0 true
Pre-existence based inlining

SSA 3 false
Should SSA form be constructed on the HIR?

LOAD_ELIMINATION 3 false
Should we perform redundant load elimination during SSA pass?

COALESCE_AFTER_SSA 3 false
Should we coalesce move instructions after leaving SSA?

EXPRESSION_FOLDING 3 false
Should we try to fold expressions with constants in SSA form?

LIVE_RANGE_SPLITTING -1 false
Split live ranges using LIR SSA pass?

GCP 3 false gcp
Perform global code placement

GCSE 3 false  gcse
Perform global code placement

VERBOSE_GCP -1 false verbose_gcp
Perform noisy global code placement

LICM_IGNORE_PEI -1 false licm_ignore_pei
Asume PEIs do not throw or state is not observable

TURN_WHILES_INTO_UNTILS 3 false unwhile
Turn whiles into untils

LOOP_VERSIONING -1 false loop_versioning
Loop versioning

HANDLER_LIVENESS 2 false
Store liveness for handlers to improve dependence graph at PEIs

SCHEDULE_PREPASS -1 false
Perform prepass instruction scheduling

NO_CHECKCAST -1 false
Should all checkcast operations be (unsafely) eliminated?

NO_CHECKSTORE -1 false
Should all checkstore operations be (unsafely) eliminated?

NO_BOUNDS_CHECK -1 false
Should all bounds check operations be (unsafely) eliminated?

NO_NULL_CHECK -1 false
Should all null check operations be (unsafely) eliminated?

NO_SYNCHRO -1 false
Should all synchronization operations be (unsafely) eliminated?

NO_THREADS -1 false
Should all yield points be (unsafely) eliminated?

NO_CACHE_FLUSH -1 VM.BuildForIA32
Should cache flush instructions (PowerPC SYNC/ISYNC) be omitted? NOTE: Cannot be correctly changed via the command line!

READS_KILL -1 false
Should we constrain optimizations by enforcing reads-kill?

MONITOR_NOP -1 false
Should we treat all monitorenter/monitorexit bytecodes as nops?

STATIC_STATS -1 false
Should we dump out compile-time statistics for basic blocks?

CODE_PATCH_NOP -1 false
Should all patch point be (unsafely) eliminated (at initial HIR)?

INSTRUMENTATION_SAMPLING -1 false
Perform code transformation to sample instrumentation code.

NO_DUPLICATION -1 false
When performing inst. sampling, should it be done without duplicating code?

PROCESSOR_SPECIFIC_COUNTER -1 true
Should there be one CBS counter per processor for SMP performance?

REMOVE_YP_FROM_CHECKING -1 false
Should yieldpoints be removed from the checking code (requires finite sample interval)

##########
# Options for feedback-directed optimizations
#
FREQ_FOCUS_EFFORT -1 false focusEffort
Focus compilation effort based on frequency profile data

##########
# Next, declare all the printing options
# MUST start with PRINT_
#
PRINT_PHASES -1 false phases
Print short message for each compilation phase

PRINT_ALL_IR -1 false
Dump the IR after each compiler phase

PRINT_DETAILED_INLINE_REPORT -1 false
Print detailed report of compile-time inlining decisions

PRINT_INLINE_REPORT -1 false
Print detailed report of compile-time inlining decisions

PRINT_DOMINATORS -1 false dom
Print dominators

PRINT_POST_DOMINATORS -1 false pdom
Print post-dominators

PRINT_SSA -1 false
Print SSA form

PRINT_DG_BURS -1 false
Print dependence graph before burs

PRINT_DG_SCHED_PRE -1 false
Print dependence graph before prepass scheduling

PRINT_DG_SCHED_POST -1 false
Print dependence graph before postpass scheduling

PRINT_COALESCING -1 false pcoal
Print coalescing output

## Options for IR printing at various points in compilation
PRINT_HIGH -1 false high
Print IR after initial generation

PRINT_FINAL_HIR -1 false final_hir
Print IR just before conversion to LIR

PRINT_LOW -1 false low
Print IR after conversion to LIR

PRINT_FINAL_LIR -1 false final_lir
Print IR just before conversion to MIR

PRINT_MIR -1 false mir
Print IR after conversion to MIR

PRINT_FINAL_MIR -1 false final_mir
Print IR just before conversion to machine code

PRINT_CFG -1 false cfg
Print control flow graph too when IR is printed

PRINT_SCHEDULE_PRE -1 false
Print IR after prepass scheduling

PRINT_SCHEDULE_POST -1 false
Print IR after postpass scheduling

PRINT_REGALLOC -1 false regalloc
Print IR before and after register allocation

PRINT_CALLING_CONVENTIONS -1 false
Print IR after expanding calling conventions

##########
# Finally, the debugging flags
# MUST start with DEBUG_ prefix
#
DEBUG_CODEGEN -1 false cgd
Enable debugging support for final assembly

DEBUG_INSTRU_SAMPLING -1 false
Enable debugging statements for instrumentation sampling

DEBUG_INSTRU_SAMPLING_DETAIL -1 false
Enable detailed debugging statements for instrumentation sampling

###########
# OnStackReplacement options, use this when guarded_inlining
# is enabled
###########
OSR_GUARDED_INLINING 1 true
Insert OSR point at off branch of guarded inlining?

OSR_INLINE_POLICY 1 true
Use OSR knowledge to drive more aggressive inlining?

