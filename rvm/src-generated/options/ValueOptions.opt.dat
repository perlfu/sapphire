#
#  This file is part of the Jikes RVM project (http://jikesrvm.org).
#
#  This file is licensed to You under the Eclipse Public License (EPL);
#  You may not use this file except in compliance with the License. You
#  may obtain a copy of the License at
#
#      http://www.opensource.org/licenses/eclipse-1.0.php
#
#  See the COPYRIGHT.txt file distributed with this work for information
#  regarding copyright ownership.
#
DECL 
# Structure of DECL TAG FULL_NAME TYPE DEFAULT_VALUE {SHORT_NAME}
# TAG: E = Enumeration, V = Value, S = Set, B = BitMask (TODO).
# TYPE: byte, int, String, double
DESCRIP
ENUMS
#Structure of ENUMS "ITEM_NAME QUERY_NAME CMD_NAME"

S DRIVER_EXCLUDE String
Exclude methods from being opt compiled


V PRINT_IR_LEVEL int 0
Only print IR compiled above this level


V PROFILE_EDGE_COUNT_INPUT_FILE String null
Input file of edge counter profile data


E PROFILE_FREQUENCY_STRATEGY byte PROFILE_COUNTERS_FREQ
How to compute block and edge frequencies?
"PROFILE_COUNTERS_FREQ frequencyCounters counters" \
"PROFILE_STATIC_FREQ staticFrequencyEstimates static" \
"PROFILE_DUMB_FREQ dumbFrequency dumb" \
"PROFILE_INVERSE_COUNTERS_FREQ inverseFrequencyCounters inverse"

V PROFILE_INFREQUENT_THRESHOLD float 0.01f
Cumulative threshold which defines the set of infrequent basic blocks


V PROFILE_CBS_HOTNESS double 0.98
Threshold at which a conditional branch is considered to be skewed


V ESCAPE_MAX_ARRAY_SIZE int 5
Maximum size of array to replaced with registers by simple escape analysis


V SSA_LOAD_ELIMINATION_ROUNDS int 3
How many rounds of redundant load elimination will we attempt?


V L2M_MAX_BLOCK_SIZE int 300
Maximum size of block for BURS, larger blocks are split


E REGALLOC_SPILL_COST_ESTIMATE byte REGALLOC_BLOCK_COUNT_SPILL_COST
Selection of spilling heuristic
"REGALLOC_SIMPLE_SPILL_COST simpleSpillCost simple" \
"REGALLOC_BRAINDEAD_SPILL_COST brainDeadSpillCost brainDead" \
"REGALLOC_BLOCK_COUNT_SPILL_COST blockCountSpillCost blockCount"

V REGALLOC_SIMPLE_SPILL_COST_MOVE_FACTOR double 1.0
spill penalty for move instructions


# registers used in memory operands may hurt more than 'normal', since they
# will definitely use a scratch register. rationale for 5: 5 instructions
# affected when using a scratch register. (2 to save physical register, 1 to
# load scratch, 1 to dump scratch, and the original)
V REGALLOC_SIMPLE_SPILL_COST_MEMORY_OPERAND_FACTOR double 5.0
spill penalty for registers used in memory operands


V CONTROL_TABLESWITCH_CUTOFF int 8
If a tableswitch comprises this many or fewer comparisons convert it into multiple if-then-else style branches


V CONTROL_COND_MOVE_CUTOFF int 5
How many extra instructions will we insert in order to remove a conditional branch?


V CONTROL_UNROLL_LOG int 2
Unroll loops. Duplicates the loop body 2^n times.


V CONTROL_STATIC_SPLITTING_MAX_COST int 10
Upper bound on the number of instructions duplicated per block when trying to create hot traces with static splitting


V CONTROL_WELL_PREDICTED_CUTOFF double 1/6
Don't replace branches with conditional moves if they are outside of the range of 0.5 +- this value


V INLINE_MAX_TARGET_SIZE int (4*org.jikesrvm.classloader.NormalMethod.CALL_COST-org.jikesrvm.classloader.NormalMethod.SIMPLE_OPERATION_COST)
Static inlining heuristic: Upper bound on callee size


V INLINE_MAX_INLINE_DEPTH int 5
Static inlining heuristic: Upper bound on depth of inlining


V INLINE_MAX_ALWAYS_INLINE_TARGET_SIZE int (2*org.jikesrvm.classloader.NormalMethod.CALL_COST-org.jikesrvm.classloader.NormalMethod.SIMPLE_OPERATION_COST)
Static inlining heuristic: Always inline callees of this size or smaller


V INLINE_MASSIVE_METHOD_SIZE int 2048
Static inlining heuristic: If root method is already this big, then only inline trivial methods


# bound credits at 40% off; we don't want to be too optimistic about code space reductions.
V INLINE_MAX_ARG_BONUS double 0.40
Maximum bonus for reducing the perceived size of a method during inlining.


# Reductions only come from optimization of dynamic type checks; all virtual methods on arrays are defined on Object.
V INLINE_PRECISE_REG_ARRAY_ARG_BONUS double 0.05
Bonus given to inlining methods that are passed a register of a known precise type.


V INLINE_DECLARED_AASTORED_ARRAY_ARG_BONUS double 0.02
Bonus given when there's potential to optimize checkstore portion of aastore bytecode on parameter


# Reductions come from optimization of dynamic type checks and improved inlining of virtual/interface calls
V INLINE_PRECISE_REG_CLASS_ARG_BONUS double 0.15
Bonus given to inlining methods that are passed a register of a known precise type.


V INLINE_EXTANT_REG_CLASS_ARG_BONUS double 0.05
Bonus given to inlining methods that are passed a register that's known not to be null.


# 5% credit for being an int constant; mainly in the hopes of control flow simplifications
V INLINE_INT_CONST_ARG_BONUS double 0.05
Bonus given to inlining methods that are passed an int constant argument


# 10% credit for being 'null' as this enables a number of simplifications
V INLINE_NULL_CONST_ARG_BONUS double 0.10
Bonus given to inlining methods that are passed a null constant argument


# 10% credit for being a string/class/object constant: inlining, constant folding, and Pure method opportunities
V INLINE_OBJECT_CONST_ARG_BONUS double 0.10
Bonus given to inlining methods that are passed an object constant argument


V INLINE_CALL_DEPTH_COST double 0.00
As we inline deeper nested methods what cost (or bonus) do we wish to give to deter (or encourage) nesting of deeper methods?


V INLINE_AI_MAX_TARGET_SIZE int (20*org.jikesrvm.classloader.NormalMethod.CALL_COST-org.jikesrvm.classloader.NormalMethod.SIMPLE_OPERATION_COST)
Adaptive inlining heuristic: Upper bound on callee size


V INLINE_AI_MIN_CALLSITE_FRACTION double 0.4
Adaptive inlining heuristc: Minimum fraction of callsite distribution for guarded inlining of a callee


E INLINE_GUARD_KIND byte INLINE_GUARD_CODE_PATCH
Selection of guard mechanism for inlined virtual calls that cannot be statically bound
"INLINE_GUARD_METHOD_TEST guardWithMethodTest inline_guard_method_test" \
"INLINE_GUARD_CLASS_TEST guardWithClassTest inline_guard_class_test" \
"INLINE_GUARD_CODE_PATCH guardWithCodePatch inline_guard_code_patch"
