/*
 * This file is part of Jikes RVM (http://jikesrvm.sourceforge.net).
 * The Jikes RVM project is distributed under the Common Public License (CPL).
 * A copy of the license is included in the distribution, and is also
 * available at http://www.opensource.org/licenses/cpl1.0.php
 *
 * (C) Copyright IBM Corp. 2001
 */
//$Id$
package com.ibm.JikesRVM;

import org.vmmagic.unboxed.Offset;

/**
 * @author Julian Dolby
 */
class VM_Lister {

  VM_Lister (VM_Assembler asm) {

  }
  
  final void lockPrefix() {

  }

  final void OP (int i, String op) {

  }
  
  final void I (int i, String op, int n) {

  }
    
  final void R (int i, String op, byte R0) {

  }
 
  final void RD (int i, String op, byte R0, Offset d) {

  }
  
  final void RI (int i, String op, byte R0, int n) {

  }
 
  final void RDI (int i, String op, byte R0, Offset d, int n) {

  }

  final void RNI (int i, String op, byte R0, int n) {

  }

  final void RR (int i, String op, byte R0, byte R1) {

  }
  
  final void RDR (int i, String op, byte R0, Offset d, byte R1) {

  }
 
  final void RDRI (int i, String op, byte R0, Offset d, byte R1, int imm) {

  }
 
  final void RRD (int i, String op, byte R0, byte R1, Offset d) {

  }
 
  final void RNR (int i, String op, byte R0, byte R1) {

  }
 
  final void RN (int i, String op, byte R0) {

  }
 
  final void RRN (int i, String op, byte R0, byte R1) {

  }
 
  final void RA (int i, String op, Offset d) {

  }

  final void RFD (int i, String op, byte X, short s, Offset d) {

  }

  final void RXD (int i, String op, byte R0, byte X, short s, Offset d) {

  }

  final void RXDI (int i, String op, byte R0, byte X, short s, Offset d, int n) {

  }

  final void RFDI (int i, String op, byte X, short s, Offset d, int n) {

  }

  final void RAI (int i, String op, Offset d, int n) {

  }

  final void RRR (int i, String op, byte R0, byte R1, byte R2) {

  }
  
  final void RNRI (int i, String op, byte R0, byte R1, int imm) {

  }
  
  final void RRI (int i, String op, byte R0, byte R1, int imm) {

  }
  
  final void RRXD (int i, String op, byte R0, byte R1, byte X, short s, Offset d) {

  }
  
  final void RRFD (int i, String op, byte R0, byte X, short s, Offset d) {

  }
  
  final void RRA (int i, String op, byte R0, Offset d) {

  }
  
  final void RXDR (int i, String op, byte R0, byte X, short s, Offset d, byte R1) {

  }

  final void RXDRI (int i, String op, byte R0, byte X, short s, Offset d, byte R1, int imm) {

  }

  final void RXDRR (int i, String op, byte R0, byte X, short s, Offset d, byte R1, byte R2) {

  }

  final void RFDR (int i, String op, byte X, short s, Offset d, byte R0) {

  }

  final void RFDRI (int i, String op, byte X, short s, Offset d, byte R0, int imm) {

  }

  final void RFDRR (int i, String op, byte X, short s, Offset d, byte R1, byte R2) {

  }

  final void RAR (int i, String op, Offset d, byte R0) {

  }

  final void RARI (int i, String op, Offset d, byte R0, int imm) {

  }

  final void RARR (int i, String op, Offset d, byte R1, byte R2) {

  }

  final void noteBytecode(int num, String str) {

  }

  final void comment(int num, String comment) {

  }

  final void comefrom(int num, int to) {

  }

  final static String hex (byte b) {
      return null;
  }
}
