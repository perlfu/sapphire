#
# (C) Copyright IBM Corp. 2001
#
#//OperatorList.dat
#//$Id$
#
SYMBOL
INSTRUCTION_FORMAT
TRAITS
IMPLDEFS
IMPLUSES

###################
# Operators only needed for BURS rules, not real instructions
###################
####################
INT_CONSTANT
Unassigned
none



####################
MINUS_ONE
Unassigned
none



####################
ZERO
Unassigned
none



####################
ONE
Unassigned
none



####################
LONG_CONSTANT
Unassigned
none



####################
REGISTER
Unassigned
none



####################
OTHER_OPERAND
Unassigned
none



####################
NULL
Unassigned
none



####################
BRANCH_TARGET
Unassigned
none



########################################
# We begin with 2/1-operand (accumulating) variants of the 3/2-operand 
# ALU operators
# These operators are shared by the IA32 and 390 backends.
########################################
# Add a (register/constant) integer operand to the register operand result
INT_ADD_ACC
BinaryAcc
none



# Add a (register/constant) long operand to the register operand result
LONG_ADD_ACC
BinaryAcc
none



# Subtract a (register/constant) int operand from the register operand result
INT_SUB_ACC
BinaryAcc
none



# Subtract a (register/constant) long operand from the register operand result
LONG_SUB_ACC
BinaryAcc
none



# Multiply the register operand result by a (register/constant) int operand
INT_MUL_ACC
BinaryAcc
none



# Multiply the register operand result by a (register/constant) long operand
LONG_MUL_ACC
BinaryAcc
none



# Negate the result register operand (an integer)
INT_NEG_ACC
UnaryAcc
none



# Negate the result register operand (a long)
LONG_NEG_ACC
UnaryAcc
none



# Shift logical left the (int) result register operand by the amount specified 
# by the (register/constant) int operand 
INT_SHL_ACC
BinaryAcc
none



# Shift logical left the (long) result register operand by the amount specified 
# by the (register/constant) int operand 
LONG_SHL_ACC
BinaryAcc
none



# Shift arithmetic right the (int) result register operand by the amount specified 
# by the (register/constant) int operand 
INT_SHR_ACC
BinaryAcc
none



# Shift arithmetic right the (long) result register operand by the amount specified 
# by the (register/constant) int operand 
LONG_SHR_ACC
BinaryAcc
none



# Shift logical right the (int) result register operand by the amount specified 
# by the (register/constant) int operand 
INT_USHR_ACC
BinaryAcc
none



# Shift logical right the (long) result register operand by the amount specified 
# by the (register/constant) int operand 
LONG_USHR_ACC
BinaryAcc
none



# Bitwise and a (register/constant) int operand into the register operand result
INT_AND_ACC
BinaryAcc
none



# Bitwise and a (register/constant) long operand into the register operand result
LONG_AND_ACC
BinaryAcc
none



# Bitwise or a (register/constant) int operand into the register operand result
INT_OR_ACC
BinaryAcc
none



# Bitwise or a (register/constant) long operand into the register operand result
LONG_OR_ACC
BinaryAcc
none



# Bitwise xor a (register/constant) int operand into the register operand result
INT_XOR_ACC
BinaryAcc
none



# Bitwise complement the (int) register operand result
INT_NOT_ACC
UnaryAcc
none



# Bitwise complement the (long) register operand result
LONG_NOT_ACC
UnaryAcc
none



# Bitwise xor a (register/constant) long operand into the a register operand result
LONG_XOR_ACC
BinaryAcc
none



# Boolean complement the (int) register operand result
BOOLEAN_NOT_ACC
UnaryAcc
none



########################################
# Next comes the machine specific HIR/LIR instructions.
########################################
# LIR version of TABLESWITCH (partially expanded into explicit pre-sequence)
LOWTABLESWITCH
LowTableSwitch
branch



# Acquire the JTOC from the processor object.  Make unary operator to simplify CSE.
GET_JTOC
Unary
none



# Set the floating-point control word to round-towards-zero
ROUND_TO_ZERO
Empty
none



####################
# A call whose target is in a class that implements 
# the VM_SaveVolatile interface.  Therefore, this
# call will not kill volatile registers 
# (the callee will save/restore them).	
# Used for expansion of yield points and resolve.
# TODO: consider NOT marking this as a PEI, since it better not throw one?
CALL_SAVE_VOLATILE
MIR_Call
call | immedPEI
callDefs
callUses

########################################
# Finally, all of the MIR operators
########################################
####################
MIR_START
Unassigned
none



########################################
# A special marker that signifies the position of ESP in a prologue.
########################################
MIR_ESP_PROLOGUE
MIR_Empty
none



########################################
# IA32 specific pseudo-ops (expanded just before final assembly)
########################################
####################
# Clear the floating point stack
####################
IA32_FCLEAR
MIR_UnaryNoRes
none



####################
# A special FMOV instruction which ends the live range of the RHS.
####################
IA32_FMOV_ENDING_LIVE_RANGE
MIR_Move
move



####################
IA32_FMOV
MIR_Move
move



####################
IA32_TRAPIF
MIR_TrapIf
immedPEI
AF_CF_OF_PF_SF_ZF


####################
IA32_OFFSET
MIR_CaseLabel
none



####################
IA32_LOCK_CMPXCHG
MIR_CompareExchange
compare
AF_CF_OF_PF_SF_ZF


# ##############################################
# Load a spilled GPR parameter into a register.
# ###########################################
LOAD_SPILLED_GPR_PARAM
MIR_Unary
none



# Load a spilled FPR parameter into a register.
LOAD_SPILLED_FLOAT_PARAM
MIR_Unary
none



# Load a spilled FPR parameter into a register.
LOAD_SPILLED_DOUBLE_PARAM
MIR_Unary
none



########################################
# "Real" IA32 operators (no need to expand further)
########################################
####################
IA32_ADC
MIR_BinaryAcc
none
AF_CF_OF_PF_SF_ZF
CF

####################
IA32_ADD
MIR_BinaryAcc
none
AF_CF_OF_PF_SF_ZF


####################
IA32_AND
MIR_BinaryAcc
none
AF_CF_OF_PF_SF_ZF


#########################################################
# Used for special system calls.
# NOTE: May indirectly be a PEI (due to callee), but the actual call itself
# is not an immediate PEI and thus is _not_ marked as one. 
#################################################################
IA32_SYSCALL
MIR_Call
call
callDefs
callUses

####################
IA32_CALL
MIR_Call
call | immedPEI
callDefs
callUses

####################
IA32_CDQ
MIR_ConvertDW2QW
none



####################
IA32_CMOV
MIR_CondMove
none

CF_OF_PF_SF_ZF

####################
IA32_CMP
MIR_Compare
compare
AF_CF_OF_PF_SF_ZF


####################
IA32_CMPXCHG
MIR_CompareExchange
compare
AF_CF_OF_PF_SF_ZF


####################
IA32_DEC
MIR_UnaryAcc
none
AF_OF_PF_SF_ZF


####################
IA32_DIV
MIR_Divide
none
AF_CF_OF_PF_SF_ZF


####################
IA32_FADD
MIR_BinaryAcc
none
C0_C1_C2_C3


####################
IA32_FCHS
MIR_UnaryAcc
none
C0_C1_C2_C3


####################
IA32_FCMOV
MIR_CondMove
none
C0_C1_C2_C3
CF_PF_ZF

####################
IA32_FCOMI
MIR_Compare
compare
CF_PF_ZF


####################
IA32_FCOMIP
MIR_Compare
compare | fpPop
CF_PF_ZF


####################
IA32_FDIV
MIR_BinaryAcc
none
C0_C1_C2_C3


####################
IA32_FDIVR
MIR_BinaryAcc
none
C0_C1_C2_C3


####################
IA32_FEXAM
MIR_UnaryNoRes
none
C0_C1_C2_C3


####################
IA32_FXCH
MIR_XChng
none
C0_C1_C2_C3


####################
IA32_FFREE
MIR_UnaryAcc
none
C0_C1_C2_C3


####################
IA32_FIADD
MIR_BinaryAcc
none
C0_C1_C2_C3


####################
IA32_FIDIV
MIR_BinaryAcc
none
C0_C1_C2_C3


####################
IA32_FIDIVR
MIR_BinaryAcc
none
C0_C1_C2_C3


####################
IA32_FILD
MIR_Move
none
C0_C1_C2_C3


####################
IA32_FIMUL
MIR_BinaryAcc
none
C0_C1_C2_C3


####################
IA32_FINIT
MIR_Empty
none
C0_C1_C2_C3


####################
IA32_FIST
MIR_Move
none
C0_C1_C2_C3


####################
IA32_FISTP
MIR_Move
fpPop
C0_C1_C2_C3


####################
IA32_FISUB
MIR_BinaryAcc
none
C0_C1_C2_C3


####################
IA32_FISUBR
MIR_BinaryAcc
none
C0_C1_C2_C3


####################
IA32_FLD
MIR_Move
none
C0_C1_C2_C3


####################
IA32_FLDCW
MIR_Nullary
none
C0_C1_C2_C3


####################
IA32_FLD1
MIR_Nullary
none
C0_C1_C2_C3


####################
IA32_FLDL2T
MIR_Nullary
none
C0_C1_C2_C3


####################
IA32_FLDL2E
MIR_Nullary
none
C0_C1_C2_C3


####################
IA32_FLDPI
MIR_Nullary
none
C0_C1_C2_C3


####################
IA32_FLDLG2
MIR_Nullary
none
C0_C1_C2_C3


####################
IA32_FLDLN2
MIR_Nullary
none
C0_C1_C2_C3


####################
IA32_FLDZ
MIR_Nullary
none
C0_C1_C2_C3


####################
IA32_FMUL
MIR_BinaryAcc
none
C0_C1_C2_C3


####################
IA32_FNSTCW
MIR_UnaryNoRes
none
C0_C1_C2_C3


####################
IA32_FNINIT
MIR_Empty
none
C0_C1_C2_C3


####################
IA32_FNSAVE
MIR_FSave
none
C0_C1_C2_C3


####################
IA32_FPREM
MIR_BinaryAcc
none
C0_C1_C2_C3


####################
IA32_FRSTOR
MIR_FSave
none
C0_C1_C2_C3


####################
IA32_FST
MIR_Move
none
C0_C1_C2_C3


####################
IA32_FSTCW
MIR_UnaryNoRes
none
C0_C1_C2_C3


####################
IA32_FSTP
MIR_Move
fpPop
C0_C1_C2_C3


####################
IA32_FSUB
MIR_BinaryAcc
none
C0_C1_C2_C3


####################
IA32_FSUBR
MIR_BinaryAcc
none
C0_C1_C2_C3


####################
IA32_FUCOMI
MIR_Compare
compare
CF_PF_ZF


####################
IA32_FUCOMIP
MIR_Compare
compare
CF_PF_ZF


####################
IA32_IDIV
MIR_Divide
none
AF_CF_OF_PF_SF_ZF


####################
# The forms of IMUL that are like MUL
IA32_IMUL1
MIR_Multiply
none
AF_CF_OF_PF_SF_ZF


####################
# The other (non-MUL) forms of IMUL
IA32_IMUL2
MIR_BinaryAcc
none
AF_CF_OF_PF_SF_ZF


####################
IA32_INC
MIR_UnaryAcc
none
AF_OF_PF_SF_ZF


####################
IA32_INT
MIR_Trap
immedPEI



####################
IA32_JCC
MIR_CondBranch
branch | conditional

AF_CF_OF_PF_SF_ZF

####################
IA32_JCC2
MIR_CondBranch2
branch | conditional

AF_CF_OF_PF_SF_ZF

####################
IA32_JMP
MIR_Branch
branch



####################
IA32_LEA
MIR_Lea
none



####################
IA32_LOCK
MIR_Empty
none



####################
IA32_MOV
MIR_Move
move



####################
IA32_MOVZX$B
MIR_Unary
move



####################
IA32_MOVSX$B
MIR_Unary
move



####################
IA32_MOVZX$W
MIR_Unary
move



####################
IA32_MOVSX$W
MIR_Unary
move



####################
IA32_MUL
MIR_Multiply
none
AF_CF_OF_PF_SF_ZF


####################
IA32_NEG
MIR_UnaryAcc
none
AF_CF_OF_PF_SF_ZF


####################
IA32_NOT
MIR_UnaryAcc
none



####################
IA32_OR
MIR_BinaryAcc
none
AF_CF_OF_PF_SF_ZF


####################
IA32_POP
MIR_Nullary
none



####################
IA32_PUSH
MIR_UnaryNoRes
none



####################
IA32_RCL
MIR_BinaryAcc
none
CF_OF
CF

####################
IA32_RCR
MIR_BinaryAcc
none
CF_OF
CF

####################
IA32_ROL
MIR_BinaryAcc
none
CF_OF


####################
IA32_ROR
MIR_BinaryAcc
none
CF_OF


####################
IA32_RET
MIR_Return
ret



####################
IA32_SAL
MIR_BinaryAcc
none
AF_CF_OF_PF_SF_ZF


####################
IA32_SAR
MIR_BinaryAcc
none
AF_CF_OF_PF_SF_ZF


####################
IA32_SHL
MIR_BinaryAcc
none
AF_CF_OF_PF_SF_ZF


####################
IA32_SHR
MIR_BinaryAcc
none
AF_CF_OF_PF_SF_ZF


####################
IA32_SBB
MIR_BinaryAcc
none
AF_CF_OF_PF_SF_ZF
CF

####################
IA32_SET$B
MIR_Set
none

AF_CF_OF_PF_SF_ZF

####################
IA32_SHLD
MIR_DoubleShift
none
AF_CF_OF_PF_SF_ZF


####################
IA32_SHRD
MIR_DoubleShift
none
AF_CF_OF_PF_SF_ZF


####################
IA32_SUB
MIR_BinaryAcc
none
AF_CF_OF_PF_SF_ZF


####################
IA32_TEST
MIR_Test
none
AF_CF_OF_PF_SF_ZF


####################
IA32_XOR
MIR_BinaryAcc
none
AF_CF_OF_PF_SF_ZF


####################
MIR_END
Unassigned
none



