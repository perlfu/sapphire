#
# (C) Copyright IBM Corp. 2004
#
#//$Id$
#
# @author Darko Stefanovic
# @author Sergiy Kyrylkov
#
# BURS rules for memory access (load/stores)
# that are specific to a 64-bit platform.
#
# See PPC_Common.rules for the format of this file
#
#####
# LONG_LOAD
#####
r:	LONG_LOAD(r,INT_CONSTANT)
11
EMIT_INSTRUCTION
EMIT(MIR_Load.mutate(P(p), PPC_LAddr, Load.getResult(P(p)),            \
                     R(Load.getAddress(P(p))), Load.getOffset(P(p)), \
	             Load.getLocation(P(p)), Load.getGuard(P(p))));

r:	LONG_LOAD(r,REF_MOVE(ADDRESS_CONSTANT))
FITS(Move.getVal(PR(p)),32,22)
EMIT_INSTRUCTION
{                                                                             \
   Address val = AV(Move.getVal(PR(p)));                                      \
   EMIT(MIR_Binary.create(PPC_ADDIS, Move.getResult(PR(p)),                   \
                          R(Load.getAddress(P(p))), CAU16(val)));             \
   EMIT(MIR_Load.mutate(P(p), PPC_LAddr, Load.getResult(P(p)),         \
                                 Move.getResult(PR(p)).copyRO(), CAL16(val),  \
				 Load.getLocation(P(p)),                      \
                                 Load.getGuard(P(p))));                      \
}

r:	LONG_LOAD(r,r)
11
EMIT_INSTRUCTION
EMIT(MIR_Load.mutate(P(p), PPC_LAddrX, Load.getResult(P(p)),           \
                     R(Load.getAddress(P(p))), Load.getOffset(P(p)), \
	             Load.getLocation(P(p)), Load.getGuard(P(p))));

r:	LONG_LOAD(REF_ADD(r,r),INT_CONSTANT)
isZERO(VR(p), 11)
EMIT_INSTRUCTION
EMIT(MIR_Load.mutate(P(p), PPC_LAddrX, Load.getResult(P(p)),           \
                              R(Binary.getVal1(PL(p))), Binary.getVal2(PL(p)), \
			      Load.getLocation(P(p)), Load.getGuard(P(p))));

r:	LONG_LOAD(REF_ADD(r,INT_CONSTANT),INT_CONSTANT)
SI16(VR(p)+VLR(p)) ? 14 : INFINITE
EMIT_INSTRUCTION
EMIT(MIR_Load.mutate(P(p), PPC_LAddr, Load.getResult(P(p)),            \
                              R(Binary.getVal1(PL(p))), IC(VR(p)+VLR(p)), \
			      Load.getLocation(P(p)), Load.getGuard(P(p))));

#####
# LONG_STORE
# A few more cases than for other store operators to handle pointer arithmetic introduced by use of magic
#####
stm:	LONG_STORE(r,OTHER_OPERAND(r,INT_CONSTANT))
11
EMIT_INSTRUCTION
EMIT(MIR_Store.mutate(P(p), PPC_STAddr, R(Store.getValue(P(p))),        \
                               R(Store.getAddress(P(p))),                     \
                               Store.getOffset(P(p)),                         \
			       Store.getLocation(P(p)),                       \
                               Store.getGuard(P(p))));

stm:	LONG_STORE(r,OTHER_OPERAND(r,REF_MOVE(ADDRESS_CONSTANT)))
FITS(Move.getVal(PRR(p)),32,22)
EMIT_INSTRUCTION
{                                                                             \
   Address val = AV(Move.getVal(PRR(p)));                                     \
   EMIT(MIR_Binary.create(PPC_ADDIS, Move.getResult(PRR(p)),                  \
                          R(Store.getAddress(P(p))), CAU16(val)));            \
   EMIT(MIR_Store.mutate(P(p), PPC_STAddr, R(Store.getValue(P(p))),     \
                                  Move.getResult(PRR(p)).copyRO(), CAL16(val),\
				  Store.getLocation(P(p)),                    \
                                  Store.getGuard(P(p))));                    \
}

stm:	LONG_STORE(r,OTHER_OPERAND(r,r))
11
EMIT_INSTRUCTION
EMIT(MIR_Store.mutate(P(p), PPC_STAddrX, R(Store.getValue(P(p))),       \
                               R(Store.getAddress(P(p))),                     \
                               Store.getOffset(P(p)),                         \
			       Store.getLocation(P(p)),                       \
                               Store.getGuard(P(p))));

stm:	LONG_STORE(r,OTHER_OPERAND(REF_ADD(r,INT_CONSTANT),INT_CONSTANT))
SI16(VRR(p)+VRLR(p))?14:INFINITE
EMIT_INSTRUCTION
EMIT(MIR_Store.mutate(P(p), PPC_STAddr, R(Store.getValue(P(p))),        \
                               R(Binary.getVal1(PRL(p))),                     \
                               IC(VRR(p) + VRLR(p)), \
			       Store.getLocation(P(p)),                       \
                               Store.getGuard(P(p))));

#####
# PREPARE
#####
r:      PREPARE_ADDR(r, r)
11
EMIT_INSTRUCTION
EMIT(MIR_Load.mutate(P(p), PPC_LAddrARX, Prepare.getResult(P(p)),   \
                              R(Prepare.getAddress(P(p))), Prepare.getOffset(P(p)),           \
                              Prepare.getLocation(P(p)),                  \
                              Prepare.getGuard(P(p))));

##################################
# Stores (register to memory moves)
##################################
#####
# ATTEMPT (atomic compare-exchange)
#####
r:      ATTEMPT_ADDR(r, r)
11
EMIT_INSTRUCTION
EMIT(P(p));  // Leave for OPT_ComplexLIR2MIRExpansion

