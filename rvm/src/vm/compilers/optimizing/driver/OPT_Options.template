/*
 * (C) Copyright IBM Corp. 2001
 */

package com.ibm.JikesRVM.opt;
import com.ibm.JikesRVM.*;

/**
 * Class to handle command-line arguments and options for the 
 * optimizng compiler.
 * <p>
 * Note: This file is mechanically generated from OPT_Options.template
 *       and MasterOptions.template
 * <p>
 * Note: Boolean options are defined in BOOLEAN_DAT_FILES
 *       All other options are defined in VALUE_DAT_FILES
 *       (value, enumeration, bitmask)
 *
 * @author Dave Grove
 **/
public class OPT_Options implements Cloneable {

  // Non-template instance fields that we don't want
  //  available on the command-line)
  private int OPTIMIZATION_LEVEL = 1;    // The OPT level

  private void printOptionsHeader() {
    VM.sysWrite("Current value of options at optimization level ",OPTIMIZATION_LEVEL, ":\n");
  }

$$$$ LET USE_OPT_LEVELS "YES"
// BEGIN CODE GENERATED FROM MasterOptions.template
    $$$$ INCLUDE ../../utility/MasterOptions.template
// END CODE GENERATED FROM MasterOptions.template
$$$$ END LET USE_OPT_LEVELS

  private boolean instanceProcessAsOption(String arg) {
    if (arg.startsWith("O")) {
      try {
	setOptLevel(Integer.parseInt(arg.substring(1)));
      } catch (NumberFormatException e) {
	return false;
      }
      return true;
    }
    return false;
  }    


  private static void instancePrintHelpHeader(String prefix) {
    VM.sysWrite("Commands\n");
    VM.sysWrite(prefix+"[:help]\t\t\tPrint brief description of opt compiler's command-line arguments\n");
    VM.sysWrite(prefix+":printOptions\t\tPrint the current values of opt compiler options\n");
    VM.sysWrite(prefix+":O0\t\t\tSelect optimization level 0, minimal optimizations\n");
    VM.sysWrite(prefix+":O1\t\t\tSelect optimization level 1, modest optimizations\n");
    VM.sysWrite(prefix+":O2\t\t\tSelect optimization level 2\n");
    VM.sysWrite("\n");
  }


  private static void instancePrintHelpFooter(String prefix) {
    //-#if RVM_WITH_OPT_INSTRUMENTATION
    VM_OptInstrumentor.printHelp();
    //-#endif
  }	


  // accessor to get OPT level
  public int getOptLevel() {
    return OPTIMIZATION_LEVEL;
  }

  // Set the options to encode the optimizations enabled at the given opt label
  // and disabled all optimizations that are not enabled at the given opt label
  public void setOptLevel(int level) {
     OPTIMIZATION_LEVEL = level;	
     // Begin generated opt-level logic       
$$$$ LOOP BDATFILE BOOLEAN_DAT_FILES
$$$$ FOREACH OPTION BDATFILE
     $$$$ SPLIT "OPTION.DECL" " " FULL_NAME OPT_LEVEL DEFAULT_VALUE SHORT_NAME
     $$$$ IF OPT_LEVEL != -1
     if (level >= OPT_LEVEL) 
        FULL_NAME = true;
     else 
        FULL_NAME = false;
     $$$$ END IF OPT_LEVEL
     $$$$ END SPLIT
$$$$ END FOREACH
$$$$ END LOOP
     // End generated opt-level logic
  }
}
