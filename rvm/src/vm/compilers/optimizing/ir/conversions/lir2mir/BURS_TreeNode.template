/*
 * (C) Copyright IBM Corp. 2001
 */
//$Id$

/**
 * A BURS_TreeNode is a node in a binary tree that is fed as input to BURS.
 * Machine-generated, do not edit.
 * 
 * @see OPT_BURS
 * @see OPT_BURS_STATE
 *
 * @author Vivek Sarkar
 */
final class OPT_BURS_TreeNode implements OPT_BURS_Definitions {

  OPT_BURS_TreeNode child1;
  OPT_BURS_TreeNode child2;

  OPT_DepGraphNode dg_node;    // Dependence graph node corresponding to 
                               // interior node in BURS tree (set to null for
                               //   leaf node or for OTHER_OPERAND node).

  // oooo oooo oooo oooo nnnn nnnn trrr rrrr
  // o == opcode
  // n = non terminal
  // t = tree root
  // r = num of registers used
  private int word; 

  final char getOpcode() {
      return (char)((word & 0xffff0000) >>> 16);
  }

  final void setOpcode(char opcode) {
      word = (word & 0x0000ffff) | (opcode << 16);
  }

  // OUTPUT FIELDS FOR BURS:
  // nonterminal > 0 ==> this tree node is the
  // root of a "supernode"; the value of nonterminal
  // identifies the matching non-terminal
  // nonterminal = 0 ==> this tree node is NOT the
  // root of a "supernode".

  final int getNonTerminal() {
     return ((word & 0xff00) >> 8);
  }

  final void setNonTerminal(int nonterminal) {
     if (VM.VerifyAssertions) VM.assert(nonterminal <= 0xff);
     word = (word & 0xffff00ff) | (nonterminal << 8);
  }

  final boolean isTreeRoot() { return (word & 0x80 ) != 0; }
  final void setTreeRoot() { word |= 0x80; }

  final void setNumRegisters(int r) {
    word = (word & 0xffffff80) | (r & 0x7f);
  }
  final int numRegisters() {
    return word & 0x7f;
  }

  final OPT_Instruction getInstruction() {
     return dg_node._instr;
  }

  /**
   * Constructor for interior node.
   */
  OPT_BURS_TreeNode(OPT_DepGraphNode n) {
    OPT_Instruction instr = n._instr;
    dg_node = n;
    setOpcode(instr.getOpcode());
  }
 
  /**
   * Constructor for leaf/auxiliary node.
   */
  OPT_BURS_TreeNode(char Opcode) {
    setOpcode(Opcode);
  }

  public String toString() {
    String node;
    node = OPT_OperatorNames.operatorName[getOpcode()];
    return node;
  }

  public boolean isSuperNodeRoot() {
    return (getNonTerminal() > 0 );
  }

  public boolean isREGISTERNode() {
    return getOpcode() == OPT_Operators.REGISTER_opcode;
  }

/**** remainder will be inserted by the BURS generator *********/

