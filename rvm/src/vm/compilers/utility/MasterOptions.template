/* -*-java-*-
 *
 * This file is part of Jikes RVM (http://jikesrvm.sourceforge.net).
 * The Jikes RVM project is distributed under the Common Public License (CPL).
 * A copy of the license is included in the distribution, and is also
 * available at http://www.opensource.org/licenses/cpl1.0.php
 *
 * (C) Copyright IBM Corp. 2001
 *
 * $Id$
 */
   // Begin template-specified options
$$$$ LOOP BDATFILE BOOLEAN_DAT_FILES
$$$$ FOREACH OPTION BDATFILE
     $$$$ SPLIT "OPTION.DECL" " " FULL_NAME OPT_LEVEL DEFAULT_VALUE SHORT_NAME
     $$$$ LET PRETTY_NAME @PAD(FULL_NAME,30," ")
   public boolean PRETTY_NAME= DEFAULT_VALUE; // OPTION.DESCRIP
     $$$$ END LET PRETTY_NAME
     $$$$ END SPLIT
$$$$ END FOREACH
$$$$ END LOOP
$$$$ LOOP VDATFILE VALUE_DAT_FILES
$$$$ FOREACH OPTION VDATFILE
     $$$$ SPLIT "OPTION.DECL" " " TAG FULL_NAME TYPE DEFAULT_VALUE SHORT_NAME
       $$$$ IF TAG == S
       $$$$ LET PRETTY_NAME @PAD(FULL_NAME,23-@LENGTH("TYPE")," ")
   private java.util.HashSet PRETTY_NAME= null; // OPTION.DESCRIP
       $$$$ END LET PRETTY_NAME
       $$$$ ELSE
     $$$$ LET PRETTY_NAME @PAD(FULL_NAME,37-@LENGTH("TYPE")," ")
   public TYPE PRETTY_NAME= DEFAULT_VALUE; // OPTION.DESCRIP
     $$$$ END LET PRETTY_NAME
       $$$$ END IF 
     $$$$ END SPLIT  
$$$$ END FOREACH
$$$$ END LOOP
   // End template-specified options

   // Begin generated support for "Enumeration" options
$$$$ LOOP VDATFILE VALUE_DAT_FILES
$$$$ FOREACH OPTION VDATFILE
     $$$$ SPLIT "OPTION.DECL" " " TAG FULL_NAME TYPE DEFAULT_VALUE SHORT_NAME
     $$$$ IF TAG == E
   // FULL_NAME
          $$$$ LOOP CONSTNAME OPTION.ENUMS
               $$$$ SPLIT "CONSTNAME" " " ITEM_NAME QUERRY_NAME CMD_NAME
   public static final TYPE ITEM_NAME = CONSTNAME.INDEX; 
   public final boolean QUERRY_NAME() { return FULL_NAME == ITEM_NAME; }
               $$$$ END SPLIT CONSTNAME
          $$$$ END LOOP

      $$$$ END IF TAG == E
      $$$$ END SPLIT
$$$$ END FOREACH
$$$$ END LOOP
   // End generated support for "Enumeration" options

   // Begin generated support for "Set" options
$$$$ LOOP VDATFILE VALUE_DAT_FILES
$$$$ FOREACH OPTION VDATFILE
     $$$$ SPLIT "OPTION.DECL" " " TAG FULL_NAME TYPE DEFAULT_VALUE SHORT_NAME
     $$$$ IF TAG == S
   // FULL_NAME
   public final boolean isFULL_NAME(TYPE q) { return FULL_NAME != null && FULL_NAME.contains(q); }
   public final boolean fuzzyMatchFULL_NAME(TYPE q) { 
     if (FULL_NAME == null) return false;
     java.util.Iterator i = FULL_NAME.iterator();
     while (i.hasNext()) {
       String s = (String)i.next();
       if (q.indexOf(s) > -1) return true;
     }
     return false;
   }	
   public final boolean hasFULL_NAME() { return !(FULL_NAME == null || FULL_NAME.isEmpty()); }
   public final java.util.Iterator getFULL_NAMEs() { 
     if (FULL_NAME == null) {
       return new java.util.Iterator() {
         public boolean hasNext() { return false; }
         public Object next() { return null; }
 	 public void remove() {}
       };
     } else {
       return FULL_NAME.iterator(); 
     }
   }
      $$$$ END IF TAG == S
      $$$$ END SPLIT
$$$$ END FOREACH
$$$$ END LOOP
   // End generated support for "Set" options


   public final  Object clone() {
     try { 
	MYTYPE clone = (MYTYPE)super.clone();
$$$$ LOOP VDATFILE VALUE_DAT_FILES
$$$$ FOREACH OPTION VDATFILE
     $$$$ SPLIT "OPTION.DECL" " " TAG FULL_NAME TYPE DEFAULT_VALUE SHORT_NAME
     $$$$ IF TAG == S
        if (FULL_NAME != null) {
          clone.FULL_NAME = (java.util.HashSet)this.FULL_NAME.clone();
        }
     $$$$ END IF 
     $$$$ END SPLIT  
$$$$ END FOREACH
$$$$ END LOOP
        return clone;
     }
     catch (CloneNotSupportedException e) {
       // cannot happen ... cloning supported
       throw new InternalError("Cannot happen! Cloning supported");
     }
   }


  /**
   * Take a string (most likely a command-line argument) and try to proccess it
   * as an option command.  Return true if the string was understood, false 
   * otherwise.
   *
   * @param prefix a Sring to use as a command prefix when printing help.
   * @param arg a String to try to process as an option command
   * @return true if successful, false otherwise
   */
  public boolean processAsOption(String prefix, String arg)  throws org.vmmagic.pragma.NoOptCompilePragma {

    // First handle the "option commands"
    if (arg.equals("help")) {
       printHelp(prefix);
       return true;
    }
    if (arg.equals("printOptions")) {
       printOptions();
       return true;
    }
    if (arg.equals("")) {
      printHelp(prefix);
      return true;
    }
    // Make sure only process O? option if initial runtime compiler!
    if ((prefix.indexOf("irc")!=-1 || 
	 prefix.indexOf("bc")!=-1 ||
         prefix.indexOf("eoc")!=-1) && 
	instanceProcessAsOption(arg)) {
      return true;
    }

    // Required format of arg is 'name=value'
    // Split into 'name' and 'value' strings
    int split = arg.indexOf('=');
    if (split == -1) {
      if (!(arg.equals("O0") || arg.equals("O1") || arg.equals("O2") || arg.equals("O3"))) {
        VM.sysWrite("  Illegal option specification!\n  \""+arg+
	  	    "\" must be specified as a name-value pair in the form of option=value\n");
      }
      return false;
    }
    String name = arg.substring(0,split);
    String value = arg.substring(split+1);

    //Begin generated command-line processing
$$$$ LOOP BDATFILE BOOLEAN_DAT_FILES
$$$$ FOREACH OPTION BDATFILE
     $$$$ SPLIT "OPTION.DECL" " " FULL_NAME OPT_LEVEL DEFAULT_VALUE SHORT_NAME
     $$$$ LET CMD_NAME @IF(@LENGTH("SHORT_NAME") == 0, @LOWER("FULL_NAME"), "SHORT_NAME")
    if (name.equals("CMD_NAME")) {
      if (value.equals("true")) {
        FULL_NAME = true;
	return true;
      } else if (value.equals("false")) {
  	FULL_NAME = false;
        return true;
      } else 
        return false;
    }
     $$$$ END LET
     $$$$ END SPLIT
$$$$ END FOREACH
$$$$ END LOOP
$$$$ LOOP VDATFILE VALUE_DAT_FILES
$$$$ FOREACH OPTION VDATFILE
     $$$$ SPLIT "OPTION.DECL" " " TAG FULL_NAME TYPE DEFAULT_VALUE SHORT_NAME
     $$$$ LET CMD_NAME @IF(@LENGTH("SHORT_NAME") == 0, @LOWER("FULL_NAME"), "SHORT_NAME")
    if (name.equals("CMD_NAME")) {
     $$$$ IF TAG == V
          $$$$ IF TYPE == String
       FULL_NAME = value;
          $$$$ ELSE
            $$$$ IF TYPE == int
       FULL_NAME = VM_CommandLineArgs.primitiveParseInt(value);
            $$$$ ELSE
              $$$$ IF TYPE == byte
       FULL_NAME = (byte)VM_CommandLineArgs.primitiveParseInt(value);
              $$$$ ELSE
                $$$$ IF TYPE == double
          FULL_NAME = VM_CommandLineArgs.primitiveParseFloat(value);
                $$$$ ELSE
                  $$$$ IF TYPE == float
            FULL_NAME = VM_CommandLineArgs.primitiveParseFloat(value);
                  $$$$ ELSE
       Hey! You tried to declare a value option of unrecoginized type...fix it!
                  $$$$ END IF
                $$$$ END IF
              $$$$ END IF
            $$$$ END IF
          $$$$ END IF
       return true;
     }
     $$$$ ELSE 
       $$$$ IF TAG == E
            $$$$ LOOP CONSTNAME OPTION.ENUMS
                 $$$$ SPLIT "CONSTNAME" " " ITEM_NAME QUERRY_NAME CMD_NAME
       if (value.equals("CMD_NAME")) {
         FULL_NAME = ITEM_NAME;
         return true;
       }         
                 $$$$ END SPLIT CONSTNAME
            $$$$ END LOOP
       return false;
     }
       $$$$ ELSE
         $$$$ IF TAG == S
           $$$$ IF TYPE == String
       if (FULL_NAME == null) {
         FULL_NAME = new java.util.HashSet();
       }
       FULL_NAME.add(value);
       return true;
     }
           $$$$ ELSE
       Hey! You tried to declare a Set option of unsupported type...fix it!
           $$$$ END IF TYPE == String
         $$$$ ELSE
         Whoops! Unimplemented tag: TAG...go nag Dave and he'll finish it.
         $$$$ END IF TAG == S
       $$$$ END IF TAG == E
     $$$$ END IF TAG == V
     $$$$ END LET CMD_NAME
     $$$$ END SPLIT
$$$$ END FOREACH
$$$$ END LOOP
       //End generated command-line processing

    // None of the above tests matched, so this wasn't an option
    return false;
  }

  // Print a short description of every option
  public static void printHelp(String prefix) {

    instancePrintHelpHeader(prefix);

    //Begin generated help messages
    VM.sysWrite("Boolean Options ("+prefix+"<option>=true or "+prefix+":<option>=false)\n");
$$$$ IF USE_OPT_LEVELS == "YES"
    VM.sysWrite("Option                        OptLevel Description\n");
$$$$ ELSE
    VM.sysWrite("Option                                 Description\n");
$$$$ END IF
$$$$ LOOP BDATFILE BOOLEAN_DAT_FILES
$$$$ FOREACH OPTION BDATFILE
     $$$$ SPLIT "OPTION.DECL" " " FULL_NAME OPT_LEVEL DEFAULT_VALUE SHORT_NAME
     $$$$ LET PRETTY_LEVEL @IF(OPT_LEVEL == -1, "       ", @PAD(OPT_LEVEL,7," "))
     $$$$ LET CMD_NAME @PAD(@IF(@LENGTH("SHORT_NAME") == 0, @LOWER("FULL_NAME"), "SHORT_NAME"), 30, " ")
    VM.sysWrite("CMD_NAME PRETTY_LEVEL OPTION.DESCRIP\n");
     $$$$ END LET CMD_NAME
     $$$$ END LET PRETTY_LEVEL
     $$$$ END SPLIT
$$$$ END FOREACH
$$$$ END LOOP
    VM.sysWrite("\nValue Options ("+prefix+"<option>=<value>)\n");
    VM.sysWrite("Option                         Type    Description\n");
$$$$ LOOP VDATFILE VALUE_DAT_FILES
$$$$ FOREACH OPTION VDATFILE
     $$$$ SPLIT "OPTION.DECL" " " TAG FULL_NAME TYPE DEFAULT_VALUE SHORT_NAME
     $$$$ IF TAG == V
          $$$$ LET CMD_NAME @PAD(@IF(@LENGTH("SHORT_NAME") == 0, @LOWER("FULL_NAME"), "SHORT_NAME"), 30, " ")
          $$$$ LET TNAME @PAD("TYPE", 7, " ")
    VM.sysWrite("CMD_NAME TNAME OPTION.DESCRIP\n");
          $$$$ END LET TYPE_NAME
          $$$$ END LET CMD_NAME
     $$$$ END IF TAG == V
     $$$$ END SPLIT OPTION.DECL
$$$$ END FOREACH
$$$$ END LOOP
    VM.sysWrite("\nSelection Options (set option to one of an enumeration of possible values)\n");
$$$$ LOOP VDATFILE VALUE_DAT_FILES
$$$$ FOREACH OPTION VDATFILE
     $$$$ SPLIT "OPTION.DECL" " " TAG FULL_NAME TYPE DEFAULT_VALUE SHORT_NAME
     $$$$ IF TAG == E
    VM.sysWrite("\t\tOPTION.DESCRIP\n");
	  $$$$ LET MAIN_CMD_NAME @PAD(@IF(@LENGTH("SHORT_NAME") == 0, @LOWER("FULL_NAME"), "SHORT_NAME"), 30, " ")
    VM.sysWrite("MAIN_CMD_NAME");
            $$$$ LOOP CONSTNAME OPTION.ENUMS
                 $$$$ SPLIT "CONSTNAME" " " ITEM_NAME QUERRY_NAME CMD_NAME
    VM.sysWrite("CMD_NAME ");
                 $$$$ END SPLIT CONSTNAME
            $$$$ END LOOP CONSTNAME
          $$$$ END LET MAIN_CMD_NAME
    VM.sysWrite("\n");
     $$$$ END IF TAG == E
     $$$$ END SPLIT
$$$$ END FOREACH
$$$$ END LOOP
    VM.sysWrite("\nSet Options (option is a set of values)\n");
$$$$ LOOP VDATFILE VALUE_DAT_FILES
$$$$ FOREACH OPTION VDATFILE
     $$$$ SPLIT "OPTION.DECL" " " TAG FULL_NAME TYPE DEFAULT_VALUE SHORT_NAME
     $$$$ IF TAG == S
          $$$$ LET CMD_NAME @PAD(@IF(@LENGTH("SHORT_NAME") == 0, @LOWER("FULL_NAME"), "SHORT_NAME"), 30, " ")
    VM.sysWrite("CMD_NAME OPTION.DESCRIP\n");
          $$$$ END LET CMD_NAME
     $$$$ END IF TAG == S
     $$$$ END SPLIT
$$$$ END FOREACH
$$$$ END LOOP
    instancePrintHelpFooter(prefix);

    VM.sysExit(VM.EXIT_STATUS_PRINTED_HELP_MESSAGE);
  }    

  // print the options values
  public String toString() throws org.vmmagic.pragma.NoOptCompilePragma {
    StringBuffer result = new StringBuffer();

    // Begin generated option value printing 
$$$$ LOOP BDATFILE BOOLEAN_DAT_FILES
$$$$ FOREACH OPTION BDATFILE
     $$$$ SPLIT "OPTION.DECL" " " FULL_NAME OPT_LEVEL DEFAULT_VALUE SHORT_NAME
     $$$$ LET CMD_NAME @PAD(@IF(@LENGTH("SHORT_NAME") == 0, @LOWER("FULL_NAME"), "SHORT_NAME"), 30, " ")
    result.append("\tCMD_NAME = ").append(FULL_NAME).append("\n");
     $$$$ END LET CMD_NAME
     $$$$ END SPLIT
$$$$ END FOREACH
$$$$ END LOOP
$$$$ LOOP VDATFILE VALUE_DAT_FILES
$$$$ FOREACH OPTION VDATFILE
     $$$$ SPLIT "OPTION.DECL" " " TAG FULL_NAME TYPE DEFAULT_VALUE SHORT_NAME
     $$$$ IF TAG == V
          $$$$ LET CMD_NAME @PAD(@IF(@LENGTH("SHORT_NAME") == 0, @LOWER("FULL_NAME"), "SHORT_NAME"), 30, " ")
    result.append("\tCMD_NAME = ").append(FULL_NAME).append("\n");
          $$$$ END LET CMD_NAME
     $$$$ END IF TAG == V
     $$$$ END SPLIT OPTION.DECL
$$$$ END FOREACH
$$$$ END LOOP
$$$$ LOOP VDATFILE VALUE_DAT_FILES
$$$$ FOREACH OPTION VDATFILE
     $$$$ SPLIT "OPTION.DECL" " " TAG FULL_NAME TYPE DEFAULT_VALUE SHORT_NAME
     $$$$ IF TAG == E
          $$$$ LET PCMD_NAME @PAD(@IF(@LENGTH("SHORT_NAME") == 0, @LOWER("FULL_NAME"), "SHORT_NAME"), 30, " ")
          $$$$ LOOP CONSTNAME OPTION.ENUMS
               $$$$ SPLIT "CONSTNAME" " " ITEM_NAME QUERRY_NAME CMD_NAME
    if (FULL_NAME == ITEM_NAME)
       result.append("\tPCMD_NAME = ITEM_NAME").append("\n");
               $$$$ END LET PCMD
               $$$$ END SPLIT CONSTNAME
          $$$$ END LOOP CONSTNAME
     $$$$ END IF TAG == E
     $$$$ END SPLIT
$$$$ END FOREACH
$$$$ END LOOP
$$$$ LOOP VDATFILE VALUE_DAT_FILES
$$$$ FOREACH OPTION VDATFILE
     $$$$ SPLIT "OPTION.DECL" " " TAG FULL_NAME TYPE DEFAULT_VALUE SHORT_NAME
     $$$$ IF TAG == S
          $$$$ LET CMD_NAME @PAD(@IF(@LENGTH("SHORT_NAME") == 0, @LOWER("FULL_NAME"), "SHORT_NAME"), 30, " ")
    {
      String val = (FULL_NAME==null)?"[]":FULL_NAME.toString();
      result.append("\tCMD_NAME = ").append(val).append("\n");
    }
          $$$$ END LET CMD_NAME
     $$$$ END IF TAG == V
     $$$$ END SPLIT OPTION.DECL
$$$$ END FOREACH
$$$$ END LOOP
    return result.toString();
    //End generated toString()
  }
  // return a String value of this options object
  public void printOptions() throws org.vmmagic.pragma.NoOptCompilePragma {
    printOptionsHeader();

    // Begin generated option value printing 
$$$$ LOOP BDATFILE BOOLEAN_DAT_FILES
$$$$ FOREACH OPTION BDATFILE
     $$$$ SPLIT "OPTION.DECL" " " FULL_NAME OPT_LEVEL DEFAULT_VALUE SHORT_NAME
     $$$$ LET CMD_NAME @PAD(@IF(@LENGTH("SHORT_NAME") == 0, @LOWER("FULL_NAME"), "SHORT_NAME"), 30, " ")
    VM.sysWriteln("\tCMD_NAME = ",FULL_NAME);
     $$$$ END LET CMD_NAME
     $$$$ END SPLIT
$$$$ END FOREACH
$$$$ END LOOP
$$$$ LOOP VDATFILE VALUE_DAT_FILES
$$$$ FOREACH OPTION VDATFILE
     $$$$ SPLIT "OPTION.DECL" " " TAG FULL_NAME TYPE DEFAULT_VALUE SHORT_NAME
     $$$$ IF TAG == V
          $$$$ LET CMD_NAME @PAD(@IF(@LENGTH("SHORT_NAME") == 0, @LOWER("FULL_NAME"), "SHORT_NAME"), 30, " ")
    VM.sysWriteln("\tCMD_NAME = ",FULL_NAME);
          $$$$ END LET CMD_NAME
     $$$$ END IF TAG == V
     $$$$ END SPLIT OPTION.DECL
$$$$ END FOREACH
$$$$ END LOOP
$$$$ LOOP VDATFILE VALUE_DAT_FILES
$$$$ FOREACH OPTION VDATFILE
     $$$$ SPLIT "OPTION.DECL" " " TAG FULL_NAME TYPE DEFAULT_VALUE SHORT_NAME
     $$$$ IF TAG == E
          $$$$ LET PCMD_NAME @PAD(@IF(@LENGTH("SHORT_NAME") == 0, @LOWER("FULL_NAME"), "SHORT_NAME"), 30, " ")
          $$$$ LOOP CONSTNAME OPTION.ENUMS
               $$$$ SPLIT "CONSTNAME" " " ITEM_NAME QUERRY_NAME CMD_NAME
    if (FULL_NAME == ITEM_NAME)
       VM.sysWriteln("\tPCMD_NAME = ITEM_NAME");
               $$$$ END LET PCMD
               $$$$ END SPLIT CONSTNAME
          $$$$ END LOOP CONSTNAME
     $$$$ END IF TAG == E
     $$$$ END SPLIT
$$$$ END FOREACH
$$$$ END LOOP
$$$$ LOOP VDATFILE VALUE_DAT_FILES
$$$$ FOREACH OPTION VDATFILE
     $$$$ SPLIT "OPTION.DECL" " " TAG FULL_NAME TYPE DEFAULT_VALUE SHORT_NAME
     $$$$ IF TAG == S
          $$$$ LET CMD_NAME @PAD(@IF(@LENGTH("SHORT_NAME") == 0, @LOWER("FULL_NAME"), "SHORT_NAME"), 30, " ")
    {
      String val = (FULL_NAME==null)?"[]":FULL_NAME.toString();
      VM.sysWriteln("\tCMD_NAME = ", val);
    }
          $$$$ END LET CMD_NAME
     $$$$ END IF TAG == V
     $$$$ END SPLIT OPTION.DECL
$$$$ END FOREACH
$$$$ END LOOP
    //End generated option value printing 
  }
