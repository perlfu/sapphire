/* -*-java-*-
 * (C) Copyright IBM Corp. 2003
 */
package org.mmtk.utility;

import org.mmtk.plan.Plan;
import org.mmtk.vm.Constants;
import org.mmtk.vm.VM_Interface;

import com.ibm.JikesRVM.VM_Extent;
import com.ibm.JikesRVM.VM_Uninterruptible;
import com.ibm.JikesRVM.VM_PragmaInterruptible;

/**
 * Class to handle command-line arguments and options for JMTk.
 * <p>
 * Note: This file is mechanically generated from Options.template.
 * <p>
 * Note: Boolean options are defined in BOOLEAN_DAT_FILES 
 *       All other options are defined in VALUE_DAT_FILES 
 *       (value, enumeration)
 *
 * @author Janice Shepherd
 * @author Dave Grove
 **/
public final class Options implements VM_Uninterruptible, Constants {

   // Begin generated support for "Enumeration" options
$$$$ LOOP VDATFILE VALUE_DAT_FILES
$$$$ FOREACH OPTION VDATFILE
     $$$$ SPLIT "OPTION.DECL" " " TAG FULL_NAME TYPE DEFAULT_VALUE SHORT_NAME
     $$$$ IF TAG == E
   // FULL_NAME
          $$$$ LOOP CONSTNAME OPTION.ENUMS
               $$$$ SPLIT "CONSTNAME" " " ITEM_NAME QUERRY_NAME CMD_NAME
   public static final TYPE ITEM_NAME = CONSTNAME.INDEX; 
   public static final boolean QUERRY_NAME() { return FULL_NAME == ITEM_NAME; }
               $$$$ END SPLIT CONSTNAME
          $$$$ END LOOP

      $$$$ END IF TAG == E
      $$$$ END SPLIT
$$$$ END FOREACH
$$$$ END LOOP
   // End generated support for "Enumeration" options

    // Begin template-specified options
$$$$ LOOP BDATFILE BOOLEAN_DAT_FILES
$$$$ FOREACH OPTION BDATFILE
     $$$$ SPLIT "OPTION.DECL" " " FULL_NAME DEFAULT_VALUE SHORT_NAME
     $$$$ LET PRETTY_NAME @PAD(FULL_NAME,30," ")
   public static boolean PRETTY_NAME= DEFAULT_VALUE; // OPTION.DESCRIP
     $$$$ END LET PRETTY_NAME
     $$$$ END SPLIT
$$$$ END FOREACH
$$$$ END LOOP
$$$$ LOOP VDATFILE VALUE_DAT_FILES
$$$$ FOREACH OPTION VDATFILE
     $$$$ SPLIT "OPTION.DECL" " " TAG FULL_NAME TYPE DEFAULT_VALUE SHORT_NAME
       $$$$ IF TAG == S
       $$$$ LET PRETTY_NAME @PAD(FULL_NAME,23-@LENGTH("TYPE")," ")
   private static java.util.HashSet PRETTY_NAME= null; // OPTION.DESCRIP
       $$$$ END LET PRETTY_NAME
       $$$$ ELSE
     $$$$ LET PRETTY_NAME @PAD(FULL_NAME,37-@LENGTH("TYPE")," ")
   public static TYPE PRETTY_NAME= DEFAULT_VALUE; // OPTION.DESCRIP
     $$$$ END LET PRETTY_NAME
       $$$$ END IF 
     $$$$ END SPLIT  
$$$$ END FOREACH
$$$$ END LOOP
   // End template-specified options

   // Begin generated support for filtering of value options
$$$$ LOOP VDATFILE VALUE_DAT_FILES
$$$$ FOREACH OPTION VDATFILE
     $$$$ SPLIT "OPTION.DECL" " " TAG FULL_NAME TYPE DEFAULT_VALUE SHORT_NAME
     $$$$ IF TAG == V
   // FULL_NAME
   private static TYPE filter_FULL_NAME(TYPE val) throws VM_PragmaInterruptible {
     OPTION.FILTER
     return val;
   }	
      $$$$ END IF TAG == V
      $$$$ END SPLIT
$$$$ END FOREACH
$$$$ END LOOP
   // End generated support for filtering of value options

  /**
   * Take a string (most likely a command-line argument) and try to proccess it
   * as an option command.  Return true if the string was understood, false 
   * otherwise.
   *
   * @param arg a String to try to process as an option command
   * @return true if successful, false otherwise
   */
  public static boolean process(String arg) throws VM_PragmaInterruptible {

    // First handle the "option commands"
    if (arg.equals("help")) {
       printHelp();
       return true;
    }
    if (arg.equals("printOptions")) {
       printOptions();
       return true;
    }
    if (arg.equals("")) {
      printHelp();
      return true;
    }

    // Required format of arg is 'name=value'
    // Split into 'name' and 'value' strings
    int split = arg.indexOf('=');
    if (split == -1) {
      Log.writeln("  Illegal option specification!\n  \""+arg+
		  "\" must be specified as a name-value pair in the form of option=value");
      return false;
    }
    String name = arg.substring(0,split);
    String value = arg.substring(split+1);

    // Begin generated command-line processing
$$$$ LOOP BDATFILE BOOLEAN_DAT_FILES
$$$$ FOREACH OPTION BDATFILE
     $$$$ SPLIT "OPTION.DECL" " " FULL_NAME DEFAULT_VALUE SHORT_NAME
     $$$$ LET CMD_NAME @IF(@LENGTH("SHORT_NAME") == 0, "FULL_NAME", "SHORT_NAME")
    if (name.equals("CMD_NAME")) {
      if (value.equals("true")) {
        FULL_NAME = true;
	return true;
      } else if (value.equals("false")) {
  	FULL_NAME = false;
        return true;
      } else 
        return false;
    }
     $$$$ END LET
     $$$$ END SPLIT
$$$$ END FOREACH
$$$$ END LOOP
$$$$ LOOP VDATFILE VALUE_DAT_FILES
$$$$ FOREACH OPTION VDATFILE
     $$$$ SPLIT "OPTION.DECL" " " TAG FULL_NAME TYPE DEFAULT_VALUE SHORT_NAME
    $$$$ LET CMD_NAME @IF(@LENGTH("SHORT_NAME") == 0, "FULL_NAME", "SHORT_NAME")
    if (name.equals("CMD_NAME")) {
     $$$$ IF TAG == V
          $$$$ IF TYPE == String
       FULL_NAME = filter_FULL_NAME(value);
          $$$$ ELSE
            $$$$ IF TYPE == int
       FULL_NAME = filter_FULL_NAME(VM_Interface.primitiveParseInt(value));
            $$$$ ELSE
              $$$$ IF TYPE == byte
       FULL_NAME = filter_FULL_NAME((byte)VM_Interface.primitiveParseInt(value));
              $$$$ ELSE
                $$$$ IF TYPE == double
       FULL_NAME = filter_FULL_NAME(VM_Interface.primitiveParseFloat(value));
                $$$$ ELSE
                  $$$$ IF TYPE == float
       FULL_NAME = filter_FULL_NAME(VM_Interface.primitiveParseFloat(value));
                  $$$$ ELSE
       Hey! You tried to declare a value option of unrecognized type...fix it!
                  $$$$ END IF
                $$$$ END IF
              $$$$ END IF
            $$$$ END IF
          $$$$ END IF
       return true;
     }
     $$$$ ELSE 
       $$$$ IF TAG == E
           $$$$ LOOP CONSTNAME OPTION.ENUMS
                 $$$$ SPLIT "CONSTNAME" " " ITEM_NAME QUERRY_NAME CMD_NAME2
       if (value.equals("CMD_NAME2")) {
         FULL_NAME = ITEM_NAME;
         return true;
       }         
                 $$$$ END SPLIT CONSTNAME
            $$$$ END LOOP
       return false;
     }
       $$$$ ELSE
     Whoops! Unimplemented tag: TAG...go nag Dave and he'll finish it.
       $$$$ END IF TAG == E
     $$$$ END IF TAG == V
     $$$$ END LET CMD_NAME
     $$$$ END SPLIT
$$$$ END FOREACH
$$$$ END LOOP
       //End generated command-line processing

    // None of the above tests matched, so this wasn't an option
    return false;
  }

  // Print a short description of every option
  // Throws VM_PragmaNoOptCompile to avoid occasional OutOfMemory errors when
  // boot image writing.
  public static void printHelp() {

    Log.writeln("Commands");
    Log.writeln("-X:gc[:help]\t\t\tPrint brief description of JMTk's command-line arguments");
    Log.writeln("-X:gc:printOptions\t\tPrint the current values of JMTk's options");
    Log.writeln();

    //Begin generated help messages
    Log.writeln("Boolean Options (-X:gc:<option>=true or -X:gc:<option>=false)");
    Log.writeln("Option                                 Description");
$$$$ LOOP BDATFILE BOOLEAN_DAT_FILES
$$$$ FOREACH OPTION BDATFILE
     $$$$ SPLIT "OPTION.DECL" " " FULL_NAME DEFAULT_VALUE SHORT_NAME
     $$$$ LET CMD_NAME @PAD(@IF(@LENGTH("SHORT_NAME") == 0, "FULL_NAME", "SHORT_NAME"), 30, " ")
    Log.writeln("CMD_NAME OPTION.DESCRIP");
     $$$$ END LET CMD_NAME
     $$$$ END SPLIT
$$$$ END FOREACH
$$$$ END LOOP
    Log.writeln("\nValue Options (-X:gc:<option>=<value>)");
    Log.writeln("Option                         Type    Description");
$$$$ LOOP VDATFILE VALUE_DAT_FILES
$$$$ FOREACH OPTION VDATFILE
     $$$$ SPLIT "OPTION.DECL" " " TAG FULL_NAME TYPE DEFAULT_VALUE SHORT_NAME
     $$$$ IF TAG == V
          $$$$ LET CMD_NAME @PAD(@IF(@LENGTH("SHORT_NAME") == 0, "FULL_NAME", "SHORT_NAME"), 30, " ")
          $$$$ LET TNAME @PAD("TYPE", 7, " ")
    Log.writeln("CMD_NAME TNAME OPTION.DESCRIP");
          $$$$ END LET TYPE_NAME
          $$$$ END LET CMD_NAME
     $$$$ END IF TAG == V
     $$$$ END SPLIT OPTION.DECL
$$$$ END FOREACH
$$$$ END LOOP
    Log.writeln("\nSelection Options (set option to one of an enumeration of possible values)");
$$$$ LOOP VDATFILE VALUE_DAT_FILES
$$$$ FOREACH OPTION VDATFILE
     $$$$ SPLIT "OPTION.DECL" " " TAG FULL_NAME TYPE DEFAULT_VALUE SHORT_NAME
     $$$$ IF TAG == E
    Log.writeln("\t\tOPTION.DESCRIP");
	  $$$$ LET MAIN_CMD_NAME @PAD(@IF(@LENGTH("SHORT_NAME") == 0, "FULL_NAME", "SHORT_NAME"), 30, " ")
    Log.write("MAIN_CMD_NAME");
            $$$$ LOOP CONSTNAME OPTION.ENUMS
                 $$$$ SPLIT "CONSTNAME" " " ITEM_NAME QUERRY_NAME CMD_NAME
    Log.write("CMD_NAME ");
                 $$$$ END SPLIT CONSTNAME
            $$$$ END LOOP CONSTNAME
          $$$$ END LET MAIN_CMD_NAME
    Log.writeln();
     $$$$ END IF TAG == E
     $$$$ END SPLIT
$$$$ END FOREACH
$$$$ END LOOP

    VM_Interface.sysExit(1);
  }    

  // print the options values
  public static void printOptions() {
    Log.writeln("Current value of JMTk options");
    //Begin generated option value printing 
$$$$ LOOP BDATFILE BOOLEAN_DAT_FILES
$$$$ FOREACH OPTION BDATFILE
     $$$$ SPLIT "OPTION.DECL" " " FULL_NAME DEFAULT_VALUE SHORT_NAME
     $$$$ LET CMD_NAME @PAD(@IF(@LENGTH("SHORT_NAME") == 0, "FULL_NAME", "SHORT_NAME"), 30, " ")
    Log.write("\tCMD_NAME = "); Log.writeln(FULL_NAME);
     $$$$ END LET CMD_NAME
     $$$$ END SPLIT
$$$$ END FOREACH
$$$$ END LOOP
$$$$ LOOP VDATFILE VALUE_DAT_FILES
$$$$ FOREACH OPTION VDATFILE
     $$$$ SPLIT "OPTION.DECL" " " TAG FULL_NAME TYPE DEFAULT_VALUE SHORT_NAME
     $$$$ IF TAG == V
          $$$$ LET CMD_NAME @PAD(@IF(@LENGTH("SHORT_NAME") == 0, "FULL_NAME", "SHORT_NAME"), 30, " ")
    Log.write("\tCMD_NAME = "); Log.writeln(FULL_NAME);
          $$$$ END LET CMD_NAME
     $$$$ END IF TAG == V
     $$$$ END SPLIT OPTION.DECL
$$$$ END FOREACH
$$$$ END LOOP
$$$$ LOOP VDATFILE VALUE_DAT_FILES
$$$$ FOREACH OPTION VDATFILE
     $$$$ SPLIT "OPTION.DECL" " " TAG FULL_NAME TYPE DEFAULT_VALUE SHORT_NAME
     $$$$ IF TAG == E
          $$$$ LET PCMD_NAME @PAD(@IF(@LENGTH("SHORT_NAME") == 0, "FULL_NAME", "SHORT_NAME"), 30, " ")
          $$$$ LOOP CONSTNAME OPTION.ENUMS
               $$$$ SPLIT "CONSTNAME" " " ITEM_NAME QUERRY_NAME CMD_NAME
    if (FULL_NAME == ITEM_NAME)
       Log.writeln("\tPCMD_NAME = ITEM_NAME");
               $$$$ END LET PCMD
               $$$$ END SPLIT CONSTNAME
          $$$$ END LOOP CONSTNAME
     $$$$ END IF TAG == E
     $$$$ END SPLIT
$$$$ END FOREACH
$$$$ END LOOP
    //End generated option value printing 
  }
}
