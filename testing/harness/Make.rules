#
# This file is part of Jikes RVM (http://jikesrvm.sourceforge.net).
# The Jikes RVM project is distributed under the Common Public License (CPL).
# A copy of the license is included in the distribution, and is also
# available at http://www.opensource.org/licenses/cpl1.0.php
#
# (C) Copyright IBM Corp. 2001
#
# $Id$
#
# @author Julian Dolby

#
# major purpose of examples is sanity test
#
default:	sanity


#
# where to find source code
#
BENCH_SOURCE_CP = $(shell echo $(strip $(BENCH_SOURCE_PATH)) | sed s/\ /:/g)

vpath %.java		$(BENCH_SOURCE_CP)

#
# where to put stuff
#
WORKING?=.

$(WORKING):	
	mkdir -p $(WORKING)

$(WORKING)/cp:	$(WORKING)
	mkdir -p $(WORKING)/cp

#
# where to find and put .class files
#
BENCH_CLASS_PATH := $(BENCH_CLASS_PATH) $(WORKING)/cp $(BENCH_JARS)
BENCH_CLASS_CP = $(shell echo $(strip $(BENCH_CLASS_PATH)) | sed s/\ /:/g)

vpath %.class		$(BENCH_CLASS_CP)

#
# how to compile
#
ALL_PATH = $(BENCH_SOURCE_PATH) \
	   $(BENCH_CLASS_PATH) \
	   $(JAL_BUILD)/RVM.classes/jksvm.jar \
	   $(JAL_BUILD)/RVM.classes/rvmrt.jar

ALL_CP = $(shell echo $(strip $(ALL_PATH)) | sed s/\ /:/g)

%.class:		%.java $(WORKING)/cp 
	$(HOST_JAVAC) -d $(WORKING)/cp -classpath $(ALL_CP) $<

#
# how to run
#

# which vm to use (defaults to RVM)
JVM?=rvm

# what to run
START_CLASS=$(shell echo $(START_NAME) | sed 's@\.@/@g').class

# how to invoke RVM
ifeq (x$(JBOOT),x)
  JBOOT = $(JAL_ROOT)/bin/rvm
endif

# arguments to pass to the vm
RVM_ARGS = $(BENCH_RVM_ARGS) 
JDK_ARGS = $(BENCH_JDK_ARGS)
ifneq (x$(PROCESSORS),x)
  RVM_ARGS += -X:processors=$(PROCESSORS)
endif
ifneq (x$(HEAPSIZE),x)
  RVM_ARGS += -Xmx$(HEAPSIZE)M
  JDK_ARGS += -Xmx$(HEAPSIZE)M
endif
ifneq (x$(INITIAL_HEAPSIZE),x)
  RVM_ARGS += -Xms$(INITIAL_HEAPSIZE)M
  JDK_ARGS += -Xms$(INITIAL_HEAPSIZE)M
endif
RVM_ARGS += $(RC_ARGS)

ifneq (x$(BOOTNAME),x)
  EXT=.$(BOOTNAME)
else
ifneq (x$(ID),x)
  EXT=.$(ID)
endif
endif
OUT=$(WORKING)/out.$(START_NAME)$(EXT)$(SUFFIX)

TEST_NAME=$(BENCH_NAME)

bench-rvm-internal: 
	@sync
	@cd $(WORKING); $(JBOOT) $(RVM_ARGS) -classpath $(BENCH_CLASS_CP) $(START_NAME) $(START_ARGS) 2>&1 \
		| tee $(OUT).raw \
		| tr '\000' ' ' \
		| $(AWK) -f $(JAL_ROOT)/testing/harness/RVMJunkFilter.awk \
			> $(OUT)

bench-rvm:			$(START_CLASS) $(WORKING) 
	@echo 
	@echo "Running $(START_NAME) with limit of $(TIME_LIMIT) seconds..."
	@echo "   $(JBOOT) $(RVM_ARGS) -classpath $(BENCH_CLASS_CP) $(START_NAME) $(START_ARGS)"
	@$(RVM_ROOT)/testing/harness/limited.bash $(TIME_LIMIT) $(GNU_MAKE) bench-rvm-internal || (echo "You are NOT sane $(CONFIG_NAME) $(TEST_NAME)"; exit 1)


bench-jdk-internal:
	@cd $(WORKING); $(HOST_VM_RT) $(JDK_ARGS) -classpath $(BENCH_CLASS_CP) $(START_NAME) $(START_ARGS) > $(OUT) 2>&1


bench-jdk:			$(START_CLASS) $(WORKING)
	@echo "   running on JDK for comparison"
	@$(RVM_ROOT)/testing/harness/limited.bash $(TIME_LIMIT) $(GNU_MAKE) bench-jdk-internal

bench:
	$(MAKE) bench-$(JVM)
ifeq ($(NON_DETERMINISTIC_OUTPUT_ORDER),YES)
	@mv $(OUT) $(OUT).tmp
	@sort $(OUT).tmp > $(OUT)
	@rm -f $(OUT).tmp
endif

#
# support for server codes
#

# program for finding free inet sockets
FREEPORT_SH=$(JAL_ROOT)/testing/harness/freeport.sh

# wait for server to generate sentinel output
wait:	
ifeq ($(LIMIT),0)
	fgrep -q $(SENTINEL) $(OUT).raw
else
	sleep 10
	fgrep -q $(SENTINEL) $(OUT).raw || $(MAKE) LIMIT=`expr $(LIMIT) - 1` wait
endif

# start in background and wait for desired output
start-bench:
	echo $$$$ > $(OUT).pid; $(MAKE) bench

start:
	@rm -f $(OUT).server
	$(MAKE) START_NAME=$(SERVER_NAME) START_ARGS=$(SERVER_ARGS) OUT=$(OUT).server start-bench &
	$(MAKE) OUT=$(OUT).server LIMIT=15 wait

wait-for-end:
	($(PS) -e | $(FGREP) -qv $(PID)) || (sleep 10; $(MAKE) wait-for-end)

# start server, run client, finish server
do-server-run:
	$(MAKE) start
	sleep 10
	$(MAKE) client
	$(MAKE) finish
	$(MAKE) wait-for-end PID=`cat $(OUT).server.pid`
	kill -9 `cat $(OUT).server.pid` || true
	$(MAKE) OUT=$(OUT).server server-check

client:
	$(MAKE) START_NAME=$(CLIENT_NAME) START_ARGS=$(CLIENT_ARGS) OUT=$(OUT).client bench
	$(MAKE) OUT=$(OUT).client client-check

finish:
	$(MAKE) START_NAME=$(STOP_NAME) START_ARGS=$(STOP_ARGS) OUT=$(OUT).stop bench


server-sanity-check-rules:
	@$(MAKE) do-server-run
	@$(MAKE) do-sanity-finish


#
# sanity tests
#

do-sanity-check-rule:
	@$(MAKE) bench JVM=rvm
	@($(MAKE) check && echo "You are sane $(CONFIG_NAME) $(TEST_NAME)") || (echo "You are NOT sane $(CONFIG_NAME) $(TEST_NAME)"; exit 1)

do-sanity-compare:
	@$(MAKE) JVM=rvm bench
	@$(MAKE) OUT=$(OUT).jdk JVM=jdk bench
	@($(DIFF) -bqB $(OUT).jdk $(OUT) && echo "You are sane $(CONFIG_NAME) $(TEST_NAME)") || (echo "You are NOT sane $(CONFIG_NAME) $(TEST_NAME)"; exit 1)

do-sanity-finish:
ifeq ($(MODE),PERFORMANCE)
	echo "RESULT: $(BOOTNAME) $(BENCH_NAME) $(OPT_LEVEL)" >> $(PERF_LOG)
	@$(MAKE) do-gather-performance
endif

sanity-check-rule:
	@$(MAKE) do-sanity-check-rule
	@$(MAKE) do-sanity-finish

sanity-diff:
	@$(MAKE) JVM=rvm bench
	@($(DIFF) -bqB $(EXPECTED) $(OUT) && echo "You are sane $(CONFIG_NAME) $(TEST_NAME)") || (echo "You are NOT sane $(CONFIG_NAME) $(TEST_NAME)"; exit 1)
	@$(MAKE) do-sanity-finish

sanity-compare:
	@$(MAKE) do-sanity-compare
	@$(MAKE) do-sanity-finish

#
# cleanup generated stuff
#
clean:
	rm -rf $(WORKING)/cp $(OUT)

