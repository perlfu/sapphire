<!--
 * Ant build file for boot image vmmagic
 *       
 * - jar         compiles from source and creates the jar file. 
 *   $Date: 2006/07/08 01:51:44 $
 *   $Id: build.xml,v 1.19 2006/07/08 01:51:44 steveb Exp $
-->

<project name="vmmagic" default="jar" basedir=".">
	<description>boot image vmmagic</description>

	<property name="target.jar" location="vmmagic-host.jar"/>
	
	<property name="src" location="src"/>
	<property name="src.gen" location="src-generated"/>
	<property name="path.arch-word" location="${src.gen}/org/vmmagic/unboxed"/>
	<property name="build" location="build"/>

	<!-- ================================= 
         target: initialize
         ================================= -->
	<target name="init">
		<!-- Create the build directory structure used by compile -->
		<mkdir dir="${build}"/>
		<mkdir dir="${path.arch-word}"/>
	</target>

	<!-- ================================= 
         target: clean              
         ================================= -->
	<target name="clean" description="clean up">
		<delete dir="${build}"/>
	</target>
	
	<!-- ================================= 
         target: generate ArchitecturalWord type
         ================================= -->
	<target name="32bitbuild" unless="build.64bit">
		<property name="32mask" value=""/>
		<property name="64mask" value="//"/>
	</target>
	<target name="64bitbuild" if="build.64bit">
		<property name="32mask" value="//"/>
		<property name="64mask" value=""/>
	</target>	
	<target name="genarch" depends="init,32bitbuild,64bitbuild" description="generate architectural word class" >
		
	<echo file="${path.arch-word}/ArchitecturalWord.java" append="false">package org.vmmagic.unboxed;

/* machine-generated DO NOT EDIT */

import com.ibm.jikesrvm.VM;
import org.vmmagic.pragma.Uninterruptible;

@Uninterruptible abstract class ArchitecturalWord {
  ${32mask}protected int value;
  ${64mask}protected long value;

  ArchitecturalWord() {
    this.value = 0;
  }
  ArchitecturalWord(int value, boolean zeroExtend) {
    ${32mask}this.value = value;
    ${64mask}this.value = (zeroExtend) ? ((long)value) &amp; 0x00000000ffffffffL : value;
  }
  ArchitecturalWord(long value) {
    ${32mask}VM._assert(VM.NOT_REACHED);
    ${64mask}this.value = value;
  }
}
	</echo>

	</target>

	<!-- ================================= 
         target: compile all sources
         ================================= -->
	<target name="compile" depends="init,genarch" description="compile the vmmagic sources" >
		<javac srcdir="${src}" destdir="${build}">
             <sourcepath>
             <pathelement location="${src.gen}"/>
             </sourcepath>
             <classpath>
             <pathelement location="${rvm.path}"/>
             </classpath>
		</javac>
	</target>

	<!-- ================================= 
         target: copy the sources, doc & licenses
         ================================= -->
	<target name="sources" depends="init" description="copy the sources" >
		<copy todir="${build}">
			<fileset dir="." includes="src/**"/>
			<fileset file="LICENSE"/>
			<fileset file="build.xml"/>
		</copy>
	</target>
	
	<!-- ================================= 
         target: jar              
         ================================= -->
	<target name="jar" depends="compile,sources" description="generate a jar file" >
		<!-- Put everything in ${build} into the ${jar.name} jar file -->
		<jar jarfile="${target.jar}" basedir="${build}" index="true" />
	</target>
</project>
